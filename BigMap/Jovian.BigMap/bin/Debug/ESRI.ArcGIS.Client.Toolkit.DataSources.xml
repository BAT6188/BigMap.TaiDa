<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ESRI.ArcGIS.Client.Toolkit.DataSources</name>
    </assembly>
    <members>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer">
            <summary>
            A <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see> type of custom 
            <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">GraphicsLayer</see> based on the 
            <a href="http://office.microsoft.com/en-us/excel-help/import-or-export-text-txt-or-csv-files-HP010099725.aspx" target="_blank">Comma Separated Value</a> 
            (CSV) file format.
            </summary>
            <remarks>
            <para>
            The CSV file format is tabular data in plain text. The data in the CSV file consists of fields of data separated by 
            a delimiting character (typically a comma) for a record. The first record in the CSV file is known as the header and 
            defines the names of each field of the tabular data. The second through last row of records in the CSV file is the 
            actual tabular data. When the delimiter (typically a comma) is embedded in the tabular data for a particular field, 
            that value should be encased in quotes to avoid parsing errors. Each record in the CSV file should contain the same 
            number of fields. Numerous applications including the Microsoft Excel Office product can export and import CSV files. 
            It is not required that a CSV source file contain the extension .csv; the file can contain any extension (ex: .txt) 
            or none at all.
            </para>
            <para>
            In order to make use of CSV files in the 
            
            ArcGIS Runtime SDK for WPF
            
             there should be point based spatial locational coordinate information for each record. This spatial information 
             defines the <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see> that will be used to construct a 
             custom <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">GraphicsLayer</see>. Other geography types like Polyline or 
             Polygon are not supported for constructing a CsvLayer. Unless specified otherwise in the 
             <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceSpatialReference">SourceSpatialReference</see> 
             Property, it is assumed that the <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> 
             of the CsvLayer has a WKID value of 4326. During the parsing process of reading the header record of the CSV file 
             to construct the CsvLayer, any of the following names can be used to automatically detect the spatial location 
             coordinate information:
            </para>
            <list type="table">
              <listheader><term>Coordinate Type</term><description>Automatically detected Field names</description></listheader>
              <item><term>LATITUDE</term><description>"lat", "latitude", "y", "ycenter", "latitude83", "latdecdeg", "point-y"</description></item>
              <item><term>LONGITUDE</term><description>"lon", "lng", "long", "longitude", "x", "xcenter", "longitude83", "longdecdeg", "point-x"</description></item>
            </list>
            <para>
            NOTE: The CsvLayer parsing algorithm for the Field names listed in the table above is case insensitive.
            </para>
            <para>
            If the above spatial location coordinate field names are not specified in the header record, then it will be required 
            to specify them explicitly. Use the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.XFieldName">XFieldName</see> 
            Property to explicitly specify the Longitude coordinate and the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.YFieldName">YFieldName</see> Property to explicitly specify 
            the Latitude coordinate.
            </para>
            <para>
            By default it is assumed that the delimiter for the CSV file in parsing data values for between fields is the comma 
            (,). If another delimiter is used (for example a tab or dash) it is required to specify the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.ColumnDelimiter">ColumnDelimiter</see> Property. If the 
            comma is used as the delimiter in the CSV file the ColumnDelimiter Property does not need to be set.
            </para>
            <para>
            If it is not desired to convert all of the fields of information in the CSV records into a CsvLayer use the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceFields">SourceFields</see> Property to set exactly 
            which fields will become attributes in the CsvLayer. If the SourceFields Property is not specified then all fields 
            of information in the CSV file will be used to populate the attributes in the CsvLayer. To restrict which fields 
            are generated in the CsvLayer using the SourceFields Property, create a new 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.FieldCollection">CsvLayer.FieldCollection</see> object 
            and add the specific <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> objects with the minimum Properties of 
            <see cref="P:ESRI.ArcGIS.Client.Field.FieldName">Field.FieldName</see> and 
            <see cref="P:ESRI.ArcGIS.Client.Field.Type">Field.Type</see> being set. The Field.FieldName should match the header 
            name contained inside the CSV file. If Field.Type is not provided field type will default to string.
            </para>
            <para>
            If it is desired to obtain the CSV data from a 
            <a href="http://msdn.microsoft.com/en-us/library/system.io.stream(v=vs.100).aspx" target="_blank">Stream</a> rather 
            than a Url use the <see cref="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SetSource(System.IO.Stream)">SetSource</see> Method.
            </para>
            <para>
            Because the CsvLayer inherits all of the GraphicsLayer functionality (which also inherits from Layer), this means 
            that all of the things you can do a GraphicsLayer can also be done on a CsvLayer. For example 
            
            you can set up a <b>GraphicsLayer.MapTip</b> to display popup information when the mouse is hovered over a particular MapPoint Graphic;
            you can <see cref="M:ESRI.ArcGIS.Client.Graphic.Select">select</see> a particular Graphic in the CsvLayer; 
            or you can even define when particular Graphic displays in the Map based upon a 
            <see cref="P:ESRI.ArcGIS.Client.Layer.VisibleTimeExtent">VisibleTimeExtent</see>. The possibilities are only limited 
            to your ideas and programming experience.
            </para>
            
            <para>
            The bare minimum settings that need to be specified to create and display a CsvLayer in a Map are the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Url">Url</see> and 
            <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Renderer">Renderer</see> Properties (Url methodology) OR the 
            <see cref="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SetSource(System.IO.Stream)">SetSource</see> and 
            <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Renderer">Renderer</see> Properties (Stream methodology). 
            NOTE: This assumes that default spatial coordinate information field names are used and the delimiter for the 
            CSV file is a comma.
            </para>
            <para>
            There are several methods to construct a Url for accessing data in a CSV layer. The example code in the 
            <b>CsvLayer</b> Class documentation shows how to access 
            a CSV file via on a web server and uses the 'http://' keyword to construct a Url. The example code in the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Url">CsvLayer.Url</see> Property documentation shows 
            how to access a CSV file as a resource on the local disk in a Visual Studio project using the 
            '[Visual_Studio_Project_Name]' and the 'component' keywords. Even more options are available such as constructing 
            a Url using the 'file://' or 'pack://' keywords. The development platform you are coding in will determine which 
            style of Url is appropriate. See the documentation for your particular development platform to decide which type 
            of string can be used in the the Url construction.
            </para>
            <para>
            Supported text character encodings of the CSV file should be based on Unicode/UTF-8. If other character encodings are desired, download the source code 
            for the Toolkit on CodePlex and modify as necessary.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            When the application loads a CsvLayer will automatically be added to the Map (it was specified in XAML). 
            Click the Button to add another CsvLayer to the Map (it will be added via code-behind). The ID of each 
            layer will displayed in the TextBox. 
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following is an example of the ASCII contents for the file named US_Cities_Top_5.csv:<br/>
            ID,Lat,Long,CityName,Population<br/>
            1,40.714,-74.006,New York City,8244910<br/>
            2,34.0522,-118.244,Los Angeles,3819702<br/>
            3,41.878,-87.636,Chicago,2708120<br/>
            4,29.763,-95.363,Houston,2099451<br/>
            5,39.952,-75.168,Philadelphia,1526006<br/>
            </para>
            <para>
            The following is an example of the ASCII contents for the file named US_Cities_6_to_10.csv:<br/>
            ID,Lat,Long,CityName,Population<br/>
            6,29.423,-98.493,San Antonio,1327407<br/>
            7,32.715,-117.156,San Diego,1326179<br/>
            8,32.782,-96.815,Dallas,1223229<br/>
            9,37.228,-119.228,San Jose,945942<br/>
            10,30.331,-81.655,Jacksonville,821784<br/>
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Adding a CsvLayer in XAML and code-behind." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ToolkitDataSources.CsvLayer.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add local Resources to define a SimpleRender to display Red circles as a SimpleMarkerSymbol 
              for the CsvLayer. --&gt;
              &lt;Grid.Resources&gt;
                &lt;esri:SimpleRenderer x:Key="myRenderer"&gt;
                  &lt;esri:SimpleRenderer.Symbol&gt;
                    &lt;esri:SimpleMarkerSymbol Color="Red" Size="12" Style="Circle" /&gt;
                  &lt;/esri:SimpleRenderer.Symbol&gt;
                &lt;/esri:SimpleRenderer&gt;
              &lt;/Grid.Resources&gt;
              
              &lt;!-- Add a Map Control to the application. Set the Extent to North America. --&gt;
              &lt;esri:Map x:Name="Map1" HorizontalAlignment="Left" VerticalAlignment="Top" 
                    Margin="0,238,0,0" Height="350" Width="415" Extent="-15219969,2609636,-6232883,6485365"&gt;
              
                &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer  ID="World_Topo_Map" 
                      Url="http://services.arcgisonline.com/arcgis/rest/services/world_topo_map/MapServer" /&gt;
                
                &lt;!-- Add a CsvLayer. The renderer symbology will be based upon the local static resource defined above.
                NOTE: you need to adjust the Url to a .csv file served up on your test web server. --&gt;
                &lt;esri:CsvLayer ID="US_Cities_Top_5" Url="http://www.yourserver.com/CSV_Files/US_Cities_Top_5.csv"
                      Renderer="{StaticResource myRenderer}" Initialized="CsvLayer_Initialized"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button that will allow the user to add another CsvLayer via code-behind. --&gt;
              &lt;Button Name="Button1" Height="23" HorizontalAlignment="Left" Margin="0,209,0,0"  VerticalAlignment="Top" 
                      Width="706" Content="Add another CsvLayer (via code-behind) for the specified Url."
                      Click="Button1_Click" /&gt;
              
              &lt;!-- TextBox to display information about about the CsvLayerLayers added to the Map. --&gt;
              &lt;TextBox Height="350" HorizontalAlignment="Left" Margin="421,238,0,0" Name="TextBox1" VerticalAlignment="Top" 
                       Width="285" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="174" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" 
                         TextWrapping="Wrap" Text="When the application loads a CsvLayer will automatically be added 
                         to the Map (it was specified in XAML). Click the Button to add another CsvLayer to the Map 
                         (it will be added via code-behind). The ID of each layer will displayed in the TextBox." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void CsvLayer_Initialized(object sender, System.EventArgs e)
            {
              // This function will execute as a result of the CsvLayer that was defined in XAML being Initialized.
              
              // Get the CsvLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)sender;
              
              // Get the ID of the CsvLayer.
              string myID = myCsvLayer.ID;
              
              // Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              System.Text.StringBuilder myStringBuilder = new System.Text.StringBuilder();
              myStringBuilder.Append("The 1st CsvLayer was" + Environment.NewLine);
              myStringBuilder.Append("added via XAML and it's ID is: " + Environment.NewLine);
              myStringBuilder.Append(myID);
              
              // Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString();
            }
            
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              // Create a CsvLayer. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer2 = new ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer();
              
              // Set the Url of the CsvLayer to a public service. 
              // NOTE: you need to adjust the Url to a .csv file served up on your test web server.
              myCsvLayer2.Url = "http://www.yourserver.com/CSV_Files/US_Cities_6_to_10.csv";
              
              // Set the ID of the CsvLayer.
              myCsvLayer2.ID = "US_Cities_6_to_10";
              
              // Create a SimpleMarkerSymbol (a green circle) for the CsvLayer that will be added.
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol theSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              theSimpleMarkerSymbol.Color = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green);
              theSimpleMarkerSymbol.Size = 12;
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle;
              
              // Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              ESRI.ArcGIS.Client.SimpleRenderer theSimpleRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol;
              
              // Define the Renderer for the CsvLayer.
              myCsvLayer2.Renderer = theSimpleRenderer;
              
              // Wire-up the Initialized Event of the CsvLayer. Note how a different Initilized Event is being used verses 
              // the one defined in XAML. They could share the same Initialized Event but we created two seperate ones 
              // for demonstration purposes.
              myCsvLayer2.Initialized += CsvLayer_Initialized2;
              
              // Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer2);
            }
            
            private void CsvLayer_Initialized2(object sender, EventArgs e)
            {
              // This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              // Get the CsvLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer2 = (ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)sender;
              
              // Get the ID of the CsvLayer.
              string myID2 = myCsvLayer2.ID;
              
              // Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              System.Text.StringBuilder myStringBuilder = new System.Text.StringBuilder();
              myStringBuilder.Append(TextBox1.Text + Environment.NewLine);
              myStringBuilder.Append(Environment.NewLine);
              myStringBuilder.Append("The 2nd CsvLayer was" + Environment.NewLine);
              myStringBuilder.Append("added via code-behind and it's ID is: " + Environment.NewLine);
              myStringBuilder.Append(myID2);
              
              // Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub CsvLayer_Initialized(sender As System.Object, e As System.EventArgs)
              
              ' This function will execute as a result of the CsvLayer that was defined in XAML being Initialized.
              
              ' Get the CsvLayer.
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = CType(sender, ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)
              
              ' Get the ID of the CsvLayer.
              Dim myID As String = myCsvLayer.ID
              
              ' Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              Dim myStringBuilder As New Text.StringBuilder
              myStringBuilder.Append("The 1st CsvLayer was" + vbCrLf)
              myStringBuilder.Append("added via XAML and it's ID is: " + vbCrLf)
              myStringBuilder.Append(myID)
              
              ' Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString
              
            End Sub
            
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              ' Create a CsvLayer. 
              Dim myCsvLayer2 As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer
              
              ' Set the Url of the CsvLayer to a public service. 
              ' NOTE: you need to adjust the Url to a .csv file served up on your test web server.
              myCsvLayer2.Url = "http://www.yourserver.com/CSV_Files/US_Cities_6_to_10.csv"
              
              ' Set the ID of the CsvLayer.
              myCsvLayer2.ID = "US_Cities_6_to_10"
              
              ' Create a SimpleMarkerSymbol (a green circle) for the CsvLayer that will be added.
              Dim theSimpleMarkerSymbol As ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol = New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              theSimpleMarkerSymbol.Color = New System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green)
              theSimpleMarkerSymbol.Size = 12
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle
              
              ' Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              Dim theSimpleRenderer As ESRI.ArcGIS.Client.SimpleRenderer = New ESRI.ArcGIS.Client.SimpleRenderer
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol
              
              ' Define the Renderer for the CsvLayer.
              myCsvLayer2.Renderer = theSimpleRenderer
              
              ' Wire-up the Initialized Event of the CsvLayer. Note how a different Initilized Event is being used verses 
              ' the one defined in XAML. They could share the same Initialized Event but we created two seperate ones 
              ' for demonstration purposes.
              AddHandler myCsvLayer2.Initialized, AddressOf CsvLayer_Initialized2
              
              ' Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer2)
              
            End Sub
            
            Private Sub CsvLayer_Initialized2(sender As Object, e As EventArgs)
              
              ' This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              ' Get the CsvLayer.
              Dim myCsvLayer2 As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = CType(sender, ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)
              
              ' Get the ID of the CsvLayer.
              Dim myID2 As String = myCsvLayer2.ID
              
              ' Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              Dim myStringBuilder As New Text.StringBuilder
              myStringBuilder.Append(TextBox1.Text + vbCrLf)
              myStringBuilder.Append(vbCrLf)
              myStringBuilder.Append("The 2nd CsvLayer was" + vbCrLf)
              myStringBuilder.Append("added via code-behind and it's ID is: " + vbCrLf)
              myStringBuilder.Append(myID2)
              
              ' Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.#ctor">
            <summary>
            Initalizes and instance of <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceFieldsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceFields"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.XFieldNameProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.XFieldName"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.YFieldNameProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.YFieldName"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.ColumnDelimiterProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.ColumnDelimiter"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.UrlProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Url"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceSpatialReferenceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceSpatialReference"/> dependency property. The default value is WKID (4326).
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.CredentialsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Credentials"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.ClientCertificateProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.ClientCertificate"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Reset">
            <summary>
            Clears the graphics and reloads the CSV data.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.GetGraphics(System.Action{ESRI.ArcGIS.Client.GraphicCollection})">
            <summary>
            This will start the process to find the CSV data, process the data, and convert into graphics.
            </summary>
            <param name="onCompleted">The callback handler that will return a collection of graphics for the layer.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.CreateGraphics(System.Collections.Generic.List{System.String[]},System.Action{ESRI.ArcGIS.Client.GraphicCollection})">
            <summary>
            Creates a GraphicCollection from a list of string array containing rows of CSV data.
            </summary>
            <param name="csvData">list of string array containing multiple rows of CSV data.</param>
            <param name="onCompleted">Callback that will return the GraphicCollection after all the CSV data is parsed into Graphic objects</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.CsvParser(System.Action{System.Collections.Generic.List{System.String[]}})">
            <summary>
            This will attempt to download or retrieve the CSV file from various locations based on what the platform supports. The if CSV data
            is found it will be read and returned as a list of string array.
            </summary>
            <param name="callback">Calback that will return list of string array containing parsed CSV data</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.ConvertToExpectedType(System.Object,ESRI.ArcGIS.Client.Field.FieldType)">
            <summary>
            Attempts to convert and object into a exact data type based on FieldType metadata.
            </summary>
            <param name="valueObject">object value to try and convert into a specific type</param>
            <param name="expectedValueType">type that the value object will try to be converted to.</param>
            <returns>The converted value as an object</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.GetCsvNumericCulture(System.Collections.Generic.List{System.String[]})">
            <summary>
            Samples the X and Y field to check the decimal character to determine numeric culture of to use for parsing numeric numbers.
            There is an assumption that all numeric columns will have the same culture.
            </summary>
            <param name="csvData">Csv data</param>        
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SetStream(System.IO.Stream,System.Action{System.Collections.Generic.List{System.String[]}})">
            <summary>
            This will parse the Stream of CSV data and return a list of string arrays containing the parsed CSV data.
            </summary>
            <param name="stream">Stream of CSV data</param>
            <param name="callback">Callback that will return a list of string arrays of the parsed CSV data from the stream.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SetSource(System.IO.Stream)">
            <summary>
            Set stream is used to add graphics to the layer from a stream that contains CSV data.
            </summary>
            <param name="stream">Stream containing CSV data</param>
            <remarks>
            <para>
            Using the <b>SetSource</b> Method is an alternate way to create A CsvLayer using a 
            <a href="http://msdn.microsoft.com/en-us/library/system.io.stream(v=vs.100).aspx" target="_blank">Stream</a> 
            to get the data from a CSV file rather than using the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Url">Url</see> Property. 
            </para>
            <para>
            The CSV file format is tabular data in plain text. The data in the CSV file consists of fields of data separated 
            by a delimiting character (typically a comma) for a record. The first record in the CSV file is known as the 
            header and defines the names of each field of the tabular data. The second through last row of records in the 
            CSV file is the actual tabular data. When the delimiter (typically a comma) is embedded in the tabular data 
            for a particular field, that value should be encased in quotes to avoid parsing errors. Each record in the 
            CSV file should contain the same number of fields. Numerous applications including the Microsoft Excel Office 
            product can export and import CSV files. It is not required that a CSV source file contain the extension .csv; 
            the file can contain any extension (ex: .txt) or none at all.
            </para>
            
            <para>
            The bare minimum settings that need to be specified to create and display a CsvLayer in a Map are the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Url">Url</see> and 
            <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Renderer">Renderer</see> Properties (Url methadology) OR 
            the <b>SetSource</b> and 
            <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Renderer">Renderer</see> Properties (Stream methodology). 
            NOTE: This assumes that default spatial coordinate information field names are used and the delimiter for 
            the CSV file is a comma.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the Button to add a CsvLayer to the Map. The CsvLayer will be created using a local Resouce in the 
            Visual Studio project. The CsvLayer.SetSource Method is used to get the local Resource as a Stream.
            </para>
            <para>
            SPECIAL INSTRUCTIONS: The name of the sample Visual Studio project in this code example is "TestProject".
            Additionally a folder named "myFolder" was added to "TestProject". Place the "US_Cities_Top_5.csv" file in
            the "myFolder" location. Make sure that the for the Properties of the "US_Cities_Top_5.csv" file that the
            'Build Action' is set to 'Resource'.
            </para>
            <para>
            <img border="0" alt="Adding the US_Cities_Top_5.csv file as a Resource to the Visual Studio Proect named 'TestProject' in the 'myFolder' location." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ToolkitDataSources.CsvLayer.SetSource1.png"/>
            </para>
            <para>
            The following is an example of the ASCII contents for the file named US_Cities_Top_5.csv:<br/>
            ID,Lat,Long,CityName,Population<br/>
            1,40.714,-74.006,New York City,8244910<br/>
            2,34.0522,-118.244,Los Angeles,3819702<br/>
            3,41.878,-87.636,Chicago,2708120<br/>
            4,29.763,-95.363,Houston,2099451<br/>
            5,39.952,-75.168,Philadelphia,1526006<br/>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Adding a CsvLayer via the .SetSource Method to a Map." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ToolkitDataSources.CsvLayer.SetSource.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Define a SimpleRenderer with a SimpleMarkerSymbol as Resource that can be used in other locations of the project. --&gt;
              &lt;Grid.Resources&gt;
                &lt;esri:SimpleRenderer x:Key="renderer"&gt;
                  &lt;esri:SimpleRenderer.Symbol&gt;
                    &lt;esri:SimpleMarkerSymbol Color="Yellow" Size="20" Style="Circle" /&gt;
                  &lt;/esri:SimpleRenderer.Symbol&gt;
                &lt;/esri:SimpleRenderer&gt;
              &lt;/Grid.Resources&gt;
              
              &lt;!-- Add a Map Control to the application. Set the Extent to North America. --&gt;
              &lt;esri:Map x:Name="Map1" HorizontalAlignment="Left" VerticalAlignment="Top" 
                    Margin="0,212,0,0" Height="376" Width="415" Extent="-15219969,2609636,-6232883,6485365"&gt;
                
                &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer  ID="World_Topo_Map" 
                      Url="http://services.arcgisonline.com/arcgis/rest/services/world_topo_map/MapServer" /&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button that will allow the user to add a CsvLayer via code-behind. --&gt;
              &lt;Button Name="Button1" Height="23" HorizontalAlignment="Left" Margin="0,183,0,0"  VerticalAlignment="Top" 
                      Width="415" Content="Add a CsvLayer (via code-behind) for the specified Url."
                      Click="Button1_Click" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="174" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" 
                         TextWrapping="Wrap" Text="Click the Button to add a CsvLayer to the Map. The CsvLayer will be 
                         created using a local Resouce in the Visual Studio project. The CsvLayer.SetSource Method is
                         used to get the local Resource as a Stream." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              // Create a CsvLayer. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer();
              
              // Create a new Uri for the CSV file located on the hard drive. 
              // VERY IMPORTANT: 
              // Replace the first parameter argument of the Uri constructor with the correct string to the location of the CSV 
              // file relative to your test project. In this example the Visual Studio project name is: "TestProject".
              // Additionally, a folder was added to "TestProject" called "myFolder" and this is where the "US_Cities_Top_5.csv 
              // file is located. Finally, make sure that the for the Properties of the US_Cities_Top_5.csv file that the 
              // 'Build Action' is set to 'Resource'.
              Uri myUri = new Uri("/TestProject;component/myFolder/US_Cities_Top_5.csv", UriKind.RelativeOrAbsolute);
              
              // Create a StreamResourceInfo object using the static/Shared Application.GetResourceStream function.
              System.Windows.Resources.StreamResourceInfo myStreamResourceInfo = Application.GetResourceStream(myUri);
              
              // Use the StreamResourceInfo.Stream in the CsvLayer.SetSource Method 
              myCsvLayer.SetSource(myStreamResourceInfo.Stream);
              
              // Set the ID of the CsvLayer.
              myCsvLayer.ID = "US_Cities_Top_5";
              
              // Use the SimpleRenderer with a SimpleMarkerSymbol that was defined in XAML for the CsvLayer.Render Property.
              myCsvLayer.Renderer = (ESRI.ArcGIS.Client.IRenderer)LayoutRoot.Resources["renderer"];
              
              // Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer);
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              ' Create a CsvLayer. 
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer
              
              ' Create a new Uri for the CSV file located on the hard drive. 
              ' VERY IMPORTANT: 
              ' Replace the first parameter argument of the Uri constructor with the correct string to the location of the CSV 
              ' file relative to your test project. In this example the Visual Studio project name is: "TestProject".
              ' Additionally, a folder was added to "TestProject" called "myFolder" and this is where the "US_Cities_Top_5.csv 
              ' file is located. Finally, make sure that the for the Properties of the US_Cities_Top_5.csv file that the
              ' 'Build Action' is set to 'Resource'.
              Dim myUri As Uri = New Uri("/TestProject;component/myFolder/US_Cities_Top_5.csv", UriKind.RelativeOrAbsolute)
              
              ' Create a StreamResourceInfo object using the static/Shared Application.GetResourceStream function.
              Dim myStreamResourceInfo As Windows.Resources.StreamResourceInfo = Application.GetResourceStream(myUri)
              
              ' Use the StreamResourceInfo.Stream in the CsvLayer.SetSource Method 
              myCsvLayer.SetSource(myStreamResourceInfo.Stream)
              
              ' Set the ID of the CsvLayer.
              myCsvLayer.ID = "US_Cities_Top_5"
              
              ' Use the SimpleRenderer with a SimpleMarkerSymbol that was defined in XAML for the CsvLayer.Render Property.
              myCsvLayer.Renderer = LayoutRoot.Resources("renderer")
              
              ' Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer)
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Initialize">
            <summary>
            Initializes the layer.
            </summary>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceFields">
            <summary>
            The fields that will be added as attribute of the graphic. The FieldName should match the header name contained 
            inside the CSV file. The FieldType will be used to convert column into that specific data type. If FieldSource 
            is empty or null then all fields will be returned as attributes. If FieldType is not provided field type will 
            default to string.
            </summary>
            <remarks>
            <para>
            If it is not desired to convert all of the fields of information in the CSV records into a CsvLayer use the 
            <b>SourceFields</b> Property to set exactly which fields will become attributes in the CsvLayer. If the <b>SourceFields</b> 
            Property is not specified then all fields of information in the CSV file will be used to populate the attributes 
            in the CsvLayer. To restrict which fields are generated in the CsvLayer using the <b>SourceFields</b> Property, create 
            a new the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.FieldCollection">CsvLayer.FieldCollection</see> 
            object and add the specific <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> objects with the minimum Properties 
            of <see cref="P:ESRI.ArcGIS.Client.Field.FieldName">Field.FieldName</see> and 
            <see cref="P:ESRI.ArcGIS.Client.Field.Type">Field.Type</see> being set. The Field.FieldName should match the header 
            name contained inside the CSV file. If Field.Type is not provided field type will default to string.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the Button to add a CsvLayer to the Map. The ID of the layer and its attribute information will displayed 
            in the TextBox.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following is an example of the ASCII contents for the file named US_Cities_Top_3_ManyFields.csv:<br/>
            ID,Y,X,City,Useless,Population,Clueless,What,MyDate<br/>
            1,40.714,-74.006,NYC,XXX,8244910,QQQ,GGG,12/1/2012<br/>
            2,34.0522,-118.244,LA,YYY,3819702,AAA,TTT,12/2/2012<br/>
            3,41.878,-87.636,Chicago,ZZZ,2708120,ZZZ,UUU,12/3/2012<br/>
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Specifying which attributes fields to load into a CsvLayer using SourceFields." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ToolkitDataSources.CsvLayer.SourceFields.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map Control to the application. Set the Extent to North America. --&gt;
              &lt;esri:Map x:Name="Map1" HorizontalAlignment="Left" VerticalAlignment="Top" 
                    Margin="0,212,0,0" Height="376" Width="415" Extent="-15219969,2609636,-6232883,6485365"&gt;
              
                &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer  ID="World_Topo_Map" 
                      Url="http://services.arcgisonline.com/arcgis/rest/services/world_topo_map/MapServer" /&gt;
              
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button that will allow the user to add a CsvLayer via code-behind. --&gt;
              &lt;Button Name="Button1" Height="23" HorizontalAlignment="Left" Margin="0,183,0,0"  VerticalAlignment="Top" 
                      Width="706" Content="Add a CsvLayer (via code-behind) for the specified Url."
                      Click="Button1_Click" /&gt;
              
              &lt;!-- TextBox to display attribute information about about the CsvLayer added to the Map. --&gt;
              &lt;TextBox Height="376" HorizontalAlignment="Left" Margin="421,212,0,0" Name="TextBox1" VerticalAlignment="Top" 
                       Width="285" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="174" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" 
                         TextWrapping="Wrap" Text="Click the Button to add a CsvLayer to the Map. The ID of the layer and 
                         its attribute information will displayed in the TextBox." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              // Create a CsvLayer. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer();
              
              // Set the Url of the CsvLayer to a public service. 
              // NOTE: you need to adjust the Url to a .csv file served up on you test web server.
              myCsvLayer.Url = "http://www.yourserver.com/CSV_Files/US_Cities_Top_3_ManyFields.csv";
              
              // Set the ID of the CsvLayer.
              myCsvLayer.ID = "US_Cities_Top_3_ManyFields";
              
              // Create a FieldCollection object to define what Fields from the CSV file will be imported into the CsvLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.FieldCollection theSourceFields = null;
              theSourceFields = new ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.FieldCollection();
              
              // Define the Field objects that will be read in from the CSV file. 
              // NOTE: not all of the attribute fields that are in the CSV file will be converted to Fields in the CsvLayer.
              ESRI.ArcGIS.Client.Field theIDfield = new ESRI.ArcGIS.Client.Field();
              theIDfield.FieldName = "ID";
              theIDfield.Type = ESRI.ArcGIS.Client.Field.FieldType.OID;
              ESRI.ArcGIS.Client.Field theXfield = new ESRI.ArcGIS.Client.Field();
              theXfield.FieldName = "X";
              theXfield.Type = ESRI.ArcGIS.Client.Field.FieldType.Double;
              ESRI.ArcGIS.Client.Field theYfield = new ESRI.ArcGIS.Client.Field();
              theYfield.FieldName = "Y";
              theYfield.Type = ESRI.ArcGIS.Client.Field.FieldType.Double;
              ESRI.ArcGIS.Client.Field theCity = new ESRI.ArcGIS.Client.Field();
              theCity.FieldName = "City";
              theCity.Type = ESRI.ArcGIS.Client.Field.FieldType.String;
              ESRI.ArcGIS.Client.Field thePopulation = new ESRI.ArcGIS.Client.Field();
              thePopulation.FieldName = "Population";
              thePopulation.Type = ESRI.ArcGIS.Client.Field.FieldType.Integer;
              ESRI.ArcGIS.Client.Field theMyDate = new ESRI.ArcGIS.Client.Field();
              theMyDate.FieldName = "MyDate";
              theMyDate.Type = ESRI.ArcGIS.Client.Field.FieldType.Date;
              
              // Add the defined Fields into the FieldCollection object.
              theSourceFields.Add(theIDfield);
              theSourceFields.Add(theXfield);
              theSourceFields.Add(theYfield);
              theSourceFields.Add(theCity);
              theSourceFields.Add(thePopulation);
              theSourceFields.Add(theMyDate);
              
              // Set the custom FieldCollection to the CsvLayer.SourceFields Property.
              myCsvLayer.SourceFields = theSourceFields;
              
              // Create a SimpleMarkerSymbol (a red traingle) for the CsvLayer that will be added.
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol theSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              theSimpleMarkerSymbol.Color = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Red);
              theSimpleMarkerSymbol.Size = 18;
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle;
              
              // Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              ESRI.ArcGIS.Client.SimpleRenderer theSimpleRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol;
              
              // Define the Renderer for the CsvLayer.
              myCsvLayer.Renderer = theSimpleRenderer;
              
              // Wire-up the Initialized Event of the CsvLayer.
              myCsvLayer.Initialized += CsvLayer_Initialized;
              
              // Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer);
            }
            
            private void CsvLayer_Initialized(object sender, EventArgs e)
            {
              // This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              // Get the CsvLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)sender;
              
              // Get the ID of the CsvLayer.
              string myID = myCsvLayer.ID;
              
              // Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              System.Text.StringBuilder myStringBuilder = new System.Text.StringBuilder();
              myStringBuilder.Append("The CsvLayer and it's ID is: " + Environment.NewLine);
              myStringBuilder.Append(myID + Environment.NewLine);
              myStringBuilder.Append("====================================" + Environment.NewLine);
              
              // Get the GraphicCollection from the CsvLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicCollection = myCsvLayer.Graphics;
              if (theGraphicCollection != null)
              {
                // Loop through each Graphic.
                foreach (ESRI.ArcGIS.Client.Graphic oneGraphic in theGraphicCollection)
                {
                  // Get the Attribute Keys. 
                  System.Collections.Generic.ICollection&lt;string&gt; theFieldNameKeys = oneGraphic.Attributes.Keys;
                  
                  // Loop through each Attribute.
                  foreach (var oneKey in theFieldNameKeys)
                  {
                    // Get the value of the Attribute Field.
                    string theValue = oneGraphic.Attributes[oneKey].ToString();
                    
                    // Get the Type of the Attribute Field.
                    string oneFieldType = oneGraphic.Attributes[oneKey].GetType().ToString();
                    
                    // Add the Attribute Field name, OS data type, and Attribute value to the StringBuilder object.
                    myStringBuilder.Append(oneKey.ToString() + "(" + oneFieldType + "): " + theValue + Environment.NewLine);
                  }
                  myStringBuilder.Append(Environment.NewLine);
                }
              }
              
              // Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
            
              ' This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              ' Create a CsvLayer. 
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer
              
              ' Set the Url of the CsvLayer to a public service. 
              ' NOTE: you need to adjust the Url to a .csv file served up on you test web server.
              myCsvLayer.Url = "http://www.yourserver.com/CSV_Files/US_Cities_Top_3_ManyFields.csv"
              
              ' Set the ID of the CsvLayer.
              myCsvLayer.ID = "US_Cities_Top_3_ManyFields"
              
              ' Create a FieldCollection object to define what Fields from the CSV file will be imported into the CsvLayer.
              Dim theSourceFields As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.FieldCollection
              theSourceFields = New ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.FieldCollection
              
              ' Define the Field objects that will be read in from the CSV file. 
              ' NOTE: not all of the attribute fields that are in the CSV file will be converted to Fields in the CsvLayer.
              Dim theIDfield As ESRI.ArcGIS.Client.Field = New ESRI.ArcGIS.Client.Field
              theIDfield.FieldName = "ID"
              theIDfield.Type = ESRI.ArcGIS.Client.Field.FieldType.OID
              Dim theXfield As ESRI.ArcGIS.Client.Field = New ESRI.ArcGIS.Client.Field
              theXfield.FieldName = "X"
              theXfield.Type = ESRI.ArcGIS.Client.Field.FieldType.Double
              Dim theYfield As ESRI.ArcGIS.Client.Field = New ESRI.ArcGIS.Client.Field
              theYfield.FieldName = "Y"
              theYfield.Type = ESRI.ArcGIS.Client.Field.FieldType.Double
              Dim theCity As ESRI.ArcGIS.Client.Field = New ESRI.ArcGIS.Client.Field
              theCity.FieldName = "City"
              theCity.Type = ESRI.ArcGIS.Client.Field.FieldType.String
              Dim thePopulation As ESRI.ArcGIS.Client.Field = New ESRI.ArcGIS.Client.Field
              thePopulation.FieldName = "Population"
              thePopulation.Type = ESRI.ArcGIS.Client.Field.FieldType.Integer
              Dim theMyDate As ESRI.ArcGIS.Client.Field = New ESRI.ArcGIS.Client.Field
              theMyDate.FieldName = "MyDate"
              theMyDate.Type = ESRI.ArcGIS.Client.Field.FieldType.Date
              
              ' Add the defined Fields into the FieldCollection object.
              theSourceFields.Add(theIDfield)
              theSourceFields.Add(theXfield)
              theSourceFields.Add(theYfield)
              theSourceFields.Add(theCity)
              theSourceFields.Add(thePopulation)
              theSourceFields.Add(theMyDate)
              
              ' Set the custom FieldCollection to the CsvLayer.SourceFields Property.
              myCsvLayer.SourceFields = theSourceFields
              
              ' Create a SimpleMarkerSymbol (a red traingle) for the CsvLayer that will be added.
              Dim theSimpleMarkerSymbol As ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol = New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              theSimpleMarkerSymbol.Color = New System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Red)
              theSimpleMarkerSymbol.Size = 18
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle
              
              ' Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              Dim theSimpleRenderer As ESRI.ArcGIS.Client.SimpleRenderer = New ESRI.ArcGIS.Client.SimpleRenderer
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol
              
              ' Define the Renderer for the CsvLayer.
              myCsvLayer.Renderer = theSimpleRenderer
              
              ' Wire-up the Initialized Event of the CsvLayer.
              AddHandler myCsvLayer.Initialized, AddressOf CsvLayer_Initialized
              
              ' Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer)
              
            End Sub
            
            Private Sub CsvLayer_Initialized(sender As Object, e As EventArgs)
              
              ' This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              ' Get the CsvLayer.
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = CType(sender, ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)
              
              ' Get the ID of the CsvLayer.
              Dim myID As String = myCsvLayer.ID
              
              ' Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              Dim myStringBuilder As New Text.StringBuilder
              myStringBuilder.Append("The CsvLayer and it's ID is: " + vbCrLf)
              myStringBuilder.Append(myID + vbCrLf)
              myStringBuilder.Append("====================================" + vbCrLf)
              
              ' Get the GraphicCollection from the CsvLayer.
              Dim theGraphicCollection As ESRI.ArcGIS.Client.GraphicCollection = myCsvLayer.Graphics
              If theGraphicCollection IsNot Nothing Then
                
                ' Loop through each Graphic.
                For Each oneGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicCollection
                  
                  ' Get the Attribute Keys. 
                  Dim theFieldNameKeys As System.Collections.Generic.ICollection(Of String) = oneGraphic.Attributes.Keys
                  
                  ' Loop through each Attribute.
                  For Each oneKey In theFieldNameKeys
                    
                    ' Get the value of the Attribute Field.
                    Dim theValue As String = oneGraphic.Attributes(oneKey)
                    
                    ' Get the Type of the Attribute Field.
                    Dim oneFieldType As String = oneGraphic.Attributes(oneKey).GetType.ToString
                    
                    ' Add the Attribute Field name, OS data type, and Attribute value to the StringBuilder object.
                    myStringBuilder.Append(oneKey.ToString + "(" + oneFieldType + "): " + theValue + vbCrLf)
                    
                  Next
                  myStringBuilder.Append(vbCrLf)
                Next
                
              End If
              
              ' Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.XFieldName">
            <summary>
            The name of the column header in the CSV file that contains the data used for the X coordinate.
            </summary>
            <remarks>
            <para>
            In order to make use of CSV files in the 
            
            ArcGIS Runtime SDK for WPF
            
             there should be point based spatial locational coordinate information for each record. This spatial information 
             defines the <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see> that will be used to construct a 
             custom <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">GraphicsLayer</see>. Other geography types like Polyline or 
             Polygon are not supported for constructing a CsvLayer. Unless specified otherwise in the 
             <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceSpatialReference">SourceSpatialReference</see> 
             Property, it is assumed that the <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> 
             of the CsvLayer has a WKID value of 4326. During the parsing process of reading the header record of the CSV file 
             to construct the CsvLayer, any of the following names can be used to automatically detect the spatial location 
             coordinate information:
            </para>
            <list type="table">  
            <listheader><term>Coordinate Type</term><description>Automatically detected Field names</description></listheader>  
            <item><term>LATITUDE</term><description>"lat", "latitude", "y", "ycenter", "latitude83", "latdecdeg", "point-y"</description></item>
            <item><term>LONGITUDE</term><description>"lon", "lng", "long", "longitude", "x", "xcenter", "longitude83", "longdecdeg", "point-x"</description></item>
            </list>
            <para>
            NOTE: The CsvLayer parsing algorithm for the Field names listed in the table above is case insensitive. 
            </para>
            <para>
            If the above spatial location coordinate field names are not specified in the header record, then it will be 
            required to specify them explicitly. Use the <b>XFieldName</b> Property to explicitly specify the Longitude coordinate
            and the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.YFieldName">YFieldName</see> Property to 
            explicitly specify the Latitude coordinate.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the Button to add a CsvLayer to the Map. The ID of the layer and its attribute information will displayed 
            in the TextBox.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following is an example of the ASCII contents for the file named US_Cities_Top_3.csv:<br/>
            ID,MySuperY,MySuperX,CityNameStateAbbr,Population<br/>
            1,40.714,-74.006,"New York City, NY",8244910<br/>
            2,34.0522,-118.244,"Los Angeles, CA",3819702<br/>
            3,41.878,-87.636,"Chicago, IL",2708120<br/>
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Adding a CSV layer and displaying its attribute information." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ToolkitDataSources.CsvLayer.XFieldNameYFieldName.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map Control to the application. Set the Extent to North America. --&gt;
              &lt;esri:Map x:Name="Map1" HorizontalAlignment="Left" VerticalAlignment="Top" 
                    Margin="0,238,0,0" Height="350" Width="415" Extent="-15219969,2609636,-6232883,6485365"&gt;
                
                &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer  ID="World_Topo_Map" 
                      Url="http://services.arcgisonline.com/arcgis/rest/services/world_topo_map/MapServer" /&gt;
              
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button that will allow the user to add a CsvLayer via code-behind. --&gt;
              &lt;Button Name="Button1" Height="23" HorizontalAlignment="Left" Margin="0,209,0,0"  VerticalAlignment="Top" 
                      Width="706" Content="Add a CsvLayer (via code-behind) for the specified Url."
                      Click="Button1_Click" /&gt;
              
              &lt;!-- TextBox to display attribute information about about the CsvLayer added to the Map. --&gt;
              &lt;TextBox Height="350" HorizontalAlignment="Left" Margin="421,238,0,0" Name="TextBox1" VerticalAlignment="Top" 
                       Width="285" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="174" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" 
                         TextWrapping="Wrap" Text="Click the Button to add a CsvLayer to the Map. The ID of the layer and 
                         its attribute information will displayed in the TextBox." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              // Create a CsvLayer. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer();
              
              // Set the Url of the CsvLayer to a public service. 
              // NOTE: you need to adjust the Url to a .csv file served up on you test web server.
              myCsvLayer.Url = "http://www.yourserver.com/CSV_Files/US_Cities_Top_3.csv";
              
              // Set the ID of the CsvLayer.
              myCsvLayer.ID = "US_Cities_Top_3";
              
              // Set the XFieldName and YFieldName Properties. This CSV file does not use standard X &amp; Y field names.
              myCsvLayer.XFieldName = "MySuperX";
              myCsvLayer.YFieldName = "MySuperY";
              
              // Create a SimpleMarkerSymbol (a black square) for the CsvLayer that will be added.
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol theSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              theSimpleMarkerSymbol.Color = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Black);
              theSimpleMarkerSymbol.Size = 12;
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square;
              
              // Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              ESRI.ArcGIS.Client.SimpleRenderer theSimpleRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol;
              
              // Define the Renderer for the CsvLayer.
              myCsvLayer.Renderer = theSimpleRenderer;
              
              // Wire-up the Initialized Event of the CsvLayer. 
              myCsvLayer.Initialized += CsvLayer_Initialized;
              
              // Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer);
            }
            
            private void CsvLayer_Initialized(object sender, EventArgs e)
            {
              // This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              // Get the CsvLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)sender;
              
              // Get the ID of the CsvLayer.
              string myID = myCsvLayer.ID;
              
              // Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              System.Text.StringBuilder myStringBuilder = new System.Text.StringBuilder();
              myStringBuilder.Append("The CsvLayer and it's ID is: " + Environment.NewLine);
              myStringBuilder.Append(myID + Environment.NewLine);
              myStringBuilder.Append("====================================" + Environment.NewLine);
              
              // Get the GraphicCollection from the CsvLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicCollection = myCsvLayer.Graphics;
              if (theGraphicCollection != null)
              {
                // Loop through each Graphic.
                foreach (ESRI.ArcGIS.Client.Graphic oneGraphic in theGraphicCollection)
                {
                  // Get the Attribute Keys. 
                  System.Collections.Generic.ICollection&lt;string&gt; theFieldNameKeys = oneGraphic.Attributes.Keys;
                  
                  // Loop through each Attribute.
                  foreach (var oneKey in theFieldNameKeys)
                  {
                    // Get the value of the Attribute Field.
                    string theValue = (string)oneGraphic.Attributes[oneKey];
                    
                    // Add the Attribute Field name and Attribute value to the StringBuilder object.
                    myStringBuilder.Append(oneKey.ToString() + ": " + theValue + Environment.NewLine);
                  }
                }
              }
              
              // Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              ' Create a CsvLayer. 
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer
              
              ' Set the Url of the CsvLayer to a public service. 
              ' NOTE: you need to adjust the Url to a .csv file served up on you test web server.
              myCsvLayer.Url = "http://www.yourserver.com/CSV_Files/US_Cities_Top_3.csv"
              
              ' Set the ID of the CsvLayer.
              myCsvLayer.ID = "US_Cities_Top_3"
              
              ' Set the XFieldName and YFieldName Properties. This CSV file does not use standard X &amp; Y field names.
              myCsvLayer.XFieldName = "MySuperX"
              myCsvLayer.YFieldName = "MySuperY"
              
              ' Create a SimpleMarkerSymbol (a black square) for the CsvLayer that will be added.
              Dim theSimpleMarkerSymbol As ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol = New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              theSimpleMarkerSymbol.Color = New System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Black)
              theSimpleMarkerSymbol.Size = 12
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square
              
              ' Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              Dim theSimpleRenderer As ESRI.ArcGIS.Client.SimpleRenderer = New ESRI.ArcGIS.Client.SimpleRenderer
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol
              
              ' Define the Renderer for the CsvLayer.
              myCsvLayer.Renderer = theSimpleRenderer
              
              ' Wire-up the Initialized Event of the CsvLayer.
              AddHandler myCsvLayer.Initialized, AddressOf CsvLayer_Initialized
              
              ' Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer)
              
            End Sub
            
            Private Sub CsvLayer_Initialized(sender As Object, e As EventArgs)
              
              ' This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              ' Get the CsvLayer.
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = CType(sender, ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)
              
              ' Get the ID of the CsvLayer.
              Dim myID As String = myCsvLayer.ID
              
              ' Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              Dim myStringBuilder As New Text.StringBuilder
              myStringBuilder.Append("The CsvLayer and it's ID is: " + vbCrLf)
              myStringBuilder.Append(myID + vbCrLf)
              myStringBuilder.Append("====================================" + vbCrLf)
              
              ' Get the GraphicCollection from the CsvLayer.
              Dim theGraphicCollection As ESRI.ArcGIS.Client.GraphicCollection = myCsvLayer.Graphics
              If theGraphicCollection IsNot Nothing Then
                
                ' Loop through each Graphic.
                For Each oneGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicCollection
                  
                  ' Get the Attribute Keys. 
                  Dim theFieldNameKeys As System.Collections.Generic.ICollection(Of String) = oneGraphic.Attributes.Keys
                  
                  ' Loop through each Attribute.
                  For Each oneKey In theFieldNameKeys
                    
                    ' Get the value of the Attribute Field.
                    Dim theValue As String = oneGraphic.Attributes(oneKey)
                    
                    ' Add the Attribute Field name and Attribute value to the StringBuilder object.
                    myStringBuilder.Append(oneKey.ToString + ": " + theValue + vbCrLf)
                    
                  Next
                  
                Next
                
              End If
              
              ' Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.YFieldName">
            <summary>
            The name of the column header in the CSV file that contains the data used for the Y coordinate.
            </summary>
            <remarks>
            <para>
            In order to make use of CSV files in the 
            
            ArcGIS Runtime SDK for WPF
            
             there should be point based spatial locational coordinate information for each record. This spatial information 
             defines the <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see> that will be used to construct a 
             custom <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">GraphicsLayer</see>. Other geography types like Polyline or 
             Polygon are not supported for constructing a CsvLayer. Unless specified otherwise in the 
             <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceSpatialReference">SourceSpatialReference</see> 
             Property, it is assumed that the <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> 
             of the CsvLayer has a WKID value of 4326. During the parsing process of reading the header record of the CSV file 
             to construct the CsvLayer, any of the following names can be used to automatically detect the spatial location 
             coordinate information:
            </para>
            <list type="table">  
            <listheader><term>Coordinate Type</term><description>Automatically detected Field names</description></listheader>  
            <item><term>LATITUDE</term><description>"lat", "latitude", "y", "ycenter", "latitude83", "latdecdeg", "point-y"</description></item>
            <item><term>LONGITUDE</term><description>"lon", "lng", "long", "longitude", "x", "xcenter", "longitude83", "longdecdeg", "point-x"</description></item>
            </list>
            <para>
            NOTE: The CsvLayer parsing algorithm for the Field names listed in the table above is case insensitive. 
            </para>
            <para>
            If the above spatial location coordinate field names are not specified in the header record, then it will be 
            required to specify them explicitly. Use the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.XFieldName">XFieldName</see> Property to explicitly 
            specify the Longitude coordinate and the <b>YFieldName</b> Property to explicitly specify the Latitude coordinate.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the Button to add a CsvLayer to the Map. The ID of the layer and its attribute information will displayed 
            in the TextBox.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following is an example of the ASCII contents for the file named US_Cities_Top_3.csv:<br/>
            ID,MySuperY,MySuperX,CityNameStateAbbr,Population<br/>
            1,40.714,-74.006,"New York City, NY",8244910<br/>
            2,34.0522,-118.244,"Los Angeles, CA",3819702<br/>
            3,41.878,-87.636,"Chicago, IL",2708120<br/>
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Adding a CSV layer and displaying its attribute information." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ToolkitDataSources.CsvLayer.XFieldNameYFieldName.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map Control to the application. Set the Extent to North America. --&gt;
              &lt;esri:Map x:Name="Map1" HorizontalAlignment="Left" VerticalAlignment="Top" 
                    Margin="0,238,0,0" Height="350" Width="415" Extent="-15219969,2609636,-6232883,6485365"&gt;
                
                &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer  ID="World_Topo_Map" 
                      Url="http://services.arcgisonline.com/arcgis/rest/services/world_topo_map/MapServer" /&gt;
              
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button that will allow the user to add a CsvLayer via code-behind. --&gt;
              &lt;Button Name="Button1" Height="23" HorizontalAlignment="Left" Margin="0,209,0,0"  VerticalAlignment="Top" 
                      Width="706" Content="Add a CsvLayer (via code-behind) for the specified Url."
                      Click="Button1_Click" /&gt;
              
              &lt;!-- TextBox to display attribute information about about the CsvLayer added to the Map. --&gt;
              &lt;TextBox Height="350" HorizontalAlignment="Left" Margin="421,238,0,0" Name="TextBox1" VerticalAlignment="Top" 
                       Width="285" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="174" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" 
                         TextWrapping="Wrap" Text="Click the Button to add a CsvLayer to the Map. The ID of the layer and 
                         its attribute information will displayed in the TextBox." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              // Create a CsvLayer. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer();
              
              // Set the Url of the CsvLayer to a public service. 
              // NOTE: you need to adjust the Url to a .csv file served up on you test web server.
              myCsvLayer.Url = "http://www.yourserver.com/CSV_Files/US_Cities_Top_3.csv";
              
              // Set the ID of the CsvLayer.
              myCsvLayer.ID = "US_Cities_Top_3";
              
              // Set the XFieldName and YFieldName Properties. This CSV file does not use standard X &amp; Y field names.
              myCsvLayer.XFieldName = "MySuperX";
              myCsvLayer.YFieldName = "MySuperY";
              
              // Create a SimpleMarkerSymbol (a black square) for the CsvLayer that will be added.
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol theSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              theSimpleMarkerSymbol.Color = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Black);
              theSimpleMarkerSymbol.Size = 12;
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square;
              
              // Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              ESRI.ArcGIS.Client.SimpleRenderer theSimpleRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol;
              
              // Define the Renderer for the CsvLayer.
              myCsvLayer.Renderer = theSimpleRenderer;
              
              // Wire-up the Initialized Event of the CsvLayer. 
              myCsvLayer.Initialized += CsvLayer_Initialized;
              
              // Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer);
            }
            
            private void CsvLayer_Initialized(object sender, EventArgs e)
            {
              // This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              // Get the CsvLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)sender;
              
              // Get the ID of the CsvLayer.
              string myID = myCsvLayer.ID;
              
              // Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              System.Text.StringBuilder myStringBuilder = new System.Text.StringBuilder();
              myStringBuilder.Append("The CsvLayer and it's ID is: " + Environment.NewLine);
              myStringBuilder.Append(myID + Environment.NewLine);
              myStringBuilder.Append("====================================" + Environment.NewLine);
              
              // Get the GraphicCollection from the CsvLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicCollection = myCsvLayer.Graphics;
              if (theGraphicCollection != null)
              {
                // Loop through each Graphic.
                foreach (ESRI.ArcGIS.Client.Graphic oneGraphic in theGraphicCollection)
                {
                  // Get the Attribute Keys. 
                  System.Collections.Generic.ICollection&lt;string&gt; theFieldNameKeys = oneGraphic.Attributes.Keys;
                  
                  // Loop through each Attribute.
                  foreach (var oneKey in theFieldNameKeys)
                  {
                    // Get the value of the Attribute Field.
                    string theValue = (string)oneGraphic.Attributes[oneKey];
                    
                    // Add the Attribute Field name and Attribute value to the StringBuilder object.
                    myStringBuilder.Append(oneKey.ToString() + ": " + theValue + Environment.NewLine);
                  }
                }
              }
              
              // Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              ' Create a CsvLayer. 
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer
              
              ' Set the Url of the CsvLayer to a public service. 
              ' NOTE: you need to adjust the Url to a .csv file served up on you test web server.
              myCsvLayer.Url = "http://www.yourserver.com/CSV_Files/US_Cities_Top_3.csv"
              
              ' Set the ID of the CsvLayer.
              myCsvLayer.ID = "US_Cities_Top_3"
              
              ' Set the XFieldName and YFieldName Properties. This CSV file does not use standard X &amp; Y field names.
              myCsvLayer.XFieldName = "MySuperX"
              myCsvLayer.YFieldName = "MySuperY"
              
              ' Create a SimpleMarkerSymbol (a black square) for the CsvLayer that will be added.
              Dim theSimpleMarkerSymbol As ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol = New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              theSimpleMarkerSymbol.Color = New System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Black)
              theSimpleMarkerSymbol.Size = 12
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square
              
              ' Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              Dim theSimpleRenderer As ESRI.ArcGIS.Client.SimpleRenderer = New ESRI.ArcGIS.Client.SimpleRenderer
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol
              
              ' Define the Renderer for the CsvLayer.
              myCsvLayer.Renderer = theSimpleRenderer
              
              ' Wire-up the Initialized Event of the CsvLayer.
              AddHandler myCsvLayer.Initialized, AddressOf CsvLayer_Initialized
              
              ' Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer)
              
            End Sub
            
            Private Sub CsvLayer_Initialized(sender As Object, e As EventArgs)
              
              ' This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              ' Get the CsvLayer.
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = CType(sender, ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)
              
              ' Get the ID of the CsvLayer.
              Dim myID As String = myCsvLayer.ID
              
              ' Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              Dim myStringBuilder As New Text.StringBuilder
              myStringBuilder.Append("The CsvLayer and it's ID is: " + vbCrLf)
              myStringBuilder.Append(myID + vbCrLf)
              myStringBuilder.Append("====================================" + vbCrLf)
              
              ' Get the GraphicCollection from the CsvLayer.
              Dim theGraphicCollection As ESRI.ArcGIS.Client.GraphicCollection = myCsvLayer.Graphics
              If theGraphicCollection IsNot Nothing Then
                
                ' Loop through each Graphic.
                For Each oneGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicCollection
                  
                  ' Get the Attribute Keys. 
                  Dim theFieldNameKeys As System.Collections.Generic.ICollection(Of String) = oneGraphic.Attributes.Keys
                  
                  ' Loop through each Attribute.
                  For Each oneKey In theFieldNameKeys
                    
                    ' Get the value of the Attribute Field.
                    Dim theValue As String = oneGraphic.Attributes(oneKey)
                    
                    ' Add the Attribute Field name and Attribute value to the StringBuilder object.
                    myStringBuilder.Append(oneKey.ToString + ": " + theValue + vbCrLf)
                    
                  Next
                  
                Next
                
              End If
              
              ' Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.ColumnDelimiter">
            <summary>
            The column delimiter used to split the columns of the CSV file. The default value is comma.
            </summary>
            <remarks>
            <para>
            By default it is assumed that the delimiter for the CSV file in parsing data values for between fields is the 
            comma (,). If another delimiter is used (for example a tab or dash) it is required to specify the ColumnDelimiter
            Property. If the comma is used as the delimiter in the CSV file the <b>ColumnDelimiter</b> Property does not need to 
            be set.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Url">
            <summary>
            Url location to CSV file.
            </summary>
            <remarks>
            <para>
            The CSV file format is tabular data in plain text. The data in the CSV file consists of fields of data separated 
            by a delimiting character (typically a comma) for a record. The first record in the CSV file is known as the 
            header and defines the names of each field of the tabular data. The second through last row of records in the 
            CSV file is the actual tabular data. When the delimiter (typically a comma) is embedded in the tabular data 
            for a particular field, that value should be encased in quotes to avoid parsing errors. Each record in the 
            CSV file should contain the same number of fields. Numerous applications including the Microsoft Excel Office 
            product can export and import CSV files. It is not required that a CSV source file contain the extension .csv; 
            the file can contain any extension (ex: .txt) or none at all.
            </para>
            <para>
            If it is desired to obtain the CSV data from a 
            <a href="http://msdn.microsoft.com/en-us/library/system.io.stream(v=vs.100).aspx" target="_blank">Stream</a> 
            rather than the <b>Url</b> Property use the <see cref="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SetSource(System.IO.Stream)">SetSource</see> 
            Method.
            </para>
            
            <para>
            The bare minimum settings that need to be specified to create and display a CsvLayer in a Map are the 
            <b>Url</b> and <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Renderer">Renderer</see> Properties (Url methadology) OR 
            the <see cref="M:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SetSource(System.IO.Stream)">SetSource</see> and 
            <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Renderer">Renderer</see> Properties (Stream methodology). 
            NOTE: This assumes that default spatial coordinate information field names are used and the delimiter for 
            the CSV file is a comma.
            </para>
            <para>
            There are several methods to construct a Url for accessing data in a CSV layer. The example code in the 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer">CsvLayer</see> Class documentation shows how to access 
            a CSV file via on a web server and uses the 'http://' keyword to construct a Url. The example code in the 
            <b>CsvLayer.Url</b> Property documentation shows 
            how to access a CSV file as a resource on the local disk in a Visual Studio project using the 
            '[Visual_Studio_Project_Name]' and the 'component' keywords. Even more options are available such as constructing 
            a Url using the 'file://' or 'pack://' keywords. The development platform you are coding in will determine which 
            style of Url is appropriate. See the documentation for your particular development platform to decide which type 
            of string can be used in the the Url construction.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            When the application loads a CsvLayer will automatically be added to the Map (it was specified in XAML). 
            Click the Button to add another CsvLayer to the Map (it will be added via code-behind). The ID of each 
            layer will displayed in the TextBox. NOTE: the CSV files are accessed via Resource files on disk in the 
            Visual Studio project rather that an http:// web service.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            SPECIAL INSTRUCTIONS: The name of the sample Visual Studio project in this code example is "TestProject".
            Additionally a folder named "myFolder" was added to "TestProject". Place the "US_Cities_Top_5.csv" and 
            the "US_Cities_6_to_10.csv" files in the "myFolder" location. Make sure that the for the Properties of the 
            "US_Cities_Top_5.csv" and "US_Cities_6_to_10.csv" files that the 'Build Action' is set to 'Resource'.
            </para>
            <para>
            <img border="0" alt="Adding the US_Cities_Top_5.csv and US_Cities_6_to_10.csv files as a Resources to the Visual Studio Proect named 'TestProject' in the 'myFolder' location." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ToolkitDataSources.CsvLayer.Url1.png"/>
            </para>
            <para>
            The following is an example of the ASCII contents for the file named US_Cities_Top_5.csv:<br/>
            ID,Lat,Long,CityName,Population<br/>
            1,40.714,-74.006,New York City,8244910<br/>
            2,34.0522,-118.244,Los Angeles,3819702<br/>
            3,41.878,-87.636,Chicago,2708120<br/>
            4,29.763,-95.363,Houston,2099451<br/>
            5,39.952,-75.168,Philadelphia,1526006<br/>
            </para>
            <para>
            The following is an example of the ASCII contents for the file named US_Cities_6_to_10.csv:<br/>
            ID,Lat,Long,CityName,Population<br/>
            6,29.423,-98.493,San Antonio,1327407<br/>
            7,32.715,-117.156,San Diego,1326179<br/>
            8,32.782,-96.815,Dallas,1223229<br/>
            9,37.228,-119.228,San Jose,945942<br/>
            10,30.331,-81.655,Jacksonville,821784<br/>
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Adding a CsvLayer in XAML and code-behind when the CSV files are resources in the Visual Studio project." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ToolkitDataSources.CsvLayer.Url.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add local Resources to define a SimpleRender to display aqua diamonds as a SimpleMarkerSymbol 
              for the CsvLayer. --&gt;
              &lt;Grid.Resources&gt;
                &lt;esri:SimpleRenderer x:Key="myRenderer"&gt;
                  &lt;esri:SimpleRenderer.Symbol&gt;
                    &lt;esri:SimpleMarkerSymbol Color="Red" Size="12" Style="Circle" /&gt;
                  &lt;/esri:SimpleRenderer.Symbol&gt;
                &lt;/esri:SimpleRenderer&gt;
              &lt;/Grid.Resources&gt;
              
              &lt;!-- Add a Map Control to the application. Set the Extent to North America. --&gt;
              &lt;esri:Map x:Name="Map1" HorizontalAlignment="Left" VerticalAlignment="Top" 
                    Margin="0,238,0,0" Height="350" Width="415" Extent="-15219969,2609636,-6232883,6485365"&gt;
              
                &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer  ID="World_Topo_Map" 
                      Url="http://services.arcgisonline.com/arcgis/rest/services/world_topo_map/MapServer" /&gt;
                
                &lt;!-- Add a CsvLayer. The renderer symbology will be based upon the local static resource defined above.
                     VERY IMPORTANT: 
                     Replace the first parameter argument of the Url with the correct string to the location of the CSV 
                     file relative to your test project. In this example the Visual Studio project name is: "TestProject".
                     Additionally, a folder was added to "TestProject" called "myFolder" and this is where the 
                     US_Cities_Top_5.csv file is located. Finally, make sure that the for the Properties of the 
                     US_Cities_Top_5.csv file that the 'Build Action' is set to 'Resource'.
                --&gt;
                &lt;esri:CsvLayer ID="US_Cities_Top_5" Url="/TestProject;component/myFolder/US_Cities_Top_5.csv"
                      Renderer="{StaticResource myRenderer}" Initialized="CsvLayer_Initialized"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button that will allow the user to add another CsvLayer via code-behind. --&gt;
              &lt;Button Name="Button1" Height="23" HorizontalAlignment="Left" Margin="0,209,0,0"  VerticalAlignment="Top" 
                      Width="706" Content="Add another CsvLayer (via code-behind) for the specified Url."
                      Click="Button1_Click" /&gt;
              
              &lt;!-- TextBox to display information about about the CsvLayerLayers added to the Map. --&gt;
              &lt;TextBox Height="350" HorizontalAlignment="Left" Margin="421,238,0,0" Name="TextBox1" VerticalAlignment="Top" 
                       Width="285" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="174" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" 
                         TextWrapping="Wrap" Text="When the application loads a CsvLayer will automatically be added 
                         to the Map (it was specified in XAML). Click the Button to add another CsvLayer to the Map 
                         (it will be added via code-behind). The ID of each layer will displayed in the TextBox. 
                         NOTE: the CSV files are accessed via Resource files on disk in the Visual Studio project 
                         rather that an http:// web service." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void CsvLayer_Initialized(object sender, System.EventArgs e)
            {
              // This function will execute as a result of the CsvLayer that was defined in XAML being Initialized.
              
              // Get the CsvLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)sender;
              
              // Get the ID of the CsvLayer.
              string myID = myCsvLayer.ID;
              
              // Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              System.Text.StringBuilder myStringBuilder = new System.Text.StringBuilder();
              myStringBuilder.Append("The 1st CsvLayer was" + Environment.NewLine);
              myStringBuilder.Append("added via XAML and it's ID is: " + Environment.NewLine);
              myStringBuilder.Append(myID);
              
              // Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString();
            }
            
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              // Create a CsvLayer. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer2 = new ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer();
              
              // Set the Url of the CsvLayer to a public service. 
              // VERY IMPORTANT: 
              // Replace the first parameter argument of the Url with the correct string to the location of the CSV 
              // file relative to your test project. In this example the Visual Studio project name is: "TestProject".
              // Additionally, a folder was added to "TestProject" called "myFolder" and this is where the US_Cities_6_to_10.csv 
              // file is located. Finally, make sure that the for the Properties of the US_Cities_6_to_10.csv file that the 
              // 'Build Action' is set to 'Resource'.
              myCsvLayer2.Url = "/TestProject;component/myFolder/US_Cities_6_to_10.csv";
              
              // Set the ID of the CsvLayer.
              myCsvLayer2.ID = "US_Cities_6_to_10";
              
              // Create a SimpleMarkerSymbol (a purple diamond) for the CsvLayer that will be added.
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol theSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              theSimpleMarkerSymbol.Color = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Purple);
              theSimpleMarkerSymbol.Size = 12;
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Diamond;
              
              // Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              ESRI.ArcGIS.Client.SimpleRenderer theSimpleRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol;
              
              // Define the Renderer for the CsvLayer.
              myCsvLayer2.Renderer = theSimpleRenderer;
              
              // Wire-up the Initialized Event of the CsvLayer. Note how a different Initilized Event is being used verses 
              // the one defined in XAML. They could share the same Initialized Event but we created two seperate ones 
              // for demonstration purposes.
              myCsvLayer2.Initialized += CsvLayer_Initialized2;
              
              // Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer2);
            }
            
            private void CsvLayer_Initialized2(object sender, EventArgs e)
            {
              // This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              // Get the CsvLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer myCsvLayer2 = (ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)sender;
              
              // Get the ID of the CsvLayer.
              string myID2 = myCsvLayer2.ID;
              
              // Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              System.Text.StringBuilder myStringBuilder = new System.Text.StringBuilder();
              myStringBuilder.Append(TextBox1.Text + Environment.NewLine);
              myStringBuilder.Append(Environment.NewLine);
              myStringBuilder.Append("The 2nd CsvLayer was" + Environment.NewLine);
              myStringBuilder.Append("added via code-behind and it's ID is: " + Environment.NewLine);
              myStringBuilder.Append(myID2);
              
              // Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub CsvLayer_Initialized(sender As System.Object, e As System.EventArgs)
              
              ' This function will execute as a result of the CsvLayer that was defined in XAML being Initialized.
              
              ' Get the CsvLayer.
              Dim myCsvLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = CType(sender, ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)
              
              ' Get the ID of the CsvLayer.
              Dim myID As String = myCsvLayer.ID
              
              ' Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              Dim myStringBuilder As New Text.StringBuilder
              myStringBuilder.Append("The 1st CsvLayer was" + vbCrLf)
              myStringBuilder.Append("added via XAML and it's ID is: " + vbCrLf)
              myStringBuilder.Append(myID)
              
              ' Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString
              
            End Sub
            
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' This function executes as a result of the user clicking the Button. It adds a CsvLayer using code-behind.
              
              ' Create a CsvLayer. 
              Dim myCsvLayer2 As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer
              
              ' Set the Url of the CsvLayer to a public service. 
              ' VERY IMPORTANT: 
              ' Replace the first parameter argument of the Url with the correct string to the location of the CSV 
              ' file relative to your test project. In this example the Visual Studio project name is: "TestProject".
              ' Additionally, a folder was added to "TestProject" called "myFolder" and this is where the US_Cities_6_to_10.csv 
              ' file is located. Finally, make sure that the for the Properties of the US_Cities_6_to_10.csv file that the 
              ' 'Build Action' is set to 'Resource'.
              myCsvLayer2.Url = "/TestProject;component/myFolder/US_Cities_6_to_10.csv"
              
              ' Set the ID of the CsvLayer.
              myCsvLayer2.ID = "US_Cities_6_to_10"
              
              ' Create a SimpleMarkerSymbol (a purple diamond) for the CsvLayer that will be added.
              Dim theSimpleMarkerSymbol As ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol = New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              theSimpleMarkerSymbol.Color = New System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green)
              theSimpleMarkerSymbol.Size = 12
              theSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle
              
              ' Define a SimpleRenderer and set the Symbol to the SimpleMarkerSymbol.
              Dim theSimpleRenderer As ESRI.ArcGIS.Client.SimpleRenderer = New ESRI.ArcGIS.Client.SimpleRenderer
              theSimpleRenderer.Symbol = theSimpleMarkerSymbol
              
              ' Define the Renderer for the CsvLayer.
              myCsvLayer2.Renderer = theSimpleRenderer
              
              ' Wire-up the Initialized Event of the CsvLayer. Note how a different Initilized Event is being used verses 
              ' the one defined in XAML. They could share the same Initialized Event but we created two seperate ones 
              ' for demonstration purposes.
              AddHandler myCsvLayer2.Initialized, AddressOf CsvLayer_Initialized2
              
              ' Add the CsvLayer to the Map.
              Map1.Layers.Add(myCsvLayer2)
              
            End Sub
            
            Private Sub CsvLayer_Initialized2(sender As Object, e As EventArgs)
              
              ' This function will execute as a result of the CsvLayer that was defined in code-behind being Initialized.
              
              ' Get the CsvLayer.
              Dim myCsvLayer2 As ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer = CType(sender, ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer)
              
              ' Get the ID of the CsvLayer.
              Dim myID2 As String = myCsvLayer2.ID
              
              ' Create a StringBuilder object to hold information about the CsvLayer and add some useful information to it.
              Dim myStringBuilder As New Text.StringBuilder
              myStringBuilder.Append(TextBox1.Text + vbCrLf)
              myStringBuilder.Append(vbCrLf)
              myStringBuilder.Append("The 2nd CsvLayer was" + vbCrLf)
              myStringBuilder.Append("added via code-behind and it's ID is: " + vbCrLf)
              myStringBuilder.Append(myID2)
              
              ' Display the results of the StringBuilder text to the user.
              TextBox1.Text = myStringBuilder.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.SourceSpatialReference">
            <summary>
            The spatial reference of the CSV data.
            </summary>
            <remarks>
            <para>
            Unless specified otherwise in the <b>SouceSpatialReference</b> Property, it is assumed that the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> of the CsvLayer 
            has a WKID value of 4326.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.Credentials">
            <summary>
            Gets or sets the network credentials that are sent to the host and used to authenticate the request.
            </summary>
            <value>The credentials used for authentication.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.ClientCertificate">
            <summary>
            Gets or sets the client certificate that is sent to the host and used to authenticate the request.
            </summary>
            <value>The client certificate used for authentication.</value>
            <remarks>
            <para>
            A client certificate is an electronic document which uses a digital signature to bind a public key with an identity. 
            A client certificate is used to verify that a public key belongs to an individual or an organization. When a client 
            certificate is valid, access to secured content over the https:// is enabled. Client certificates fall under the 
            technology umbrella known as a Public-Key Infrastructure (PKI). PKI is a large complex body of standards, policies, 
            protocols, and practices that are beyond the scope this documentation. The following Microsoft document should give 
            the developer a starting point to understand PKI: 
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb427432(v=vs.85).aspx" target="_blank">Public Key Infrastructure</a>.
            </para>
            <para>
            ArcGIS Server version 10.1 and higher has the ability to leverage PKI solutions in 'Commercial Off the Shelf' (COTS) Web servers 
            such as: Microsoft Internet Information Server (IIS), Oracle WebLogic, IBM WebSphere, etc. through the use of the 
            ArcGIS Web Adaptor. The requirements for using PKI in ArcGIS Server include:
            </para>
            <list type="number">
              <item>The ArcGIS Web Adaptor must be setup as the gateway to ArcGIS Server.</item>
              <item>The Web Server hosting the ArcGIS Web Adaptor must be configured to require client certificates for user authentication.</item>
              <item>ArcGIS Server Site must be configured to: (a)	Delegate user authentication to the Web Tier and (b) Use an identity store (LDAP, Windows Active Directory, etc.) supported by the Web Server.</item>
            </list>
            <para>
            When a request is made for a resource on ArcGIS Server, the Web Server will authenticate the user by validating the 
            client certificate provided. The request (along with the user name) is then forwarded to ArcGIS Server via the Web 
            Adaptor. ArcGIS Server will verify that the specified user has access to the requested resource before sending back 
            the appropriate response. For more information on using PKI techniques to set up and use client certificates, see 
            the ArcGIS Server documentation.
            </para>
            <para>
            The ArcGIS Runtime for WPF requires supplying a valid 
            <a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;l=EN-US&amp;k=k(System.Security.Cryptography.X509Certificates.X509Certificate)&amp;rd=true" target="_blank">Microsoft System.Security.Cryptography.X509Certificates.X509Certificate</a> 
            object as the .ClientCertificate Property in order to gain access to a secured (https://) ArcGIS Server web service 
            based upon PKI. The Microsoft 
            <a href="http://msdn.microsoft.com/en-us/library/ztkw6e67" target="_blank">System.Security.Cryptography.X509Certificates Namespace</a> 
            API documentation provides a starting point for developers to learn how to programmatically access X509Certificate objects. 
            If no client certificates have been set up on a client machine and a user tries to access using an X509Certificate from 
            your custom ArcGIS WPF application, a Windows Security dialog stating "No certificate available. No certificates meet the 
            application. Click OK to continue" will appear:
            </para>
            <para>
            <img border="0" alt="Try to access an X509Certificate when none are installed on the client computer." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.NoPKI_CertificateAvailable.png"/>
            </para>
            <para>
            Whenever an ArcGIS Runtime for WPF based application uses PKI to secure web services, it is important that error checking 
            be added to the application to ensure that the correct X509Certificate is used to access those secured web services. If 
            a user of your ArcGIS WPF client application provides/uses an X509Certificate that is not accepted by the PKI security 
            set up on the ArcGIS Server machine, then an error will be thrown. The following are a couple of different error messages 
            that could occur:
            </para>
            <para>
            "Error initializing layer: The remote server returned an error: (403) Forbidden.":
            </para>
            <para>
            <img border="0" alt="Using an incorrect X509Certificate for the .ClientProperty return 403 Forbidden error." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.403ForbiddenAccessDenied.png"/>
            </para>
            <para>
            "Error initializing layer: The remote server returned an error: (401) Unauthorized.":
            </para>
            <para>
            <img border="0" alt="Using an incorrect X509Certificate for the .ClientProperty return 401 Unauthorized error." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.401Unauthorized.png"/>
            </para>
            <para>
            Depending on the particular ArcGIS Runtime for WPF object that is used, the developer will need to write code in the 
            appropriate error handling event. For example: an ArcGISDynmaicMapServiceLayer should have error trapping code in 
            the InitializationFailed Event; a QueryTask should have error trapping code in the Failed Event, a PrintTask should 
            have error trapping code in the ExecuteCompleted Event (via the PrintEventArgs), etc.
            </para>
            <para>
            The .ClientCertificate Property has been added to numerous ArcGIS Runtime for WPF objects. Accessing and using an 
            X509Certificate is basically the same for each of the ArcGIS Runtime for WPF objects with  a .ClientCertificate 
            Property. There are code examples of using the X509Certificate in the 
            <see cref="P:ESRI.ArcGIS.Client.DynamicMapServiceLayer.ClientCertificate">DynamicMapServiceLayer.ClientCertificate</see> 
            Property, 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.ClientCertificate">ArcGISTiledMapServiceLayer.ClientCertificate</see> 
            Property, 
            <see cref="M:ESRI.ArcGIS.Client.Printing.PrintTask.ClientCertificate">Printing.PrintTask.ClientCertificate</see> 
            Property (code-behind only options) and 
            <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.ClientCertificate">FeatureLayer.ClientCertificate</see> Property 
            (Model-View-View-Model (MVVM) pattern using XAML and code-behind). Remember the key to accessing a PKI based 
            secured ArcGIS Server web service is to first provide the appropriate .ClientCertificate Property credentials 
            during construction of the object and prior to using (i.e Set/Write) any of the other properties/methods of 
            the ArcGIS Runtime for WPF object, otherwise an error accessing that object will result.
            </para>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.CsvLayer.FieldCollection">
            <summary>
            Holds a collection of <see cref="T:ESRI.ArcGIS.Client.Field"/>.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer">
            <summary>
            GeoRSS Layer.
            </summary>
            <remarks>
            <para>
            Only <a href="http://www.georss.org/simple">GeoRSS-simple</a> feeds are supported.
            Geometries are returned in Geographic WGS84. If you are displaying the feed
            on top of a map in a different projection, they must be reprojected manually 
            when the graphics collection gets features added.
            </para>
            <para>
            The graphic will not have a symbol associated with them. You should specify
            a renderer on this layer, or manually assign symbols to the graphics when
            the graphics collection gets features added.
            </para>
            <para>
            Recent earthquake's greater than M2.5 with map tips:<br/>
            <code Lang="XAML">
            &lt;esri:GeoRssLayer Source="http://earthquake.usgs.gov/earthquakes/catalogs/1day-M2.5.xml" &gt;
              &lt;esri:GeoRssLayer.Renderer&gt;
                &lt;esri:SimpleRenderer Brush="Red" /&gt;
              &lt;/esri:GeoRssLayer.Renderer&gt;
              &lt;esri:GeoRssLayer.MapTip&gt;
                &lt;Border Padding="5" Background="White" esri:GraphicsLayer.MapTipHideDelay="0:0:0.5"&gt;
                  &lt;StackPanel&gt;
                    &lt;TextBlock Text="{Binding [Title]}" FontWeight="Bold" FontSize="12" /&gt;
                    &lt;TextBlock Text="{Binding [Summary]}" FontSize="10" /&gt;
                    &lt;HyperlinkButton Content="Link" NavigateUri="{Binding [Link]}" Opacity=".5" FontSize="10" TargetName="_blank" /&gt;
                  &lt;/StackPanel&gt;
                &lt;/Border&gt;
              &lt;/esri:GeoRssLayer.MapTip&gt;
            &lt;/esri:GeoRssLayer&gt;
            </code>
            </para>
            <para>
            If you require a proxy, simply prefix the layer URI with a proxy prefix:<br/>
            <code Lang="XAML">
            &lt;esri:GeoRssLayer Source="../proxy.ashx?url=http://earthquake.usgs.gov/earthquakes/catalogs/1day-M2.5.xml" /&gt;
            </code>
            </para>
            <para>
            The following attributes will be associated with each graphic:
            </para>
            <list type="bullet">
            	<item>Title (<see cref="T:System.String"/>)</item>
            	<item>Summary (<see cref="T:System.String"/>)</item> 
            	<item>PublishDate (<see cref="T:System.DateTime"/>)</item>
            	<item>Id (<see cref="T:System.String"/>)</item>
            	<item>Link (<see cref="T:System.Uri"/>)</item>
            	<item>FeedItem (<see cref="T:System.ServiceModel.Syndication.SyndicationItem"/>)</item>
            </list>
            <para>
            Optionally, if the item is using any of the simple-georss extensions,
            these will also be included:
            </para>
            <list type="bullet">
            	<item>elev (<see cref="T:System.Double"/>)</item>
            	<item>floor (<see cref="T:System.Int32"/>)</item>
            	<item>radius (<see cref="T:System.Double"/>)</item>
            	<item>featuretypetag (<see cref="T:System.String"/>)</item> 
            	<item>relationshiptag (<see cref="T:System.String"/>)</item>
            	<item>featurename (<see cref="T:System.String"/>)</item>
            </list>
            <para>
            The Graphic's <see cref="P:ESRI.ArcGIS.Client.Graphic.TimeExtent"/> property 
            will be set to a time instance matching the PublishDate.
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.Initialize">
            <summary>
            Initializes the resource.
            </summary>
            <remarks>
            	<para>Override this method if your resource requires asyncronous requests to initialize,
            and call the base method when initialization is completed.</para>
            	<para>Upon completion of initialization, check the <see cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/> for any possible errors.</para>
            </remarks>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.OnGraphicsSourceChanged(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Called when the GraphicsSource property changes.
            </summary>
            <param name="oldValue">Old value of the GraphicsSource property.</param>
            <param name="newValue">New value of the GraphicsSource property.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsSource"/>property is changed on a <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer"/>.</exception>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.ClientCertificateProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.ClientCertificate"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.CredentialsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.Credentials"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.SourceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.Source"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.Update">
            <summary>
            Reloads the RSS feed from the endpoint.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.ClientCertificate">
            <summary>
            Gets or sets the client certificate that is sent to the host and used to authenticate the request.
            </summary>
            <value>The client certificate used for authentication.</value>
            <remarks>
            <para>
            A client certificate is an electronic document which uses a digital signature to bind a public key with an identity. 
            A client certificate is used to verify that a public key belongs to an individual or an organization. When a client 
            certificate is valid, access to secured content over the https:// is enabled. Client certificates fall under the 
            technology umbrella known as a Public-Key Infrastructure (PKI). PKI is a large complex body of standards, policies, 
            protocols, and practices that are beyond the scope this documentation. The following Microsoft document should give 
            the developer a starting point to understand PKI: 
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb427432(v=vs.85).aspx" target="_blank">Public Key Infrastructure</a>.
            </para>
            <para>
            ArcGIS Server version 10.1 and higher has the ability to leverage PKI solutions in 'Commercial Off the Shelf' (COTS) Web servers 
            such as: Microsoft Internet Information Server (IIS), Oracle WebLogic, IBM WebSphere, etc. through the use of the 
            ArcGIS Web Adaptor. The requirements for using PKI in ArcGIS Server include:
            </para>
            <list type="number">
              <item>The ArcGIS Web Adaptor must be setup as the gateway to ArcGIS Server.</item>
              <item>The Web Server hosting the ArcGIS Web Adaptor must be configured to require client certificates for user authentication.</item>
              <item>ArcGIS Server Site must be configured to: (a)	Delegate user authentication to the Web Tier and (b) Use an identity store (LDAP, Windows Active Directory, etc.) supported by the Web Server.</item>
            </list>
            <para>
            When a request is made for a resource on ArcGIS Server, the Web Server will authenticate the user by validating the 
            client certificate provided. The request (along with the user name) is then forwarded to ArcGIS Server via the Web 
            Adaptor. ArcGIS Server will verify that the specified user has access to the requested resource before sending back 
            the appropriate response. For more information on using PKI techniques to set up and use client certificates, see 
            the ArcGIS Server documentation.
            </para>
            <para>
            The ArcGIS Runtime for WPF requires supplying a valid 
            <a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;l=EN-US&amp;k=k(System.Security.Cryptography.X509Certificates.X509Certificate)&amp;rd=true" target="_blank">Microsoft System.Security.Cryptography.X509Certificates.X509Certificate</a> 
            object as the .ClientCertificate Property in order to gain access to a secured (https://) ArcGIS Server web service 
            based upon PKI. The Microsoft 
            <a href="http://msdn.microsoft.com/en-us/library/ztkw6e67" target="_blank">System.Security.Cryptography.X509Certificates Namespace</a> 
            API documentation provides a starting point for developers to learn how to programmatically access X509Certificate objects. 
            If no client certificates have been set up on a client machine and a user tries to access using an X509Certificate from 
            your custom ArcGIS WPF application, a Windows Security dialog stating "No certificate available. No certificates meet the 
            application. Click OK to continue" will appear:
            </para>
            <para>
            <img border="0" alt="Try to access an X509Certificate when none are installed on the client computer." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.NoPKI_CertificateAvailable.png"/>
            </para>
            <para>
            Whenever an ArcGIS Runtime for WPF based application uses PKI to secure web services, it is important that error checking 
            be added to the application to ensure that the correct X509Certificate is used to access those secured web services. If 
            a user of your ArcGIS WPF client application provides/uses an X509Certificate that is not accepted by the PKI security 
            set up on the ArcGIS Server machine, then an error will be thrown. The following are a couple of different error messages 
            that could occur:
            </para>
            <para>
            "Error initializing layer: The remote server returned an error: (403) Forbidden.":
            </para>
            <para>
            <img border="0" alt="Using an incorrect X509Certificate for the .ClientProperty return 403 Forbidden error." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.403ForbiddenAccessDenied.png"/>
            </para>
            <para>
            "Error initializing layer: The remote server returned an error: (401) Unauthorized.":
            </para>
            <para>
            <img border="0" alt="Using an incorrect X509Certificate for the .ClientProperty return 401 Unauthorized error." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.401Unauthorized.png"/>
            </para>
            <para>
            Depending on the particular ArcGIS Runtime for WPF object that is used, the developer will need to write code in the 
            appropriate error handling event. For example: an ArcGISDynmaicMapServiceLayer should have error trapping code in 
            the InitializationFailed Event; a QueryTask should have error trapping code in the Failed Event, a PrintTask should 
            have error trapping code in the ExecuteCompleted Event (via the PrintEventArgs), etc.
            </para>
            <para>
            The .ClientCertificate Property has been added to numerous ArcGIS Runtime for WPF objects. Accessing and using an 
            X509Certificate is basically the same for each of the ArcGIS Runtime for WPF objects with  a .ClientCertificate 
            Property. There are code examples of using the X509Certificate in the 
            <see cref="P:ESRI.ArcGIS.Client.DynamicMapServiceLayer.ClientCertificate">DynamicMapServiceLayer.ClientCertificate</see> 
            Property, 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.ClientCertificate">ArcGISTiledMapServiceLayer.ClientCertificate</see> 
            Property, 
            <see cref="M:ESRI.ArcGIS.Client.Printing.PrintTask.ClientCertificate">Printing.PrintTask.ClientCertificate</see> 
            Property (code-behind only options) and 
            <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.ClientCertificate">FeatureLayer.ClientCertificate</see> Property 
            (Model-View-View-Model (MVVM) pattern using XAML and code-behind). Remember the key to accessing a PKI based 
            secured ArcGIS Server web service is to first provide the appropriate .ClientCertificate Property credentials 
            during construction of the object and prior to using (i.e Set/Write) any of the other properties/methods of 
            the ArcGIS Runtime for WPF object, otherwise an error accessing that object will result.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.Credentials">
            <summary>
            Gets or sets the network credentials that are sent to the host and used to authenticate the request.
            </summary>
            <value>The credentials used for authentication.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.Source">
            <summary>
            Gets or sets the URI for the RSS feed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer">
            <summary>
            GPS Layer showing the current location and accuracy.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.Initialize">
            <summary>
            Initializes the resource.
            </summary>
            <remarks>
            	<para>Override this method if your resource requires asyncronous requests to initialize,
            and call the base method when initialization is completed.</para>
            	<para>Upon completion of initialization, check the 
            	<see cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/> for any possible errors.</para>
            </remarks>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.TryStartGps">
            <summary>
            Attempts the start the geowatcher.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.watcher_StatusChanged(System.Object,System.Device.Location.GeoPositionStatusChangedEventArgs)">
            <summary>
            Handles the StatusChanged event of the watcher control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Device.Location.GeoPositionStatusChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.watcher_PositionChanged(System.Object,System.Device.Location.GeoPositionChangedEventArgs{System.Device.Location.GeoCoordinate})">
            <summary>
            Handles the PositionChanged event of the watcher control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">
            The <see cref="T:System.Device.Location.GeoPositionChangedEventArgs`1"/>
            instance containing the event data.
            </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.UpdateAccuracyCircle">
            <summary>
            Starts animation of the circle
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.UpdateLocation">
            <summary>
            Starts animating the location.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.animationTimerLocation_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles the Tick event of the animationTimerLocation timer
            and animates the location point and center of the accuracy circle.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.animationTimerAccuracy_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles the Tick event of the animationTimerAccuracy timer
            and animates radius of the accuracy circle.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GetAccuracyInMapUnits">
            <summary>
            Gets the horizontal accuracy in map units.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GetMapUnits">
            <summary>
            Gets the map units from the map.
            This requires the map to be in either WGS84 or WebMercator spatial reference,
            or have at least one ArcGIS layer whos default spatial reference matches that
            of the map.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoCoordinateProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoCoordinate"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.AnimateUpdatesProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.AnimateUpdates"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.OnMapChanged(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Map)">
            <summary>
            Override to know when a layer's <see cref="T:ESRI.ArcGIS.Client.Map"/> property changes.
            </summary>
            <param name="oldValue">Old map</param>
            <param name="newValue">New map</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.LocationMarkerSymbolProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.LocationMarkerSymbol"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.AccuracyCircleSymbolProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.AccuracyCircleSymbol"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.IsEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.IsEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoPositionWatcherProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoPositionWatcher"/> attached dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoCoordinate">
            <summary>
            Gets the geographic coordinate from last known GPS position
            </summary>
            <remarks>
            The <see cref="E:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoCoordinateChanged"/> event will be fired when this updates.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.Position">
            <summary>
            Gets the coordinate in the Map's spatial reference from last known GPS position
            </summary>
            <remarks>
            The <see cref="E:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.PositionChanged"/> event will be fired when this updates.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.AnimateUpdates">
            <summary>
            Gets or sets a value indicating whether the layer should animate GPS marker and accuracy circle on each update.
            </summary>
            <value><c>true</c> if [animate updates]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.LocationMarkerSymbol">
            <summary>
            Gets or sets the symbol used for the location marker.
            </summary>
            <value>The location marker symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.AccuracyCircleSymbol">
            <summary>
            Gets or sets the symbol used on the accuracy circle.
            </summary>
            <value>The accuracy circle symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.IsEnabled">
            <summary>
            Toggles the GPS tracking on and off
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoPositionWatcher">
            <summary>
            Gets or sets the GeoPositionWatcher used to track position.
            </summary>
            <remarks>
            By default the position watcher used is Windows Phone's built-in <see cref="T:System.Device.Location.GeoCoordinateWatcher"/>.
            Overriding this makes it possible to assign a simulator instead.
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.PositionChanged">
            <summary>
            Occurs when <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.Position"/> property has changed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoCoordinateChanged">
            <summary>
            Occurs when <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.GeoCoordinate"/> property has changed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer.Circle">
            <summary>
            Polygon Helper class for describing a circle
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Gps.GpsSymbol">
            <summary>
            *FOR INTERNAL USE ONLY* GPS Symbol used as default symbology by the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GpsLayer"/>.
            </summary>
            <exclude/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Gps.GpsSymbol.Size">
            <summary>
            [INTERNAL USE ONLY] Gets or sets the symbol size.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Gps.GpsSymbol.Course">
            <summary>
            Gets or sets the heading/course.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Gps.GpsSymbol.Speed">
            <summary>
            [INTERNAL USE ONLY] Gets or sets the speed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Gps.VisibleWhenAboveConverter">
            <summary>
            *FOR INTERNAL USE ONLY* Converter used to turn off the direction marker when the speed drops below a certain point
            </summary>
            <exclude/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Gps.VisibleWhenAboveConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Gps.VisibleWhenAboveConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer">
            <summary>
            Heat Map layer
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.IntensityProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.Intensity"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.OnIntensityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalProperty property changed handler. 
            </summary>
            <param name="d">HeatMapLayer that changed its Interval.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.heatMapPoints_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the heatMapPoints control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.GradientProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.Gradient"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.OnGradientPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            GradientProperty property changed handler. 
            </summary>
            <param name="d">HeatMapLayer that changed its Gradient.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.GetSource(ESRI.ArcGIS.Client.DynamicLayer.ImageParameters,ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete)">
            <summary>
            Gets the source image to display in the dynamic layer. Override this to generate
            or modify images.
            </summary>
            <param name="properties">The image export properties.</param>
            <param name="onComplete">The method to call when the image is ready.</param>
            <seealso cref="M:ESRI.ArcGIS.Client.DynamicLayer.OnProgress(System.Int32)"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.Cancel">
            <summary>
            Stops loading of any pending images
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.renderThread_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Handles the DoWork event of the renderThread control. This is where we
            render the heatmap outside the UI thread.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.renderThread_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Handles the RunWorkerCompleted event of the renderThread control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.renderThread_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Handles the ProgressChanged event of the renderThread control and fires the layer progress event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.InterpolateColor(System.Single,System.Collections.Generic.List{ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.ThreadSafeGradientStop})">
            <summary>
            Lienarly interpolates a color from a list of colors.
            </summary>
            <param name="value">The value relative to the gradient stop offsets.</param>
            <param name="stops">The color stops sorted by the offset.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.AddPoint(System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Adds a heat map point to the intensity matrix.
            </summary>
            <param name="distanceMatrix">The distance matrix.</param>
            <param name="size">The size of the distance matrix.</param>
            <param name="x">x.</param>
            <param name="y">y</param>
            <param name="intensityMap">The intensity map.</param>
            <param name="width">The width of the intensity map..</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.CreateDistanceMatrix(System.Int32)">
            <summary>
            Creates the distance matrix.
            </summary>
            <param name="size">The size of the matrix (must be and odd number).</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of a layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object containing one legend item showing the heat map gradient.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.FullExtent">
            <summary>
            The full extent of the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.Intensity">
            <summary>
            Gets or sets the interval.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.HeatMapPoints">
            <summary>
            Gets or sets the heat map points.
            </summary>
            <value>The heat map points.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.Gradient">
            <summary>
            Gets or sets the heat map gradient.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed (i.e. when the the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.Gradient"/> changed).
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle">
            <summary>
            Internal representation of a KML style element.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.CopyFrom(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle)">
            <summary>
            Copies a KML style object contents to another KML object.
            </summary>
            <param name="from">The source of the copy (contents copied to instance invoking this method).</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.StyleId">
            <summary>
            The unique id of the style. This is either the "id" of the Style node, the filename of an image if taken
            from a KMZ file generated by ArcGIS REST, or a unique GUID for styles that are encountered "in-line" for
            a point feature in order to link the feature to the style/icon for later processing.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconHref">
            <summary>
            The href to the icon image used for a point feature.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconHotspotX">
            <summary>
            The X coordinate for the location on the point image to anchor to the underlying geometry.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconHotspotY">
            <summary>
            The Y coordinate for the location on the point image to anchor to the underlying geometry.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconHotspotUnitsX">
            <summary>
            The unit type for the hotspot used to interpret the X value as pixels, fractions, etc.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconHotspotUnitsY">
            <summary>
            The unit type for the hotspot used to interpret the Y value as pixels, fractions, etc.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconHeading">
            <summary>
            The angle of rotation for the point image between 0 and 360.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconColor">
            <summary>
            The icon color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconScale">
            <summary>
            The scale of the point image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.IconImage">
            <summary>
            The bitmap image used to draw the point symbol.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.LineWidth">
            <summary>
            The width in pixels used to draw the line segment.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.LineColor">
            <summary>
            The color used to draw the line segment.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.PolyFill">
            <summary>
            If true the polygon will be filled with a color, if false it will not be filled.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.PolyOutline">
            <summary>
            If true the polygon outline will be drawn independently of the inside, if false it will not
            be drawn.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.PolyFillColor">
            <summary>
            The color used to fill the polygon.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.BalloonText">
            <summary>
            If a style contains a BalloonStyle which also contains a text node, then that value is stored here and
            then copied into the features' attributes collection using BalloonText as the key.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle.ZipFile">
            <summary>
            If the image used by a style is defined in a downlooaded kmz document, then the kmz document is stored here.
            We can't just store the image since it doesn't go through the tread barrier.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.SymbolDescriptor">
            <summary>
            Abstract base class used for each type of symbol descriptor.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.SymbolDescriptor.CreateSymbol">
            <summary>
            Method to create proper symbology for each feature type.
            </summary>
            <returns>A symbol defined by internal properties of the class.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PointSymbolDescriptor">
            <summary>
            Concrete class for point geometry symbols.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PointSymbolDescriptor.CreateSymbol">
            <summary>
            Method to create proper symbology for each feature type.
            </summary>
            <returns>A symbol defined by internal properties of the class.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.LineSymbolDescriptor">
            <summary>
            Concrete class for line geometry symbols.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.LineSymbolDescriptor.CreateSymbol">
            <summary>
            Method to create proper symbology for each feature type.
            </summary>
            <returns>A symbol defined by internal properties of the class.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PolygonSymbolDescriptor">
            <summary>
            Concrete class for polygon geometry symbols.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PolygonSymbolDescriptor.CreateSymbol">
            <summary>
            Method to create proper symbology for each feature type.
            </summary>
            <returns>A symbol defined by internal properties of the class.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PlacemarkDescriptor">
            <summary>
            Metadata storage for each placemark, assigned by KML engine.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PlacemarkDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PlacemarkDescriptor"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PlacemarkDescriptor.Geometry">
            <summary>
            Information that defines the feature geometry and its location.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PlacemarkDescriptor.Symbol">
            <summary>
            Information that defines the symbology of the feature.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PlacemarkDescriptor.Attributes">
            <summary>
            Attributes associated with the feature.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PlacemarkDescriptor.TimeExtent">
            <summary>
            Gets or sets the time extent associated with the feature.
            </summary>
            <value>
            The time extent.
            </value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.NetworkLinkControl">
            <summary>
            NetworkLinkControl infos
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.GroundOverlayDescriptor">
            <summary>
            Metadata storage for each ground overlay, assigned by KML engine.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition">
            <summary>
            Metadata storage for all elements in a KML file.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.Clear">
            <summary>
            Clear all features. This is invoked by the KML engine so that it can cleanly process multiple
            KML files with each as a separate graphics layer.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.AddPlacemark(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.PlacemarkDescriptor)">
            <summary>
            Adds a placemark descriptor to the list.
            </summary>
            <param name="fd">Placemark description.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.AddStyle(System.String,ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle)">
            <summary>
            Adds a KML style to the list.
            </summary>
            <param name="key">Unique key associated with the style, typically an id, filename or GUID.</param>
            <param name="style">Style description.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.AddContainer(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.ContainerInfo)">
            <summary>
            Adds a container to the list.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.AddGroundOverlay(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.GroundOverlayDescriptor)">
            <summary>
            Adds a grounoaverlay to the list.
            </summary>
            <param name="fd">The groundoverlay descriptor.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.GetIconImage(System.String)">
            <summary>
            Returns the bitmap image brush associated with the icon href for the point feature.
            </summary>
            <param name="IconHref">Value used to obtain image from remote server via HTTP or key for image dictionary.</param>		
            <returns>
            A bitmap image brush or null if not found.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.CreateGraphics(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlGraphicsLayer,System.Collections.Generic.IDictionary{System.String,System.Windows.Media.ImageBrush})">
            <summary>
            Creates graphic elements and adds them to the graphics layer.
            </summary>
            <param name="layer">Graphics layer that will have features added to it.</param>
            <param name="images">Dictionary of images coming from kmz content or from previous parsing</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.FeatureDefinition.CreateGroundOverlays(ESRI.ArcGIS.Client.ElementLayer,System.Collections.Generic.IDictionary{System.String,System.Windows.Media.ImageBrush},ESRI.ArcGIS.Client.Map)">
            <summary>
            Createsground overlays and adds them to the element layer.
            </summary>
            <param name="layer">Element layer that will have overlays added to it.</param>
            <param name="images">Dictionary of images coming from kmz content or from previous parsing</param>
            <param name="map">The map the KML layer belongs to (useful to know the SR) </param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData">
            <summary>
            Stores an extended data definition for a KML feature.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>Returns the value of the object instead of the type information.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData.Name">
            <summary>
            The name of the extended data variable.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData.DisplayName">
            <summary>
            The optional display name for the extended data variable.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData.Value">
            <summary>
            The value of the extended data variable.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer">
            <summary>
            A <see cref="T:ESRI.ArcGIS.Client.GroupLayer">GroupLayer</see> based upon the 
            <a href="http://en.wikipedia.org/wiki/KML" target="_blank">Keyhole Markup Language</a> (KML) specification that targets 
            the Google Maps level of support.
            </summary>
            <remarks>
            <para>
            Enhanced functionality to support more KML elements was added in the 
            
            ArcGIS Runtime SDK for WPF.
            
             This brings the KML level of functionality very close to that of the KML specification used in 
            <a href="http://en.wikipedia.org/wiki/Google_maps" target="_blank">Google Maps</a>.
            </para>
            <para>
            KML is an XML tag based syntax that holds geographic information (geometric shapes, symbology, and attributes) in a 
            file with the .kml extension. The KmlLayer also support the KMZ specification which is essentially a set of zipped 
            KML files, folders, and other documents (e.g. images, icons, html documents, etc. ) into a single file with the .kmz 
            extension. To view the contents of a KMZ file, rename the file with the extension .zip and use a ZIP program to explode 
            the contents onto a hard drive location.
            </para>
            <para><big>KmlLayer is a GroupLayer</big></para>
            <para>
            The KmlLayer is of Type <see cref="T:ESRI.ArcGIS.Client.GroupLayer">GroupLayer</see> meaning that certain KML elements 
            are parsed out into individual Layers in a <see cref="T:ESRI.ArcGIS.Client.LayerCollection">LayerCollection</see>. 
            The following KML elements are parsed into the ArcGIS Layer types of:
            </para>
            <list type="table">
            <listheader><term>KML Element(s)</term><description>ArcGIS Layer Type</description></listheader>
            <item><term>&lt;Placemark&gt;&lt;Point&gt;</term><description><see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">GraphicsLayer</see> based upon <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see> Geometries</description></item>
            <item><term>&lt;Placemark&gt;&lt;LineString&gt;</term><description><see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">GraphicsLayer</see> based upon <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see> Geometries</description></item>
            <item><term>&lt;Placemark&gt;&lt;Polygon&gt;</term><description><see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">GraphicsLayer</see> based upon <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see> Geometries</description></item>
            <item><term>&lt;GroundOverlay&gt;</term><description><see cref="T:ESRI.ArcGIS.Client.ElementLayer">ElementLayer</see></description></item>
            </list>
            <para>
            <b>Note:</b> The KML elements of &lt;Folder&gt;, &lt;Document&gt;, and &lt;NetworkLink&gt; become child KmlLayers (which 
            can be recursive in nature depending on the KML/KMZ file) and are parsed into the ArcGIS Layer types noted in the prior table.
            Additionally, a KmlLayer can contain other KmlLayers (which again can be recursive). 
            </para>
            <para>
            Drilling into individual Layers and their subsequent atomic level Types of a KmlLayer GroupLayer is accomplished 
            via the <see cref="P:ESRI.ArcGIS.Client.GroupLayerBase.ChildLayers">KmlLayer.ChildLayers</see> Property. See the code 
            example in the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.Name">KmlLayer.Name</see> Property 
            documentation for one example of drilling into the KmlLayer GroupLayer to obtain detailed information (like: 
            Graphic Attributes, Graphic Symbology, Graphic Geometry, ElementLayer ElementType, ElementLayer Opacity, 
            ElementLayer Envelope, etc.) that may be useful in creating an application.
            </para>
            
            <para>There is a known issue of KmlLayer symbols briefly flickering in the upper left corner of the Windows Desktop when a WPF application starts and stops.</para>
            <para><big>Accessing KML/KMZ on the local hard drive</big></para>
            <para>
            Accessing a KmlLayer is unique in that ArcGIS Server is not required to view the geographic information on the client. 
            Since the KmlLayer is based upon a KML or KMZ file, all that is required is a web server to host the KML/KMZ file. 
            <b>NOTE:</b> ArcGIS Server is however the recommended server to host KML/KMZ files via geographic web services as 
            it generates KML/KMZ files natively as part of the web service publishing process from an ArcMap .mxd. 
            </para>
            <para>
            Developers who wish to test the KmlLayer functionality using KML/KMZ files locally on their 
            development machine have the following options:
            </para>
            
            
            
            
            
            <para><b>Option #1:</b> Developers can place a KML/KMZ file anywhere on the local hard drive and provide the file path as the KmlLayer.Url (example: Url="C:\TEST_KML_FILES\Test.kml").</para>
            <para><b>Option #2:</b> If the developer has installed a web server on the same computer as Visual Studio (for example: Internet Information Server (IIS)), then they can place the KML/KMZ file in an application directory of their local web server (i.e. http://localhost). Using this option has the additional requirements of:</para>
            <list type="bullet"><item>Setting up the correct MIME type on the web server to handle KML/KMZ files</item><item>Adding a crossdomain.xml file to the root of the web server</item><item>Making use of a proxy to avoid Security Exception error messages</item></list>
            <para><b>NOTE:</b> WPF does not use proxies so the use of KmlLayer.ProxyUrl is not necessary (even though the local KML file may have resource links (i.e. http://) to locations outside of the local network).</para>
            
            
            
            <para><big>Supported KML Tags</big></para>
            <para>
            The following table lists the KML elements supported by the KmlLayer class, and provides additional notes for elements that 
            are conditionally supported.
            </para>
            <list type="table">
            <listheader><term>Supported KML Element</term><description>Supportability Notes</description></listheader>
            <item>
              <term>&lt;altitudeMode&gt;</term>
              <description>Only 2D supported.</description>
            </item>
            <item>
              <term>&lt;atom:author&gt;</term>
              <description>The &lt;atom:author&gt; 'name' attribute is stored in the ESRI.ArcGIS.Client.Graphic as an 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Attribute</see> (where the key = 'name' in the key/value 
              pairs of the IDictionary(Of String, Object)). When this value is defined on a container 
              (&lt;Folder&gt; or &lt;Document&gt;), all &lt;Placemark&gt;'s in the hierarchy inherits from this 
              value.</description>
            </item>
            <item>
              <term>&lt;atom:link&gt;</term>
              <description>The &lt;atom:link&gt; 'href' attribute is stored in the ESRI.ArcGIS.Client.Graphic as an 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Attribute</see> (where the key = 'atomHRef' in the 
              key/value pairs of the IDictionary(Of String, Object)). When this value is defined on a container 
              (&lt;Folder&gt; or &lt;Document&gt;), all &lt;Placemark&gt;'s in the hierarchy inherits from this 
              value.</description>
            </item>
            <item>
              <term>&lt;atom:name&gt;</term>
              <description>The &lt;atom:name&gt; 'href' attribute is stored in the ESRI.ArcGIS.Client.Graphic as an 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Attribute</see> (where the key = 'atomHRef' in the key/value 
              pairs of the IDictionary(Of String, Object)). When this value is defined on a container (&lt;Folder&gt; or 
              &lt;Document&gt;), all &lt;Placemark&gt;'s in the hierarchy inherits from this value.</description>
            </item>
            <item>
              <term>&lt;BalloonStyle&gt;</term>
              <description>For the &lt;BalloonStyle&gt;, the nested &lt;text&gt; tag information is stored in the 
              ESRI.ArcGIS.Client.Graphic as an <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Attribute</see> 
              (where the key = 'balloonText' in the key/value pairs of the IDictionary(Of String, Object)). NOTE: 
              Whatever is specified as information in the &lt;text &gt; tag is used, there is no entity replacement.</description>
            </item>
            <item>
              <term>&lt;color&gt;</term>
              <description>Includes #AABBGGRR and #BBGGRR.</description>
            </item>
            <item>
              <term>&lt;colorMode&gt;</term>
              <description>Random mode not supported.</description>
            </item>
            <item>
              <term>&lt;coordinates&gt;</term>
              <description></description>
            </item>
            <item>
              <term>&lt;Data&gt;</term>
              <description>Multiple &lt;Data&gt; tags can be nested within the &lt;ExtendedData&gt; tag. The &lt;ExtendedData&gt; 
              tag corresponds to a System.Collections.Generic.List(Of 
              <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData">ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData</see>).
              An &lt;ExtendedData&gt; tag is stored as a single key/value pair in the IDictionary(Of String, Object)) 
              of the <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Graphic.Attributes</see> Property (where the 
              key = 'extendedData' in the key/value pairs of the IDictionary(Of String, Object)). Each &lt;Data&gt; tag 
              holds three attributes: 'name', 'displayname', and 'value' and is stored as a KmlExtendedData object of the 
              System.Collections.Generic.List(Of ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData). Thus, the 
              &lt;Data&gt; 'name' attribute maps to a KmlExtendedData.Name Property; the &lt;Data&gt; 'displayname' attribute 
              maps to the KmlExtendedData.DisplayName Property; and the &lt;Data&gt; 'value' attribute maps to the 
              KmlExtendedData.Value Property.</description>
            </item>
            <item>
              <term>&lt;description&gt;</term>
              <description>For the &lt;description&gt; tag the information is stored in the ESRI.ArcGIS.Client.Graphic as an 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Attribute</see> (where the key = 'description' in the key/value 
              pairs of the IDictionary(Of String, Object)). NOTE: Whatever is specified as information in the &lt;description&gt; 
              tag is used, there is no entity replacement. The HTML content is allowed but is sanitized to protect from 
              cross-browser attacks; entity replacements of the form $[dataName] are unsupported.</description>
            </item>
            <item>
              <term>&lt;Document&gt;</term>
              <description>From v2.3, the &lt;Document&gt; tag becomes ESRI.ArcGIS.Client.GroupLayers.</description>
            </item>
            <item>
              <term>&lt;east&gt;</term>
              <description>Part of &lt;LatLonBox&gt;.</description>
            </item>
            <item>
              <term>&lt;ExtendedData&gt;</term>
              <description>Multiple &lt;Data&gt; tags can be nested within the &lt;ExtendedData&gt; tag. The &lt;ExtendedData&gt; 
              tag corresponds to a System.Collections.Generic.List(Of 
              <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData">ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData</see>).
              An &lt;ExtendedData&gt; tag is stored as a single key/value pair in the IDictionary(Of String, Object)) 
              of the <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Graphic.Attributes</see> Property (where the 
              key = 'extendedData' in the key/value pairs of the IDictionary(Of String, Object)). Each &lt;Data&gt; tag 
              holds three attributes: 'name', 'displayname', and 'value' and is stored as a KmlExtendedData object of the 
              System.Collections.Generic.List(Of ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData). Thus, the 
              &lt;Data&gt; 'name' attribute maps to a KmlExtendedData.Name Property; the &lt;Data&gt; 'displayname' attribute 
              maps to the KmlExtendedData.DisplayName Property; and the &lt;Data&gt; 'value' attribute maps to the 
              KmlExtendedData.Value Property. No support for SchemaData.</description>
            </item>
            <item>
              <term>&lt;fill&gt;</term>
              <description></description>
            </item>
            <item>
              <term>&lt;Folder&gt;</term>
              <description>From v2.3, the &lt;Folder&gt; tag becomes ESRI.ArcGIS.Client.GroupLayers.</description>
            </item>
            <item>
              <term>&lt;GroundOverlay&gt;</term>
              <description>From v2.3, an ESRI.ArcGIS.Client.ElementLayer is created by &lt;Folder&gt; and &lt;Document&gt; tags 
              to contain all the &lt;GroundOverlay&gt; tags of the container. Nested tags of &lt;LatLongBox&gt;, &lt;rotation&gt;, 
              &lt;color&gt;, and &lt;icon&gt; are used.</description>
            </item>
            <item>
              <term>&lt;heading&gt;</term>
              <description>Supported when part of an &lt;IconStyle&gt; element for proper rotation of a point's image.</description>
            </item>
            <item>
              <term>&lt;hotSpot&gt;</term>
              <description>Supported for Symbol creation.</description>
            </item>
            <item>
              <term>&lt;href&gt;</term>
              <description></description>
            </item>
            <item>
              <term>&lt;Icon&gt;</term>
              <description>Only the 'href' element of this complex element is supported. Rotation and scaling are supported.</description>
            </item>
            <item>
              <term>&lt;IconStyle&gt;</term>
              <description></description>
            </item>
            <item>
              <term>&lt;innerBoundaryIs&gt;</term>
              <description>Only single interior ring supported.</description>
            </item>
            <item>
              <term>&lt;kml&gt;</term>
              <description>It's the root element of any KML document.</description>
            </item>
            <item>
              <term>&lt;LatLonBox&gt;</term>
              <description>Support for &lt;Placemark&gt; tags. Supported from v2.3 for &lt;GroundOverlay&gt; tags.</description>
            </item>
            <item>
              <term>&lt;LinearRing&gt;</term>
              <description>Supported, but only makes use of the &lt;coordinates&gt; sub element.</description>
            </item>
            <item>
              <term>&lt;LineString&gt;</term>
              <description>Supported, but only makes use of the &lt;coordinates&gt; sub element.</description>
            </item>
            <item>
              <term>&lt;LineStyle&gt;</term>
              <description></description>
            </item>
            <item>
              <term>&lt;Link&gt;</term>
              <description>Supported, but only makes use of the &lt;href&gt; sub element.</description>
            </item>
            <item>
              <term>&lt;MultiGeometry&gt;</term>
              <description>Rendered but displayed as separate features in left side panel.</description>
            </item>
            <item>
              <term>&lt;name&gt;</term>
              <description>For the &lt;name&gt; tag the information is stored in the ESRI.ArcGIS.Client.Graphic as an 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Attribute</see> (where the key = 'name' in the key/value 
              pairs of the IDictionary(Of String, Object)). NOTE: Whatever is specified as information in the &lt;description&gt; 
              tag is used, there is no entity replacement.</description>
            </item>
            <item>
              <term>&lt;NetworkLink&gt;</term>
              <description>From v2.3 support for &lt;refreshInterval&gt; tag and 'OnInterval' RefreshMode. Becomes a 
              sub-layer in the ESRI.ArcGIS.Client.GroupLayer.</description>
            </item>
            <item>
              <term>&lt;NetworkLinkControl&gt;</term>
              <description>'MinRefreshPeriod' supported from v2.3.</description>
            </item>
            <item>
              <term>&lt;north&gt;</term>
              <description>Supported as part of &lt;LatLonBox&gt;.</description>
            </item>
            <item>
              <term>&lt;outerBoundaryIs&gt;</term>
              <description>Implicitly from &lt;LinearRing&gt; order.</description>
            </item>
            <item>
              <term>&lt;outline&gt;</term>
              <description></description>
            </item>
            <item>
              <term>&lt;Placemark&gt;</term>
              <description>Becomes an ESRI.ArcGIS.Client.Graphic in an ESRI.ArcGIS.Client.GraphicsLayer.</description>
            </item>
            <item>
              <term>&lt;Point&gt;</term>
              <description>Supported, but only makes use of the &lt;coordinates&gt; sub element.</description>
            </item>
            <item>
              <term>&lt;Polygon&gt;</term>
              <description>Supported, but only makes use of the &lt;OuterBoundaryIs&gt; and &lt;InnerBoundaryIs&gt; 
              sub elements.</description>
            </item>
            <item>
              <term>&lt;PolyStyle&gt;</term>
              <description>Makes use of the tags &lt;color&gt;, &lt;fill&gt;, and &lt;outline&gt;.</description>
            </item>
            <item>
              <term>&lt;refreshInterval&gt;</term>
              <description>Supported from v2.3.</description>
            </item>
            <item>
              <term>&lt;refreshMode&gt;</term>
              <description>'OnInterval' mode supported from v2.3.</description>
            </item>
            <item>
              <term>&lt;south&gt;</term>
              <description>Supported as part of &lt;LatLonBox&gt;.</description>
            </item>
            <item>
              <term>&lt;Style&gt;</term>
              <description>Supported, but only &lt;IconStyle&gt;, &lt;LineStyle&gt;, and &lt;PolyStyle&gt; 
              sub-elements are supported.</description>
            </item>
            <item>
              <term>&lt;StyleMap&gt;</term>
              <description>Only 'Normal' style supported. 'highlight' style not supported.</description>
            </item>
            <item>
              <term>&lt;text&gt;</term>
              <description></description>
            </item>
            <item>
              <term>&lt;value&gt;</term>
              <description>Replacement of $[geDirections] is not supported.</description>
            </item>
            <item>
              <term>&lt;visibility&gt;</term>
              <description>Visibility of containers (&lt;Folder&gt;/&lt;Document&gt;/&lt;NetworkLink&gt;) supported 
              from v2.3. Visibility of features not supported.</description>
            </item>
            <item>
              <term>&lt;west&gt;</term>
              <description>Supported as part of &lt;LatLonBox&gt;.</description>
            </item>
            <item>
              <term>&lt;width&gt;</term>
              <description></description>
            </item>
            </list>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            When the Map initially loads a KmlLayer (Earth Quakes in the last 7 days) will be added that was defined in 
            XAML. Click the button to add another KmlLayer (Volcanoes of the World) using code-behind logic.
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Adding KmlLayers to the Map using XAML and code-behind." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.KmlLayer.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
            
              &lt;!-- Add a Map Control. Zoom to the Central Europe/Mediterranean area. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,171,0,0" Name="Map1" VerticalAlignment="Top" 
                        WrapAround="True" Height="419" Width="405" Extent="-692043,2479159,4226170,7567385"&gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:LayerCollection&gt;
                              
                    &lt;!-- Add a background ArcGISTiledMapServiceLayer for visual reference. --&gt;
                    &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
                      
                    &lt;!-- Add a KmlLayer that shows Earthquake occurrences over the last 7 days. Need to use a ProxyUrl. --&gt;
                    &lt;esri:KmlLayer ID="Earth Quakes" 
                                   Url="http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-age_src.kmz"
                                   ProxyUrl="http://servicesbeta3.esri.com/SilverlightDemos/ProxyPage/proxy.ashx"&gt;
                    &lt;/esri:KmlLayer&gt;
                    
                  &lt;/esri:LayerCollection&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
                  
              &lt;!-- Add a Legend Control to show the symbology of the Layers in the Map. --&gt;
              &lt;esri:Legend HorizontalAlignment="Left" Margin="403,171,0,0" Name="Legend1" VerticalAlignment="Top" 
                           Height="419" Width="237" Map="{Binding ElementName=Map1}" 
                           ShowOnlyVisibleLayers="True" LayerItemsMode="Tree" /&gt;
                    
              &lt;!-- Add a button that has the Click event wired up. The button will add another KmlLayer via the code-behind. --&gt;
              &lt;Button Content="Add KmlLayer 'Volcanoes of the World' to the Map." Height="23" HorizontalAlignment="Left" 
                      Margin="0,144,0,0" Name="Button1" VerticalAlignment="Top" Width="640" Click="Button1_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="138" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="640" 
                 TextWrapping="Wrap" Text="When the Map initially loads a KmlLayer (Earth Quakes in the last 7 days) will 
                         be added that was defined in XAML. Click the button to add another KmlLayer (Volcanoes of the World)
                         using code-behind logic." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Add another KmlLayer to the Map.
              
              // Create a new KmlLayer object. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer theKmlLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer();
              
              // Set the KmlLayer's ID.
              theKmlLayer.ID = "Volcanoes of the world";
              
              // Set the Url of the KmlLayer. Note the Url takes a Uri object!
              theKmlLayer.Url = new Uri("http://sites.google.com/site/geined13/tours/Volcanoes_of_the_World.kmz?attredirects=0&amp;d=1");
              
              // Need to use a ProxyUrl on the KmlLayer since the service is not hosted locally or on a local network.
              theKmlLayer.ProxyUrl = "http://servicesbeta3.esri.com/SilverlightDemos/ProxyPage/proxy.ashx";
              
              // Add the KmlLayer to the Map. An automatic refresh of the Map and Legend Controls will occur.
              Map1.Layers.Add(theKmlLayer);
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Add another KmlLayer to the Map.
              
              ' Create a new KmlLayer object. 
              Dim theKmlLayer As New ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer
              
              ' Set the KmlLayer's ID.
              theKmlLayer.ID = "Volcanoes of the world"
              
              ' Set the Url of the KmlLayer. Note the Url takes a Uri object!
              theKmlLayer.Url = New Uri("http://sites.google.com/site/geined13/tours/Volcanoes_of_the_World.kmz?attredirects=0&amp;d=1")
              
              ' Need to use a ProxyUrl on the KmlLayer since the service is not hosted locally or on a local network.
              theKmlLayer.ProxyUrl = "http://servicesbeta3.esri.com/SilverlightDemos/ProxyPage/proxy.ashx"
              
              ' Add the KmlLayer to the Map. An automaic refresh of the Map and Legend Controls will occur.
              Map1.Layers.Add(theKmlLayer)
              
            End Sub
            </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ClientCertificateProperty">
            <summary>
            Identifies the <see cref="F:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ClientCertificateProperty"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.CredentialsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.Credentials"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ProjectionServiceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ProjectionService"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.#ctor(ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer"/> class which will be a child of another <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer"/>.
            </summary>
            <param name="parentLayer">The parent layer.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.OnMapChanged(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Map)">
            <summary>
            Override to know when a layer's <see cref="T:ESRI.ArcGIS.Client.Map"/> property changes.
            </summary>
            <param name="oldValue">Old map</param>
            <param name="newValue">New map</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.Initialize">
            <summary>
            Initializes the resource.
            </summary>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.SetSource(System.IO.Stream)">
            <summary>
            Sets the KML stream source.
            </summary>
            <param name="stream">A stream to a KML or KMZ file.</param>
            <remarks>
            Use this method if you need to load KML from a local file or
            file stream.
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.Refresh">
            <summary>
            Refreshes the KML layer by downloading and parsing the KML document.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ConditionalRefresh(ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            If the region matches the map extent, download the URL immediately
            else set the flag NeedRefreshOnRegion for further refresh
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.SetVisibilityByIDs(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
             Set the folders visibility from an enumeration of Ids.
             These Ids are those used by the webmaps.
            </summary>
             <param name="IDs">Enumeration of visible folder ID.</param>
             <remarks>This method is mainly useful for the webmap serializer</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.GenerateVisibilityIDs">
            <summary>
             Generate the IDs of the folder that are currently visible.
            </summary>
            <returns>The enumeration of visible folder IDs</returns>
             <remarks>This method is mainly useful for the webmap serializer</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.DownloadContent(System.Uri)">
            <summary>
            Download content using URL. This method may be called recursively if the KML file contains
            a network link.
            </summary>
            <param name="url">Location of KML content.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.webclient_OpenReadCompleted(System.Object,System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Event handler for when the KML file is completely downloaded. If the KML content contains a
            network link, then the linked content will be downloaded recursively. If no network link is
            detected, then the KML content is converted into a feature definition using the engine and
            eventually rendered as graphic g.
            </summary>
            <param name="sender">Sending object.</param>
            <param name="e">Stream containing KML content.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.GetKmzContents(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile)">
            <summary>
            Processes each file in the ZIP stream, storing images in a dictionary and load the KML contents
            into an XDocument.
            </summary>
            <param name="zipFile">Decompressed stream from KMZ.</param>
            <returns>XDocument containing KML content from the KMZ source.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.OnLoaded">
            <summary>
            Occurs when this layer is rendered.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.OnUnloaded">
            <summary>
            Occurs when this layer is no longer connected to the main object tree.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.KmlLayer_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the KmlLayer.
            Loads and parses the KML source as soon as the layer is visible.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.SetResolutionRange">
            <summary>
            Sets the min and max resolution from the Region.
            If the layer is a networklink, the resolution is set on the layer itself
            If the layer is not a networklink, the resolution is set on the children that are not networklink.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of the layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            A group layer returns only one item describing the group layer (the legends of the sublayers are not returned by this method) 
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error (cant' happen with a group layer).</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ClientCertificate">
            <summary>
            Gets or sets the client certificate that is sent to the host and used to authenticate the request.
            </summary>
            <value>The client certificate used for authentication.</value>
            <remarks>
            <para>
            A client certificate is an electronic document which uses a digital signature to bind a public key with an identity. 
            A client certificate is used to verify that a public key belongs to an individual or an organization. When a client 
            certificate is valid, access to secured content over the https:// is enabled. Client certificates fall under the 
            technology umbrella known as a Public-Key Infrastructure (PKI). PKI is a large complex body of standards, policies, 
            protocols, and practices that are beyond the scope this documentation. The following Microsoft document should give 
            the developer a starting point to understand PKI: 
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb427432(v=vs.85).aspx" target="_blank">Public Key Infrastructure</a>.
            </para>
            <para>
            ArcGIS Server version 10.1 and higher has the ability to leverage PKI solutions in 'Commercial Off the Shelf' (COTS) Web servers 
            such as: Microsoft Internet Information Server (IIS), Oracle WebLogic, IBM WebSphere, etc. through the use of the 
            ArcGIS Web Adaptor. The requirements for using PKI in ArcGIS Server include:
            </para>
            <list type="number">
              <item>The ArcGIS Web Adaptor must be setup as the gateway to ArcGIS Server.</item>
              <item>The Web Server hosting the ArcGIS Web Adaptor must be configured to require client certificates for user authentication.</item>
              <item>ArcGIS Server Site must be configured to: (a)	Delegate user authentication to the Web Tier and (b) Use an identity store (LDAP, Windows Active Directory, etc.) supported by the Web Server.</item>
            </list>
            <para>
            When a request is made for a resource on ArcGIS Server, the Web Server will authenticate the user by validating the 
            client certificate provided. The request (along with the user name) is then forwarded to ArcGIS Server via the Web 
            Adaptor. ArcGIS Server will verify that the specified user has access to the requested resource before sending back 
            the appropriate response. For more information on using PKI techniques to set up and use client certificates, see 
            the ArcGIS Server documentation.
            </para>
            <para>
            The ArcGIS Runtime for WPF requires supplying a valid 
            <a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;l=EN-US&amp;k=k(System.Security.Cryptography.X509Certificates.X509Certificate)&amp;rd=true" target="_blank">Microsoft System.Security.Cryptography.X509Certificates.X509Certificate</a> 
            object as the .ClientCertificate Property in order to gain access to a secured (https://) ArcGIS Server web service 
            based upon PKI. The Microsoft 
            <a href="http://msdn.microsoft.com/en-us/library/ztkw6e67" target="_blank">System.Security.Cryptography.X509Certificates Namespace</a> 
            API documentation provides a starting point for developers to learn how to programmatically access X509Certificate objects. 
            If no client certificates have been set up on a client machine and a user tries to access using an X509Certificate from 
            your custom ArcGIS WPF application, a Windows Security dialog stating "No certificate available. No certificates meet the 
            application. Click OK to continue" will appear:
            </para>
            <para>
            <img border="0" alt="Try to access an X509Certificate when none are installed on the client computer." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.NoPKI_CertificateAvailable.png"/>
            </para>
            <para>
            Whenever an ArcGIS Runtime for WPF based application uses PKI to secure web services, it is important that error checking 
            be added to the application to ensure that the correct X509Certificate is used to access those secured web services. If 
            a user of your ArcGIS WPF client application provides/uses an X509Certificate that is not accepted by the PKI security 
            set up on the ArcGIS Server machine, then an error will be thrown. The following are a couple of different error messages 
            that could occur:
            </para>
            <para>
            "Error initializing layer: The remote server returned an error: (403) Forbidden.":
            </para>
            <para>
            <img border="0" alt="Using an incorrect X509Certificate for the .ClientProperty return 403 Forbidden error." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.403ForbiddenAccessDenied.png"/>
            </para>
            <para>
            "Error initializing layer: The remote server returned an error: (401) Unauthorized.":
            </para>
            <para>
            <img border="0" alt="Using an incorrect X509Certificate for the .ClientProperty return 401 Unauthorized error." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.401Unauthorized.png"/>
            </para>
            <para>
            Depending on the particular ArcGIS Runtime for WPF object that is used, the developer will need to write code in the 
            appropriate error handling event. For example: an ArcGISDynamicMapServiceLayer should have error trapping code in 
            the InitializationFailed Event; a QueryTask should have error trapping code in the Failed Event, a PrintTask should 
            have error trapping code in the ExecuteCompleted Event (via the PrintEventArgs), etc.
            </para>
            <para>
            The .ClientCertificate Property has been added to numerous ArcGIS Runtime for WPF objects. Accessing and using an 
            X509Certificate is basically the same for each of the ArcGIS Runtime for WPF objects with  a .ClientCertificate 
            Property. There are code examples of using the X509Certificate in the 
            <see cref="P:ESRI.ArcGIS.Client.DynamicMapServiceLayer.ClientCertificate">DynamicMapServiceLayer.ClientCertificate</see> 
            Property, 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.ClientCertificate">ArcGISTiledMapServiceLayer.ClientCertificate</see> 
            Property, 
            <see cref="M:ESRI.ArcGIS.Client.Printing.PrintTask.ClientCertificate">Printing.PrintTask.ClientCertificate</see> 
            Property (code-behind only options) and 
            <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.ClientCertificate">FeatureLayer.ClientCertificate</see> Property 
            (Model-View-View-Model (MVVM) pattern using XAML and code-behind). Remember the key to accessing a PKI based 
            secured ArcGIS Server web service is to first provide the appropriate .ClientCertificate Property credentials 
            during construction of the object and prior to using (i.e Set/Write) any of the other properties/methods of 
            the ArcGIS Runtime for WPF object, otherwise an error accessing that object will result.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.Credentials">
            <summary>
            Gets or sets the network credentials that are sent to the host and used to authenticate the request.
            </summary>
            <value>The credentials used for authentication.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.Url">
            <summary>
            Gets or sets the Url to the KML document.
            </summary>
            <remarks>
            <para>
            Accessing a KmlLayer is unique in that ArcGIS Server is not required to view geographic information. Since 
            the KmlLayer is based upon a KML or KMZ file, all that is required is a web server to host the KML/KMZ file. 
            <b>NOTE:</b> ArcGIS Server has the ability to host geographic web services created in ArcMap as native 
            KML/KMZ files. 
            </para>
            <para>
            Developers who wish to test the KmlLayer functionality using KML/KMZ files locally on their 
            development machine have the followings options:
            </para>
            <para>
            <b>Option #1:</b> Developers can place a KML/KMZ file anywhere on the local hard drive and provide the file 
            path as the KmlLayer.Url (example: Url="C:\TEST_KML_FILES\Test.kml").
            </para>
            <para>
            <b>Option #2:</b> If the developer has installed a web server on the same computer as Visual Studio (for 
            example: Internet Information Server (IIS)), then they can place the KML/KMZ file in an application 
            directory of their local web server (i.e. http://localhost). Using this option has the additional requirements of:
            </para>
            <list type="bullet">
              <item>Setting up the correct MIME type on the web server to handle KML/KMZ files</item>
              <item>Adding a crossdomain.xml file to the root of the web server</item>
              <item>Making use of a proxy to avoid Security Exception error messages</item>
            </list>
            <para>
            <b>NOTE:</b> WPF does not use proxies so the use of KmlLayer.ProxyUrl is not necessary (even though the local KML 
            file may have resource links (i.e. http://) to locations outside of the local network).
            </para>
            </remarks>
            <seealso cref="M:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.SetSource(System.IO.Stream)"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ProxyUrl">
            <summary>
            Optional. Gets or sets the URL to a proxy service that brokers Web requests between the client application 
            and a KML file.  Use a proxy service when the KML file is not hosted on a site that provides
            a cross domain policy file (clientaccesspolicy.xml or crossdomain.xml).
            </summary>
            <remarks>
            <para>
            Accessing a KmlLayer is unique in that ArcGIS Server is not required to view geographic information. Since 
            the KmlLayer is based upon a KML or KMZ file, all that is required is a web server to host the KML/KMZ file. 
            <b>NOTE:</b> ArcGIS Server has the ability to host geographic web services created in ArcMap as native 
            KML/KMZ files. 
            </para>
            <para>
            Developers who wish to test the KmlLayer functionality using KML/KMZ files locally on their 
            development machine have the following options:
            </para>
            <para>
            <b>Option #1:</b> Developers can place a KML/KMZ file anywhere on the local hard drive and provide the file 
            path as the KmlLayer.Url (example: Url="C:\TEST_KML_FILES\Test.kml").
            </para>
            <para>
            <b>Option #2:</b> If the developer has installed a web server on the same computer as Visual Studio (for 
            example: Internet Information Server (IIS)), then they can place the KML/KMZ file in an application 
            directory of their local web server (i.e. http://localhost). Using this option has the additional requirements of:
            </para>
            <list type="bullet">
              <item>Setting up the correct MIME type on the web server to handle KML/KMZ files</item>
              <item>Adding a crossdomain.xml file to the root of the web server</item>
              <item>Making use of a proxy to avoid Security Exception error messages</item>
            </list>
            <para>
            <b>NOTE:</b> WPF does not use proxies so the use of KmlLayer.ProxyUrl is not necessary (even though the local KML 
            file may have resource links (i.e. http://) to locations outside of the local network).
            </para>
            </remarks>
            <value>The Proxy URL string.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.DisableClientCaching">
            <summary>Disables caching an KLM document on the client.</summary>
            <remarks>
            <para>
            The default value is false. If true, adds a timestamp parameter ("_ts") to the request to prevent 
            loading a KML document from the browser's cache.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.MapTip">
            <summary>
            Gets or sets the MapTip displayed when the mouse hovers on a 
            <see cref="T:ESRI.ArcGIS.Client.Graphic">Graphic</see> in the KmlLayer (or its sub-layers).
            </summary>
            <seealso cref="P:ESRI.ArcGIS.Client.GraphicsLayer.MapTip"/>
            <remarks>
            <para>
            A KmlLayer.MapTip is a FrameworkElement that displays a visual popup containing information associated 
            with a Graphic. Defining the User Interface (UI) look of the FrameworkElement for a KmlLayer.MapTip can 
            be done in either XAML (see the code example in this document) or code-behind.
            </para>
            <para>        
            There are several sources of where the information that is displayed in a KmlLayer.MapTip can come from:
            <list type="bullet">
            <item>
            The information is stored in the 
            <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Graphic.Attributes</see> of the KmlLayer.
            </item>
            <item>The information is hard coded</item>
            <item>The information is generated on the fly based upon user interaction with the Map</item>
            </list>
            </para>
            <para>
            You can use a binding expression in XAML to bind the Attributes of the GraphicsLayer (embedded in the KmlLayer) to the 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.datacontext(v=vs.95).aspx" target="_blank">DataContext</a> 
            Property of the Graphic. The general usage syntax follows the pattern:<br></br>
            <code lang="XAML">
            &lt;esri:KmlLayer&gt;
              &lt;esri:KmlLayer.MapTip&gt;
                &lt;StackPanel Orientation="Horizontal" Background="White"&gt;
                  &lt;TextBlock Text="KML Placemark Name:" /&gt;
                  &lt;TextBlock Text="{Binding [SomeAttributeName]}" /&gt;
                &lt;/StackPanel&gt;
              &lt;/esri:KmlLayer.MapTip&gt;
            &lt;esri:KmlLayer&gt;
            </code>
            </para>
            <para>
            <b>Tip:</b> Developers can perform DataContext binding directly to 
            Dictionary Keys by specifying the Key name in brackets. Therefore when binding the DataContext of 
            a KmlLayer.MapTip to a specific attribute name in the Graphic.Attributes (which is a Dictionary), 
            encase the attribute name in square brackets (i.e. []). Example: 
            <b>&lt;TextBlock Text="{Binding [name]}" /&gt;</b> or the slightly more verbose version 
            <b>&lt;TextBlock Text="{Binding Path=[name]}" /&gt;</b>).
            </para>
            <para>
            The following KML tags map 
            to Attributes in a GraphicsLayer that can be used for binding to a KmlLayer.MapTip: &lt;atom:author&gt; 'name' 
            attribute, &lt;atom:link&gt; 'href' attribute, ' &lt;atom:name&gt; 'href' attribute, &lt;BalloonStyle&gt;&lt;text&gt; 
            information, &lt;description&gt; information, &lt;name&gt;, and &lt;ExtendedData&gt;.
            </para>
            <para>
            The &lt;ExtendedData&gt; tag maps internally to the 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData">ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData</see> 
            Class. Each KmlExtendedData object has three Properties: 'DisplayName', 'Name', and 'Value' that can 
            have attribute information. In order to use binding from a KmlLayer.MapTip to a KmlExtendedData object, 
            developers must create their own custom converter. See the code example in this document for one possible 
            way to use a custom converter for the KmlExtendedData Class. Additional discussion on the use of the 
            KML &lt;ExtendedData&gt; tags can also be found in <b>ArcGIS Resource Center</b> in the Forum thread entitled: 
            <a href="http://forums.arcgis.com/threads/27927-KMLLayer-use-of-identify-or-maptips" target="_blank">KMLLayer use of identify or maptips</a>.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.Graphics">
            <summary>
            Gets the graphics from all sublayers of this KML layer.
            </summary>
            <remarks>Only the graphics already downloaded are returned.</remarks>
            <value>The graphics.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.FullExtent">
            <summary>
            The full extent of the layer
            </summary>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.Name">
            <summary>
            Gets the name of the KML document.
            </summary>
            <value>The name.</value>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            When the application starts, click the Button to load a KmlLayer in the Map. Then click on any child 
            KmlLayer.Name in the ListBox (Note: there could be more than one depending on the KmlLayer loaded by the 
            Button). This will cause the Map to zoom to the general area of the child KmlLayer and display detailed 
            information (e.g. geometry type, symbology, and any attribute information).
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Digging deep into the KmlLayer sub-layers to get detailed information like: geometry, symbology, and attributes." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.KmlLayer.Name.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="356,144,0,0" Name="Map1" VerticalAlignment="Top" 
                        WrapAround="True" Height="204" Width="350" &gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:LayerCollection&gt;
                  
                    &lt;!-- Add a background ArcGISTiledMapServiceLayer for visual reference. --&gt;
                    &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
                      
                  &lt;/esri:LayerCollection&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button that has the Click event wired up. The button will add a KmlLayer via the code-behind. --&gt;
              &lt;Button Content="Step 1 - Add a KmlLayer to the Map." Height="23" HorizontalAlignment="Left" 
                      Margin="0,144,0,0" Name="Button1" VerticalAlignment="Top" Width="350" Click="Button1_Click"/&gt;
              
              &lt;!-- Add a TextBlock to give the user instructions to click on the KmlLayer.Name to see detailed information. --&gt;
              &lt;TextBlock Height="67" HorizontalAlignment="Left" Margin="0,173,0,0" Name="TextBlock2" VerticalAlignment="Top" 
                         Width="350" TextWrapping="Wrap"
                         Text="Step 2 - Click on a sub KmlLayer.Name in the ListBox (below) to zoom to the extent of that sub KmlLayer and display it's detailed information like: geometry, symbology, and attributes." /&gt;
              
              &lt;!-- Add a ListBox. --&gt;
              &lt;ListBox Height="102" HorizontalAlignment="Left" Margin="0,246,0,0" Name="ListBox1" 
                       VerticalAlignment="Top" Width="350" SelectionChanged="ListBox1_SelectionChanged"/&gt;
              
              &lt;!-- Add a Textbox to display the KmlLayer sub-layers. --&gt;
              &lt;TextBox Height="246" HorizontalAlignment="Left" Margin="0,354,0,0" Name="TextBox1" VerticalAlignment="Top" 
                       Width="706" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="138" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="706" 
                 TextWrapping="Wrap" Text="When the application starts, click the Button to load a KmlLayer in the Map.
                 Then click on any child KmlLayer.Name in the ListBox (Note: there could be more than one depending on the 
                 KmlLayer loaded by the Button). This will cause the Map to zoom to the general area of the child KmlLayer
                 and display detailed information (e.g. geometry type, symbology, and any attribute information)." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function loads a KmlLayer.
              
              // Create a new KmlLayer object.
              ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer theKmlLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer();
              
              // Set an initial ID.
              theKmlLayer.ID = "KML Sample Data";
              
              // Provide a Url for the KML/KMZ files to test.
              theKmlLayer.Url = new Uri("http://kml-samples.googlecode.com/svn/trunk/kml/ExtendedData/lincoln-park-gc-style.kml");
              
              // A few other public KML/KMZ layers to try too!
              //theKmlLayer.Url = new Uri("http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-age_src.kmz");
              //theKmlLayer.Url = new Uri("http://earthquake.usgs.gov/regional/nca/bayarea/kml/quads.kmz");
              
              // Need to use a ProxyUrl to access the data since it is not in our local network.
              theKmlLayer.ProxyUrl = "http://serverapps.esri.com/SilverlightDemos/ProxyPage/proxy.ashx";
              
              // Wire up an InitializationFailed Event Handler to catch any problems.
              theKmlLayer.InitializationFailed += kmlLayer1_InitializationFailed;
              
              // Wire up the Initialized Event Handler that will list all of the visible sub-layers.
              theKmlLayer.Initialized += kmlLayer1_Initialized;
              
              // Add the KmlLayer to the Map Control.
              Map1.Layers.Add(theKmlLayer);
            }
              
            private void kmlLayer1_InitializationFailed(object sender, EventArgs e)
            {
              // Display a MessageBox with Error information if there is a problem loading the KmlLayer. 
              ESRI.ArcGIS.Client.Layer theLayer = (ESRI.ArcGIS.Client.Layer)sender;
              MessageBox.Show("Error initializing layer: " + theLayer.InitializationFailure.Message);
            }
              
            private void kmlLayer1_Initialized(object sender, EventArgs e)
            {
              // Get the KmlLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer theKmlLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer)sender;
              
              // Obtain the ChildLayers (i.e. GroupLayer) from the KmlLayer.
              ESRI.ArcGIS.Client.LayerCollection theLayerCollection = theKmlLayer.ChildLayers;
              
              // Loop through the ChildLayers and display the Layer.ID in the ListBox.
              foreach (ESRI.ArcGIS.Client.Layer theLayer in theLayerCollection)
              {
                string theLayerID = theLayer.ID;
                ListBox1.Items.Add(theLayerID);
                
                // TODO: You could add more logic here to recursively turn on the Visibility of the sub-Layers
                // so that they could be interrogated as well. Sometimes KML/KMZ authors intentionally turn off
                // the Visibility but they could have goody information that can be explored.
              }
            }
              
            private void ListBox1_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
            {
              // This function runs when the user clicks on the name of one of the visible sub-layers of the KmlLayer in the ListBox.
              
              // Clear out any previous information in the TextBox.
              TextBox1.Text = "";
              
              // Get the name of the KmlLayer sub-layer.
              string listbox_LayerName = ListBox1.SelectedItem.ToString();
              
              // Create a new StringBuilder to display information about the KmlLayer back to the user.
              System.Text.StringBuilder sb = new System.Text.StringBuilder();
              
              // Set an initial level in the KmlLayer sub-layer hierarchy.
              int level = 0;
              
              // Get the KmlLayer in the in the Map.
              ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer theKmlLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer)(Map1.Layers[1]);
              
              // Add the top  level (Parent) information about the KmlLayer to the StringBuilder. 
              sb.Append("KmlLayer Name (Parent - Level " + level.ToString() + "): " + theKmlLayer.Name + Environment.NewLine);
              sb.Append("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + Environment.NewLine);
              sb.Append(Environment.NewLine);
              
              // Get the child sub-layers (i.e. GroupLayer) of the KmlLayer.
              ESRI.ArcGIS.Client.LayerCollection theLayerCollection = theKmlLayer.ChildLayers;
              
              // Loop through all of the child sub-layers.
              foreach (ESRI.ArcGIS.Client.Layer theLayer in theLayerCollection)
              {
                // Get the Layer.ID
                string theLayerID = theLayer.ID;
                
                // If we have a match with the what was chosen in the ListBox.
                if (theLayerID == listbox_LayerName)
                {
                  // Zoom to the FullExtent (and then expanded by 50%) of the Layer chosen in the Listbox .
                  // User TODO: Watch out for single point layers. Their extent will return an Envelope 
                  // that is a Point and not an area! More coding on your own.
                  Map1.Extent = theLayer.FullExtent.Expand(1.5);
                  
                  // Go into a recursive function that gets details about the sub-layer.
                  sb.Append(GoDeep(theLayer, 1)); // 1 is the intial level
                }
              }
              
              // Put the StringBuilder information into the TextBox. 
              TextBox1.Text = sb.ToString();
            }
              
            // A helper object to track which sub-layer object we are working on.
            public class SuperObject
            {
              public object theObjects;
              public int theLevel;
            }
              
            public string GoDeep(object theObject, int theLevel)
            {
              // This is a recursive function that gets details about a specific sub-layer.
              
              // If we go more than one time in this recursive function, the SuperObject helps
              // delinate which sub-layer we are operating on.
              if (theObject is SuperObject)
              {
                SuperObject theSuperObject = (SuperObject)theObject;
                theObject = theSuperObject.theObjects;
                theLevel = theSuperObject.theLevel;
              }
              
              // Create a new StringBuilder object to hold the detailed information about the sub-layer.
              Text.StringBuilder sb = new Text.StringBuilder();
              
              // The sub-layer that is passed into this recursive function could be any number of
              // Layer types. Branch into the correct If statement depending on what type of
              // object we are dealing with.
              
              if (theObject is ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer)
              {
                // We have a KmlLayer type of object. Will need to recursively dig into more sub-layers 
                // in order to display details that we are interested in.
                
                // Get the KmlLayer.
                ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer theKmlLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer)theObject;
                
                // Get the KmlLayer's child sub-layers.
                ESRI.ArcGIS.Client.LayerCollection theLayerCollection = theKmlLayer.ChildLayers;
                
                // Add some KmlLayer information into the StringBuilder.
                sb.Append("KmlLayer Name (Level " + theLevel.ToString() + "): " + theKmlLayer.ID + Environment.NewLine);
                sb.Append("##############################################" + Environment.NewLine);
                sb.Append(Environment.NewLine);
                
                // Loop through all of the sub-layers in the KmlLayer.
                foreach (object theObject2 in theLayerCollection)
                {
                  // Create a SuperObject to perform the recursive analysis.
                  SuperObject theRecursive_SuperObject = new SuperObject();
                  theRecursive_SuperObject.theObjects = theObject2;
                  theRecursive_SuperObject.theLevel = theLevel + 1;
                  
                  // Add detailed sub-layer information to the StringBuilder as a result of a recursive operation.
                  sb.Append(GoDeep(theRecursive_SuperObject, theLevel));
                }
              }
              else if (theObject is ESRI.ArcGIS.Client.GraphicsLayer)
              {
                // We have a GraphicsLayer type of object. 
                
                // Display detailed information about each Graphic in the GraphicsLayer
                ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)theObject;
                string theGraphicsLayerID = theGraphicsLayer.ID;
                
                // Display overall information on the number of Graphics in the GraphicsLayer.
                sb.Append("GraphicsLayer (Level " + theLevel.ToString() + "): " + theGraphicsLayerID + Environment.NewLine);
                sb.Append("================================================" + Environment.NewLine);
                sb.Append("Number of Graphics: " + theGraphicsLayer.Graphics.Count.ToString() + Environment.NewLine);
                sb.Append(Environment.NewLine);
                
                // A counter for the number of Graphics in the GraphicsLayer.
                int graphicsCount = 0;
                
                // Loop through each Graphic in the GraphicsLayer.
                foreach (ESRI.ArcGIS.Client.Graphic theGraphic in theGraphicsLayer)
                {
                  // Append which Graphic we are operating on in the StringBuilder.
                  sb.Append("Graphic #" + graphicsCount.ToString() + Environment.NewLine);
                  
                  // Increment the Graphics counter.
                  graphicsCount = graphicsCount + 1;
                  
                  // ---------------------------------------------------------------------------------------
                  
                  // Append the Geometry Type of the Graphic to the StringBuilder.
                  sb.Append("Geometry Type: " + theGraphic.Geometry.GetType().ToString() + Environment.NewLine);
                  
                  // Interrogate the specific Geometry Type of the Graphic to display it's coordinate information.
                  if (theGraphic.Geometry is ESRI.ArcGIS.Client.Geometry.MapPoint)
                  {
                    // We have a MapPoint. Display its coordinate information in the StringBuilder.
                    ESRI.ArcGIS.Client.Geometry.MapPoint theMapPoint = (ESRI.ArcGIS.Client.Geometry.MapPoint)theGraphic.Geometry;
                    sb.Append("Coordinates: " + theMapPoint.ToString() + Environment.NewLine);
                  }
                  else if (theGraphic.Geometry is ESRI.ArcGIS.Client.Geometry.Polyline)
                  {
                    // We have a Polyline. Display its coordinate information in the StringBuilder.
                    ESRI.ArcGIS.Client.Geometry.Polyline thePolyline = (ESRI.ArcGIS.Client.Geometry.Polyline)theGraphic.Geometry;
                    string polylineString = "";
                    System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; theObservableCollection_PointCollection = thePolyline.Paths;
                    foreach (ESRI.ArcGIS.Client.Geometry.PointCollection thePointCollection in theObservableCollection_PointCollection)
                    {
                      foreach (ESRI.ArcGIS.Client.Geometry.MapPoint theMapPoint in thePointCollection)
                      {
                        polylineString = polylineString + theMapPoint.ToString() + ", ";
                      }
                    }
                    sb.Append("Coordinates: " + polylineString + Environment.NewLine);
                  }
                  else if (theGraphic.Geometry is ESRI.ArcGIS.Client.Geometry.Polygon)
                  {
                    // We have a Polygon. Display its coordinate information in the StringBuilder.
                    ESRI.ArcGIS.Client.Geometry.Polygon thePolygon = (ESRI.ArcGIS.Client.Geometry.Polygon)theGraphic.Geometry;
                    string polygonString = "";
                    System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; theObservableCollection_PointCollection = thePolygon.Rings;
                    foreach (ESRI.ArcGIS.Client.Geometry.PointCollection thePointCollection in theObservableCollection_PointCollection)
                    {
                      foreach (ESRI.ArcGIS.Client.Geometry.MapPoint theMapPoint in thePointCollection)
                      {
                        polygonString = polygonString + theMapPoint.ToString() + ", ";
                      }
                    }
                    sb.Append("Coordinates: " + polygonString + Environment.NewLine);
                  }
                  
                  // -------------------------------------------------------------------------------------
                  
                  // Append the symbology of the Graphic into the StringBuilder.
                  ESRI.ArcGIS.Client.Symbols.Symbol theSymbol = theGraphic.Symbol;
                  sb.Append("Symbol Type: " + theSymbol.GetType().ToString() + Environment.NewLine);
                  
                  // -------------------------------------------------------------------------------------
                  
                  // Interrogate the Attributes of the Graphic.
                  
                  // Get the Dictionary of Attributes.
                  System.Collections.Generic.IDictionary&lt;string, object&gt; theAttributeDictionary = theGraphic.Attributes;
                  
                  // Get the Keys for the Dictionary.
                  System.Collections.Generic.ICollection&lt;string&gt; theAttributeKeys = theAttributeDictionary.Keys;
                  
                  // Loop through each Key in the Dictionary of Attributes. 
                  foreach (string theKey in theAttributeKeys)
                  {
                    // Get the Value of one Attribute. It could be any number of Types! 
                    object theValue = theAttributeDictionary[theKey];
                    
                    // Get the Type of the Value of the Attribute (we could have a more complex object than a String).
                    System.Type theType = theValue.GetType();
                    
                    // Interrogate the Value Type.
                    if (theValue is System.Collections.Generic.List&lt;ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData&gt;)
                    {
                      // We have a List&lt;KmlExtendedData&gt; objects (most likely a result of the &lt;ExtendedData&gt; tag in KML).
                      
                      // Get the List&lt;KmlExtendedData&gt; object.
                      System.Collections.Generic.List&lt;ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData&gt; theList = null;
                      theList = (System.Collections.Generic.List&lt;ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData&gt;)theValue;
                      
                      // Loop through each KmlExtendedData object in the List&lt;KmlExtendedData&gt;.
                      foreach (ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData oneKmlExtendedData in theList)
                      {
                        // Append the Attribute information of the KmlExtendedData into the StringBuilder.
                        sb.Append("AttributeKey: " + "KmlExtendedData.DisplayName" + ", AttributeValue: " + oneKmlExtendedData.DisplayName + Environment.NewLine);
                        sb.Append("AttributeKey: " + "KmlExtendedData.Name" + ", AttributeValue: " + oneKmlExtendedData.Name + Environment.NewLine);
                        sb.Append("AttributeKey: " + "KmlExtendedData.Value" + ", AttributeValue: " + oneKmlExtendedData.Value + Environment.NewLine);
                        sb.Append("----------------------------------------------------" + Environment.NewLine);
                      }
                    }
                    else if (theValue is string)
                    {
                      // We have a String object.
                      
                      // This could come from a number of KML tags (ex: &lt;atom:author&gt; 'name' attribute; &lt;atom:link&gt; 'href' attribute;
                      // &lt;atom:name&gt; 'href' attribute, &lt;BalloonStyle&gt;&lt;text&gt; information, &lt;description&gt; information; and &lt;name&gt; information).
                      sb.Append("AttributeKey: " + theKey + ", AttributeValue: " + theValue.ToString() + Environment.NewLine);
                      sb.Append("----------------------------------------------------" + Environment.NewLine);
                     }
                     else
                     {
                      // We have some other Type of object. TODO: User to interrogate further!
                     }
                  }  
                  sb.Append(Environment.NewLine);
                }
              }
              else if (theObject is ESRI.ArcGIS.Client.ElementLayer)
              {
                // We have an ElementLayer type of object. 
                
                // Display detailed information about each ElementLayer
                ESRI.ArcGIS.Client.ElementLayer theElementLayer = (ESRI.ArcGIS.Client.ElementLayer)theObject;
                
                // Append the overall information about the ElementLayer in the StringBuilder.
                string theElementLayerID = theElementLayer.ID;
                sb.Append("ElementLayer (Level " + theLevel.ToString() + "): " + theElementLayerID + Environment.NewLine);
                sb.Append("=============================================" + Environment.NewLine);
                sb.Append("Number of Elements: " + theElementLayer.Children.Count.ToString() + Environment.NewLine);
                
                // Append the Extent information about the ElementLayer int the String Builder.
                ESRI.ArcGIS.Client.Geometry.Envelope elementLayerFullExtent = theElementLayer.FullExtent;
                sb.Append("FullExtent: " + elementLayerFullExtent.ToString() + Environment.NewLine);
                sb.Append(Environment.NewLine);
                
                // Loop through each UIElement in the ElementLayer.
                foreach (System.Windows.UIElement oneElement in theElementLayer.Children)
                {
                  // Append information about each UIElement in the StringBuilder.
                  sb.Append("ElementType: " + oneElement.GetType().ToString() + Environment.NewLine);
                  sb.Append("Opacity: " + oneElement.Opacity.ToString() + Environment.NewLine);
                  sb.Append("Visibility: " + oneElement.Visibility.ToString() + Environment.NewLine);
                  sb.Append("Envelope: " + ESRI.ArcGIS.Client.ElementLayer.GetEnvelope(oneElement).ToString() + Environment.NewLine);
                  sb.Append(Environment.NewLine);
                }
              }
              // Return the StringBuilder information back to the caller.
              return sb.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' This function loads a KmlLayer.
              
              ' Create a new KmlLayer object.
              Dim theKmlLayer As New ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer
              
              ' Set an initial ID.
              theKmlLayer.ID = "KML Sample Data"
              
              ' Provide a Url for the KML/KMZ files to test.
              theKmlLayer.Url = New Uri("http://kml-samples.googlecode.com/svn/trunk/kml/ExtendedData/lincoln-park-gc-style.kml")
              
              ' A few other public KML/KMZ layers to try too!
              'theKmlLayer.Url = New Uri("http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-age_src.kmz")
              'theKmlLayer.Url = New Uri("http://earthquake.usgs.gov/regional/nca/bayarea/kml/quads.kmz")
              
              ' Need to use a ProxyUrl to access the data since it is not in our local network.
              theKmlLayer.ProxyUrl = "http://serverapps.esri.com/SilverlightDemos/ProxyPage/proxy.ashx"
              
              ' Wire up an InitializationFailed Event Handler to catch any problems.
              AddHandler theKmlLayer.InitializationFailed, AddressOf kmlLayer1_InitializationFailed
              
              ' Wire up the Initialized Event Handler that will list all of the visible sub-layers.
              AddHandler theKmlLayer.Initialized, AddressOf kmlLayer1_Initialized
              
              ' Add the KmlLayer to the Map Control.
              Map1.Layers.Add(theKmlLayer)
              
            End Sub
            
            Private Sub kmlLayer1_InitializationFailed(sender As Object, e As EventArgs)
              
              ' Display a MessageBox with Error information if there is a problem loading the KmlLayer. 
              Dim theLayer As ESRI.ArcGIS.Client.Layer = CType(sender, ESRI.ArcGIS.Client.Layer)
              MessageBox.Show("Error initializing layer: " + theLayer.InitializationFailure.Message)
              
            End Sub
              
            Private Sub kmlLayer1_Initialized(sender As Object, e As EventArgs)
              
              ' Get the KmlLayer.
              Dim theKmlLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer = CType(sender, ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer)
              
              ' Obtain the ChildLayers (i.e. GroupLayer) from the KmlLayer.
              Dim theLayerCollection As ESRI.ArcGIS.Client.LayerCollection = theKmlLayer.ChildLayers
              
              ' Loop through the ChildLayers and display the Layer.ID in the ListBox.
              For Each theLayer As ESRI.ArcGIS.Client.Layer In theLayerCollection
                Dim theLayerID As String = theLayer.ID
                ListBox1.Items.Add(theLayerID)
                
                ' TODO: You could add more logic here to recursively turn on the Visibility of the sub-Layers
                ' so that they could be interrogated as well. Sometimes KML/KMZ authors intentionally turn off
                ' the Visibility but they could have goody information that can be explored.
              Next
              
            End Sub
            
            Private Sub ListBox1_SelectionChanged(sender As System.Object, e As System.Windows.Controls.SelectionChangedEventArgs)
              
              ' This function runs when the user clicks on the name of one of the visible sub-layers of the KmlLayer in the ListBox.
              
              ' Clear out any previous information in the TextBox.
              TextBox1.Text = ""
              
              ' Get the name of the KmlLayer sub-layer.
              Dim listbox_LayerName As String = ListBox1.SelectedItem.ToString
              
              ' Create a new StringBuilder to display information about the KmlLayer back to the user.
              Dim sb As New Text.StringBuilder
              
              ' Set an initial level in the KmlLayer sub-layer hierarchy.
              Dim level As Integer = 0
              
              ' Get the KmlLayer in the in the Map.
              Dim theKmlLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer = CType(Map1.Layers(1), ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer)
              
              ' Add the top  level (Parent) information about the KmlLayer to the StringBuilder. 
              sb.Append("KmlLayer Name (Parent - Level " + level.ToString + "): " + theKmlLayer.Name + vbCrLf)
              sb.Append("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + vbCrLf)
              sb.Append(vbCrLf)
              
              ' Get the child sub-layers (i.e. GroupLayer) of the KmlLayer.
              Dim theLayerCollection As ESRI.ArcGIS.Client.LayerCollection = theKmlLayer.ChildLayers
              
              ' Loop through all of the child sub-layers.
              For Each theLayer As ESRI.ArcGIS.Client.Layer In theLayerCollection
                
                ' Get the Layer.ID
                Dim theLayerID As String = theLayer.ID
                
                ' If we have a match with the what was chosen in the ListBox.
                If theLayerID = listbox_LayerName Then
                  
                  ' Zoom to the FullExtent (and then expanded by 50%) of the Layer chosen in the Listbox .
                  ' User TODO: Watch out for single point layers. Their extent will return an Envelope 
                  ' that is a Point and not an area! More coding on your own.
                  Map1.Extent = theLayer.FullExtent.Expand(1.5)
                  
                  ' Go into a recursive function that gets details about the sub-layer.
                  sb.Append(GoDeep(theLayer, 1)) ' 1 is the intial level
                  
                End If
              Next
              
              ' Put the StringBuilder information into the TextBox. 
              TextBox1.Text = sb.ToString
              
            End Sub
              
            ' A helper object to track which sub-layer object we are working on.
            Public Class SuperObject
              Public theObjects As Object
              Public theLevel As Integer
            End Class
              
            Public Function GoDeep(ByVal theObject As Object, ByVal theLevel As Integer) As String
              
              ' This is a recursive function that gets details about a specific sub-layer.
              
              ' If we go more than one time in this recursive function, the SuperObject helps
              ' delinate which sub-layer we are operating on.
              If TypeOf theObject Is SuperObject Then
                Dim theSuperObject As SuperObject = CType(theObject, SuperObject)
                theObject = theSuperObject.theObjects
                theLevel = theSuperObject.theLevel
              End If
              
              ' Create a new StringBuilder object to hold the detailed information about the sub-layer.
              Dim sb As New Text.StringBuilder
              
              ' The sub-layer that is passed into this recursive function could be any number of
              ' Layer types. Branch into the correct If statement depending on what type of
              ' object we are dealing with.
              
              If TypeOf theObject Is ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer Then
                
                ' We have a KmlLayer type of object. Will need to recursively dig into more sub-layers 
                ' in order to display details that we are interested in.
                
                ' Get the KmlLayer.
                Dim theKmlLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer = CType(theObject, ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer)
                
                ' Get the KmlLayer's child sub-layers.
                Dim theLayerCollection As ESRI.ArcGIS.Client.LayerCollection = theKmlLayer.ChildLayers
                
                ' Add some KmlLayer information into the StringBuilder.
                sb.Append("KmlLayer Name (Level " + theLevel.ToString + "): " + theKmlLayer.ID + vbCrLf)
                sb.Append("##############################################" + vbCrLf)
                sb.Append(vbCrLf)
                
                ' Loop through all of the sub-layers in the KmlLayer.
                For Each theObject2 As Object In theLayerCollection
                  
                  ' Create a SuperObject to perform the recursive analysis.
                  Dim theRecursive_SuperObject As New SuperObject
                  theRecursive_SuperObject.theObjects = theObject2
                  theRecursive_SuperObject.theLevel = theLevel + 1
                  
                  ' Add detailed sub-layer information to the StringBuilder as a result of a recursive operation.
                  sb.Append(GoDeep(theRecursive_SuperObject, theLevel))
                  
                Next
                
              ElseIf TypeOf theObject Is ESRI.ArcGIS.Client.GraphicsLayer Then
                
                ' We have a GraphicsLayer type of object. 
                  
                ' Display detailed information about each Graphic in the GraphicsLayer
                Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = CType(theObject, ESRI.ArcGIS.Client.GraphicsLayer)
                Dim theGraphicsLayerID As String = theGraphicsLayer.ID
                
                ' Display overall information on the number of Graphics in the GraphicsLayer.
                sb.Append("GraphicsLayer (Level " + theLevel.ToString + "): " + theGraphicsLayerID + vbCrLf)
                sb.Append("================================================" + vbCrLf)
                sb.Append("Number of Graphics: " + theGraphicsLayer.Graphics.Count.ToString + vbCrLf)
                sb.Append(vbCrLf)
                
                ' A counter for the number of Graphics in the GraphicsLayer.
                Dim graphicsCount As Integer = 0
                
                ' Loop through each Graphic in the GraphicsLayer.
                For Each theGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicsLayer
                  
                  ' Append which Graphic we are operating on in the StringBuilder.
                  sb.Append("Graphic #" + graphicsCount.ToString + vbCrLf)
                  
                  ' Increment the Graphics counter.
                  graphicsCount = graphicsCount + 1
                  
                  ' ---------------------------------------------------------------------------------------
                  
                  ' Append the Geometry Type of the Graphic to the StringBuilder.
                  sb.Append("Geometry Type: " + theGraphic.Geometry.GetType.ToString + vbCrLf)
                  
                  ' Interrogate the specific Geometry Type of the Graphic to display it's coordinate information.
                  If TypeOf theGraphic.Geometry Is ESRI.ArcGIS.Client.Geometry.MapPoint Then
                    
                    ' We have a MapPoint. Display its coordinate information in the StringBuilder.
                    Dim theMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint = CType(theGraphic.Geometry, ESRI.ArcGIS.Client.Geometry.MapPoint)
                    sb.Append("Coordinates: " + theMapPoint.ToString + vbCrLf)
                    
                  ElseIf TypeOf theGraphic.Geometry Is ESRI.ArcGIS.Client.Geometry.Polyline Then
                    
                    ' We have a Polyline. Display its coordinate information in the StringBuilder.
                    Dim thePolyline As ESRI.ArcGIS.Client.Geometry.Polyline = CType(theGraphic.Geometry, ESRI.ArcGIS.Client.Geometry.Polyline)
                    Dim polylineString As String = ""
                    Dim theObservableCollection_PointCollection As System.Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection) = thePolyline.Paths
                    For Each thePointCollection As ESRI.ArcGIS.Client.Geometry.PointCollection In theObservableCollection_PointCollection
                      For Each theMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint In thePointCollection
                        polylineString = polylineString + theMapPoint.ToString + ", "
                      Next
                    Next
                    sb.Append("Coordinates: " + polylineString + vbCrLf)
                    
                  ElseIf TypeOf theGraphic.Geometry Is ESRI.ArcGIS.Client.Geometry.Polygon Then
                    
                    ' We have a Polygon. Display its coordinate information in the StringBuilder.
                    Dim thePolygon As ESRI.ArcGIS.Client.Geometry.Polygon = CType(theGraphic.Geometry, ESRI.ArcGIS.Client.Geometry.Polygon)
                    Dim polygonString As String = ""
                    Dim theObservableCollection_PointCollection As System.Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection) = thePolygon.Rings
                    For Each thePointCollection As ESRI.ArcGIS.Client.Geometry.PointCollection In theObservableCollection_PointCollection
                      For Each theMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint In thePointCollection
                        polygonString = polygonString + theMapPoint.ToString + ", "
                      Next
                    Next
                    sb.Append("Coordinates: " + polygonString + vbCrLf)
                    
                  End If
                  
                  ' -------------------------------------------------------------------------------------
                  
                  ' Append the symbology of the Graphic into the StringBuilder.
                  Dim theSymbol As ESRI.ArcGIS.Client.Symbols.Symbol = theGraphic.Symbol
                  sb.Append("Symbol Type: " + theSymbol.GetType.ToString + vbCrLf)
                  
                  ' -------------------------------------------------------------------------------------
                  
                  ' Interrogate the Attributes of the Graphic.
                  
                  ' Get the Dictionary of Attributes.
                  Dim theAttributeDictionary As System.Collections.Generic.IDictionary(Of String, Object) = theGraphic.Attributes
                  
                  ' Get the Keys for the Dictionary.
                  Dim theAttributeKeys As System.Collections.Generic.ICollection(Of String) = theAttributeDictionary.Keys
                  
                  ' Loop through each Key in the Dictionary of Attributes. 
                  For Each theKey As String In theAttributeKeys
                    
                    ' Get the Value of one Attribute. It could be any number of Types! 
                    Dim theValue As Object = theAttributeDictionary.Item(theKey)
                     ' Get the Type of the Value of the Attribute (we could have a more complex object than a String).
                    Dim theType As System.Type = theValue.GetType
                      
                    ' Interrogate the Value Type.
                    If TypeOf theValue Is System.Collections.Generic.List(Of ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData) Then
                      
                      ' We have a List(Of KmlExtendedData) objects (most likely a result of the &lt;ExtendedData&gt; tag in KML).
                      
                      ' Get the List(Of KmlExtendedData) object.
                      Dim theList As System.Collections.Generic.List(Of ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData)
                      theList = CType(theValue, System.Collections.Generic.List(Of ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData))
                      
                      ' Loop through each KmlExtendedData object in the List(Of KmlExtendedData).
                      For Each oneKmlExtendedData As ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlExtendedData In theList
                      
                        ' Append the Attribute information of the KmlExtendedData into the StringBuilder.
                        sb.Append("AttributeKey: " + "KmlExtendedData.DisplayName" + ", AttributeValue: " + oneKmlExtendedData.DisplayName + vbCrLf)
                        sb.Append("AttributeKey: " + "KmlExtendedData.Name" + ", AttributeValue: " + oneKmlExtendedData.Name + vbCrLf)
                        sb.Append("AttributeKey: " + "KmlExtendedData.Value" + ", AttributeValue: " + oneKmlExtendedData.Value + vbCrLf)
                        sb.Append("----------------------------------------------------" + vbCrLf)
                        
                      Next
                      
                    ElseIf TypeOf theValue Is String Then
                      
                      ' We have a String object.
                      
                      ' This could come from a number of KML tags (ex: &lt;atom:author&gt; 'name' attribute; &lt;atom:link&gt; 'href' attribute;
                      ' &lt;atom:name&gt; 'href' attribute, &lt;BalloonStyle&gt;&lt;text&gt; information, &lt;description&gt; information; and &lt;name&gt; information).
                      sb.Append("AttributeKey: " + theKey + ", AttributeValue: " + theValue.ToString + vbCrLf)
                      sb.Append("----------------------------------------------------" + vbCrLf)
                      
                    Else
                      
                      ' We have some other Type of object. TODO: User to interrogate further!
                      
                    End If
                  Next
                    
                  sb.Append(vbCrLf)
                  
                Next
                
              ElseIf TypeOf theObject Is ESRI.ArcGIS.Client.ElementLayer Then
                
                ' We have an ElementLayer type of object. 
                
                ' Display detailed information about each ElementLayer
                Dim theElementLayer As ESRI.ArcGIS.Client.ElementLayer = CType(theObject, ESRI.ArcGIS.Client.ElementLayer)
                
                ' Append the overall information about the ElementLayer in the StringBuilder.
                Dim theElementLayerID As String = theElementLayer.ID
                sb.Append("ElementLayer (Level " + theLevel.ToString + "): " + theElementLayerID + vbCrLf)
                sb.Append("=============================================" + vbCrLf)
                sb.Append("Number of Elements: " + theElementLayer.Children.Count.ToString + vbCrLf)
                
                ' Append the Extent information about the ElementLayer int the String Builder.
                Dim elementLayerFullExtent As ESRI.ArcGIS.Client.Geometry.Envelope = theElementLayer.FullExtent
                sb.Append("FullExtent: " + elementLayerFullExtent.ToString + vbCrLf)
                sb.Append(vbCrLf)
                
                ' Loop through each UIElement in the ElementLayer.
                For Each oneElement As System.Windows.UIElement In theElementLayer.Children
                  
                  ' Append information about each UIElement in the StringBuilder.
                  sb.Append("ElementType: " + oneElement.GetType.ToString + vbCrLf)
                  sb.Append("Opacity: " + oneElement.Opacity.ToString + vbCrLf)
                  sb.Append("Visibility: " + oneElement.Visibility.ToString + vbCrLf)
                  sb.Append("Envelope: " + ESRI.ArcGIS.Client.ElementLayer.GetEnvelope(oneElement).ToString + vbCrLf)
                  sb.Append(vbCrLf)
                  
                Next
            
              End If
            
              ' Return the StringBuilder information back to the caller.
              Return sb.ToString
            
            End Function
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ProjectionService">
            <summary>
            Gets or sets the projection service used for projecting geometry in the data source
            to the map's spatial reference. 
            </summary>
            <remarks>
            If you are projecting between WGS84 Geographic coordinates (SRID=4326) and WebMercator
            or your source data is in the same projection as the map it's being displayed on, 
            there is no need to set this property.
            </remarks>
            <value>The projection service.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.VisibleLayers">
            <summary>
            Gets or sets the names of the KML sublayers that have to be initialized as visible.
            If this property is not set, the visibility defined in the KML document is used.
            </summary>
            <remarks>The wildcard "*" allows to set all descendant layers as visible.
            <para>
            For examples:
            <list type="bullet">
            <item>
            VisibleLayers="*" sets all sublayers as visible</item>
            <item>
            VisibleLayers="folder/*" set all sublayers under 'folder' as visible</item>
            <item>
            VisibleLayers="folder,folder/*" sets 'folder' and all its sublayers as visible</item>
            </list>
            </para>
            <para>Note that this list is a configuration property and doesn't return the sublayers that are currently visible.
            To know whether a sublayer is currently visible, you have to go through the layers hierarchy and get the current visibility of the layer.
            </para>
            </remarks>
            <value>The visible layers enumeration.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.RefreshInterval">
            <summary>
            Gets or sets the refresh interval.
            </summary>
            <value>The refresh interval.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.ParentLayer">
            <summary>
            Gets the parent layer in a hierarchy of KML Layers.
            </summary>
            <value>
            The parent KML layer or null if the layer is a root layer.
            </value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayerContext">
            <summary>
            Class with infos needed to be able to refresh and reparse a KML layer
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayerContext.Element">
            <summary>
            Gets or sets the element (document, folder or NetworkLink) corresponding to the KML layer..
            </summary>
            <value>The element.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayerContext.AtomAuthor">
            <summary>
            Gets or sets the atom author of the XElement or inherited from parents.
            </summary>
            <value>The atom author.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayerContext.AtomHref">
            <summary>
            Gets or sets the atom href of the XElement or inherited from parents.
            </summary>
            <value>The atom href.</value>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WebMercatorProjectionService.Project(ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Geometry.SpatialReference)">
            <summary>
            Projects the specified geometry.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="outSpatialReference">The out spatial reference.</param>
            <returns></returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlGraphicsLayer">
            <summary>
            KML GraphicsLayer subclass for allowing legend based on the styles
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlGraphicsLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of the layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol">
            <summary>
            Point symbol using a bitmap image for symbol
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.FillProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Fill"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.IconColorProperty">
            <summary>
            Identifies the <see cref="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.IconColorProperty"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.WidthProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Width"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.HeightProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Height"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.OpacityProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Opacity"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.HeadingProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Heading"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.ScaleProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Scale"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.TranslateXProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.TranslateX"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.TranslateYProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.TranslateY"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.EffectProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Effect"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Fill">
            <summary>
            Gets or sets Fill.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Opacity">
            <summary>
            Gets or sets the opacity of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Heading">
            <summary>
            Gets or sets the heading of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Scale">
            <summary>
            Gets or sets the scale of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.TranslateX">
            <summary>
            Gets or sets the translation along the X axis of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.TranslateY">
            <summary>
            Gets or sets the translation along the X axis of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlPlaceMarkerSymbol.Effect">
            <summary>
            Gets or sets the effect to apply to the image.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition">
            <summary>
            Converts a KML document into a FeatureDefinition.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.Convert(ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayerContext)">
            <summary>
            Takes features in the KML element and converts them into equivalent features
            and adds them to the FeatureDefinition.
            Only the direct children of the KML element are converted.
            </summary>
            <param name="context">Context containing the XElement with the KML definition to be converted.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.DownloadStyleAsync(System.String,System.Net.ICredentials,System.Action{ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle},System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Downloads KML file containing style, extracts style and creates feature definitions.
            </summary>
            <param name="styleUrl">Style id to locate in file.</param>
            <param name="credentials">The credentials.</param>
            <param name="callback">Callback to execture with the downloaded style</param>
            <param name="clientCertificate">The client certificate.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.StyleDownloaded(System.Object,System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Event handler invoked when an external KML file containing a style definition has been downloaded.
            </summary>
            <param name="sender">Sending object.</param>
            <param name="e">Event arguments including error information and the input stream.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.GetKmzContents(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile)">
            <summary>
            Processes each file in the ZIP stream, storing images in a dictionary and load the KML contents
            into an XDocument.
            </summary>
            <param name="zipFile">Decompressed stream from KMZ.</param>
            <returns>XDocument containing KML content from the KMZ source.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.GetFeatureType(System.Xml.Linq.XElement)">
            <summary>
            Extracts the feature element from the Placemark.
            </summary>
            <param name="element">Placemark node that may contain a supported feature type node.</param>
            <returns>XElement node containing a supported feature type definition.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractLatLonBox(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle,System.Xml.Linq.XElement)">
            <summary>
            Extracts a polygon from the input element and applies style information to the placemark descriptor.
            </summary>
            <param name="kmlStyle">KML Style information.</param>
            <param name="geomElement">Polygon geometry information.</param>
            <returns>A PlacemarkDescriptor object representing the feature.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractEnvelope(System.Xml.Linq.XElement)">
            <summary>
            Extracts an envelope from the input element.
            </summary>
            <param name="geomElement">LatLonBox geometry information.</param>
            <returns>An envelope.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractPolygon(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle,System.Xml.Linq.XElement)">
            <summary>
            Extracts a polygon from the input element and applies style information to the placemark descriptor.
            </summary>
            <param name="kmlStyle">KML Style information.</param>
            <param name="geomElement">Polygon geometry information.</param>
            <returns>A PlacemarkDescriptor object representing the feature.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractLinearRing(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle,System.Xml.Linq.XElement)">
            <summary>
            Extracts a linear ring from the input element and applies style information to the placemark descriptor.
            </summary>
            <param name="kmlStyle">KML Style information.</param>
            <param name="geomElement">Linear ring geometry information.</param>
            <returns>A PlacemarkDescriptor object representing the feature.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractPolyLine(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle,System.Xml.Linq.XElement)">
            <summary>
            Extracts a polyline from the input element and applies style information to the placemark descriptor.
            </summary>
            <param name="kmlStyle">KML Style information.</param>
            <param name="line">Polyline geometry information.</param>
            <returns>A PlacemarkDescriptor object representing the feature.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractPoint(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle,System.Xml.Linq.XElement)">
            <summary>
            Extracts a point from the input element and applies style information to the placemark descriptor.
            </summary>
            <param name="kmlStyle">KML Style information.</param>
            <param name="point">Point geometry information.</param>
            <returns>A PlacemarkDescriptor object representing the feature.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractRing(System.Xml.Linq.XElement)">
            <summary>
            Extracts a collection of points from a LinearRing definition.
            </summary>
            <param name="boundary">Outer or Inner boundary XElement object.</param>
            <returns>A PointCollection containing MapPoint objects.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractCoordinates(System.Xml.Linq.XElement)">
            <summary>
            Extracts the X and Y values from a comma delimited string containing multiple coordinates.
            </summary>
            <param name="coordinates">Comma delimited string containing multiple coordinate groups.</param>
            <returns>A PointCollection containing MapPoint objects.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractCoordinate(System.String)">
            <summary>
            Extracts the X and Y values from a comma delimited string containing a single coordinate.
            </summary>
            <param name="coordinate">Comma delimited string containing X, Y and Z values.</param>
            <returns>A MapPoint object with X and Y coordinate values assigned.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ExtractRegion(System.Xml.Linq.XElement)">
            <summary>
            Extracts the region from a KML feature (folder, document, networklink, placemark or groundoverlay)
            </summary>
            <param name="feature">The feature.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.GetStyleMapAsync(System.Xml.Linq.XElement,System.Xml.Linq.XDocument,System.Net.ICredentials,System.Action{ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle},System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Gets the 'normal' style of a style map.
            Getting this style may need recursive download.
            When the style is ready -> execute the callback.
            </summary>
            <remarks>
            The 'highlight' style is not used by the KmlLayer.
            </remarks>
            <param name="styleMap">The style map element to parse.</param>
            <param name="xDoc">The xDocument the style map is part of.</param>
            <param name="credentials">The credentials.</param>
            <param name="callback">The callback to call when the style is downloaded (if needed).</param>
            <param name="clientCertificate">The client certificate.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.GetStyle(System.Xml.Linq.XElement,ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KMLStyle)">
            <summary>
            Constructs a KMLStyle object that represents KML style contained in the input XElement.
            </summary>
            <param name="style">XElement containing KML style definition.</param>
            <param name="kmlStyle">KMLStyle object representing input style.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.StringToBool(System.String)">
            <summary>
            Converts a string containing an integer value into a boolean.
            </summary>
            <param name="s">String containing boolean in numeric format.</param>
            <returns>Boolean value extracted from the input string.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.GetColorFromHexString(System.String)">
            <summary>
            Converts hexadecimal color notation into equivalent Silverlight Color.
            </summary>
            <param name="s">Input color string in hexadecimal format.</param>
            <returns>Color object representing input string.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.ProxyUrl">
            <summary>
            Optional. Gets or sets the URL to a proxy service that brokers Web requests between the Silverlight 
            client and a KML file.  Use a proxy service when the KML file is not hosted on a site that provides
            a cross domain policy file (clientaccesspolicy.xml or crossdomain.xml).
            </summary>
            <value>The Proxy URL string.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.DownloadStyleState">
            <summary>
            This stores the state of the currently processed KML feature while its style information is
            downloaded from an external source.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.WaitHelper">
            <summary>
            Helper class to wait for the end of styles downloads
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.KmlToFeatureDefinition.WaitHelper.Wait">
            <summary>
            Waits for the styles.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.MultiplyBlendEffect">
            <summary>
            *FOR INTERNAL USE ONLY*
            Used to blend KML icons or ground overlays with the specified iconcolor.
            </summary>
            <remarks>
            The effect uses the pixel shader compiled file : MultiplyBlend.cso
            The source file MultiplyBlend.fx is provided for info. 
            In case it needs to be compiled it can be done with command like: "C:\Program Files (x86)\Windows Kits\8.1\bin\x64\fxc" /T ps_2_0 /E main /Fo”$(ProjectDir)/Kml/MultiplyBlend.cso” “$(ProjectDir)/Kml/MultiplyBlend.fx”
            </remarks>
            <exclude/>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.MultiplyBlendEffect.StaticPixelShader">
            <summary>
            A reference to the pixel shader used.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.MultiplyBlendEffect.#cctor">
            <summary>
            Creates an instance of the shader from the included pixel shader.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.MultiplyBlendEffect.BlendColorProperty">
            <summary>
            The blend color property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.MultiplyBlendEffect.InputProperty">
            <summary>
            The input property
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.MultiplyBlendEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.MultiplyBlendEffect.BlendColor">
            <summary>
            Gets or sets the blend color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.MultiplyBlendEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer">
            <summary>
            A layer that conforms to the <a href="http://www.openstreetmap.org">OpenStreetMap</a> standard. An 
            OpenStreetMapLayer is a cached service that accesses pre-created tiles from a cache on a server's hard 
            drive instead of dynamically rendering images.
            </summary>
            <remarks>
            <para>
            <a href="http://www.openstreetmap.org">OpenStreetMap</a> is an organization that provides free world-wide 
            tiled based map services to the public. OpenStreetMapLayers are specialized layers that consume web 
            services using the OpenStreetMap specification. A tiled map service means that map images are pre-created 
            on a server to improve drawing performance in a client application. Because the images are pre-created 
            cached tiles, re-projection on-the-fly to a different 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> is not possible.
            </para>
            <para>
            By generating pre-created cached tiles and storing them in an optimized file structure on a server using 
            the OpenStreetMap specification, client applications can see improved draw times of geographic phenomena. 
            This performance increase comes as a trade-off of not having the flexibility to dynamically change the 
            drawing of geographic phenomena on-the-fly. This means that an OpenStreetMapLayer does not have Properties 
            like dynamic map service layers such as the 
            <see cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer">ArcGISDynamicMapServiceLayer</see> or a 
            <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayer</see> have for things such as: LayerDefinition, 
            Where, TimeExtent, and/or VisibleLayers which restrict which features are returned.
            </para>
            <para>
            A call to the OpenStreetMapLayer is Asynchronous. As a result, this means that obtaining information 
            (i.e. get/Read) for the various Properties of an OpenStreetMapLayer should occur in the 
            <see cref="E:ESRI.ArcGIS.Client.Layer.Initialized">Initialized</see> Event or any time after the 
            Initialized Event occurs. This ensures that information retrieved about the OpenStreetMapLayer has been 
            obtained after a complete round trip from the server. Do not be tempted to try and access 
            OpenStreetMapLayer Property information from generic application Events like: 
            
            MainWindows.Loaded
            
            or the Constructor, etc. as the OpenStreetMapLayer has not been Initialized and erroneous information 
            will be returned. Likewise, OpenStreetMapLayer Methods should not be invoked until after the 
            OpenStreetMapLayer Initialized Event has fired or from within the Initialized Event to avoid erroneous 
            results.
            </para>
            <para>
            It is highly recommended to use the OpenStreetMapLayer 
            <see cref="E:ESRI.ArcGIS.Client.Layer.InitializationFailed">InitializationFailed</see> Event to test for 
            valid data being returned from the Server. Some common reasons for an OpenStreetMapLayer failing to 
            initialize include the server being down or an incorrect Url was specified in the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServers">OpenStreetMapLayer.TileServers</see> 
            Property. If proper error handling is not done in the OpenStreetMapLayer InitializationFailed Event, an 
            'Unhandled Exception' error message will be thrown by Visual Studio causing undesirable application 
            termination.
            </para>
            <para>
            It is only required to create a new instance of an OpenStreetMapLayer and then add it to the 
            <see cref="P:ESRI.ArcGIS.Client.Map.Layers">Map.Layers</see> Property to display a default 
            OpenStreetMapLayer. The reason for this is that the internals of the OpenStreetMapLayer constructor 
            automatically uses an internal Url to a web service provided by the OpenStreetMap organization. So 
            the following is an XAML example of all that is needed to create a default OpenStreetMapLayer:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
              &lt;esri:OpenStreetMapLayer /&gt;
            &lt;/esri:Map&gt;
            </code>
            <para>
            The OpenStreetMap organization hosts several types of maps that can be used as OpenStreetMapLayer's. 
            To change which type of map is used, specify the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.Style">OpenStreetMapLayer.Style</see> 
            Property to any one of several 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle">OpenStreetMapLayer.MapStyle</see> 
            Enumerations. The default OpenStreetMap.MapStyle Property is <b>OpenStreetMapLayer.MapStyle.Mapnik</b> meaning 
            that if an OpenStreetMapLayer.Style is not specified in constructing an OpenStreetMapLayer, the 
            <b>OpenStreetMapLayer.MapStyle.Mapnik</b> style will be used by default. The following is an XAML example of 
            specifying a specific OpenStreetMapLayer.Style when defining a new OpenStreetMapLayer:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
             &lt;esri:OpenStreetMapLayer Style=”CycleMap”/&gt;
            &lt;/esri:Map&gt;
            </code>
            <para>
            If it is not desired to use the map services provided directly by the OpenStreetMap organization or if you 
            discover that additional map services are provided for which Esri has not provided an explicit 
            OpenStreetMapLayer.Style, developers can explicitly provide their own Url's for an OpenStreetMapLayer 
            using the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServers">OpenStreetMapLayer.TileServers</see> 
            Property. When using the OpenStreetMapLayer.TileServers Property, the OpenStreetMapLayer.Style Property is 
            ignored. The 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList">OpenStreetMapLayer.TileServerList</see> 
            Class is a List Collection of Strings that are the Url's to various OpenStreetMap map based servers. The 
            following is an XAML example of specifying specific Urls using the OpenStreetMapLayer.TileServers Property 
            when defining a new OpenStreetMapLayer:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
              &lt;esri:OpenStreetMapLayer ID="osmLayer"&gt;
                &lt;esri:OpenStreetMapLayer.TileServers&gt;
                  &lt;sys:String&gt;http://otile1.mqcdn.com/tiles/1.0.0/osm&lt;/sys:String&gt;
                  &lt;sys:String&gt;http://otile2.mqcdn.com/tiles/1.0.0/osm&lt;/sys:String&gt;
                  &lt;sys:String&gt;http://otile3.mqcdn.com/tiles/1.0.0/osm&lt;/sys:String&gt;
                &lt;/esri:OpenStreetMapLayer.TileServers&gt;
              &lt;/esri:OpenStreetMapLayer&gt;
            &lt;/esri:Map&gt;
            </code>
            <para>
            It is important to understand that only one Url is needed in the OpenStreetMapLayer.TileServerList. If multiple 
            Urls are included in the OpenStreetMapLayer.TileServerList, all of the map servers should be serving up the same 
            base data. The reason for having the ability to specify multiple Urls in the OpenStreetMapLayer.TileServerList 
            is to improve performance by load balancing the requests the client application uses across multiple servers. 
            If different OpenStreetMap based map services are specified in the OpenStreetMapLayer.TileServerList, the tiles 
            that are placed together in the Esri Map control will yield unexpected results. For example, assume that three 
            different OpenStreetMap map based services are used for the the OpenStreetMapLayer.TileServers Property in the 
            following XAML example code:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
              &lt;esri:OpenStreetMapLayer ID="osmLayer"&gt;
                &lt;esri:OpenStreetMapLayer.TileServers&gt;
                  &lt;sys:String&gt;http://otile1.mqcdn.com/tiles/1.0.0/osm&lt;/sys:String&gt;
                  &lt;sys:String&gt;http://a.tile.openstreetmap.org&lt;/sys:String&gt;
                  &lt;sys:String&gt;http://a.tile.opencyclemap.org/cycle&lt;/sys:String&gt;
                &lt;/esri:OpenStreetMapLayer.TileServers&gt;
              &lt;/esri:OpenStreetMapLayer&gt;
            &lt;/esri:Map&gt;   
            </code>
            <para>
            The following is a screen shot of the previous XAML code fragment showing the application's undesirable 
            results appearing if different map based services were used in the the OpenStreetMap.TileServers Property:
            </para>
            <para>
            <img border="0" alt="Using different base map services as the OpenStreetMap.TileServer Property yields strange results." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.OpenStreetMap.TileServersStrange.png"/>
            </para>
            <para>
            Whenever an OpenStreetMapLayer is used in a production application based on services from the OpenStreetMap 
            organization, it is required by their license agreement to provide the 
            <a href="http://www.openstreetmap.org/copyright">appropriate credit</a> for using their data. The credit 
            information for maps provided by the OpenStreetMap organization is stored in the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.CopyrightText"/> 
            Property. To display the credit information in your application is most easily accomplished by adding an Esri 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.Attribution">Attribution</see> control to your client application 
            and binding the <see cref="M:ESRI.ArcGIS.Client.Toolkit.Attribution.Layers">Attribution.Layers</see> Property 
            to the OpenStreetMapLayer. The following is an XAML example of how to accomplish this:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
              &lt;esri:OpenStreetMapLayer Style="Mapnik" /&gt;
            &lt;/esri:Map&gt;
            &lt;esri:Attribution Layers="{Binding ElementName=MyMap, Path=Layers}" /&gt;
            </code>
            <para>
            OpenStreetMap is released under the Create Commons "Attribution-Share Alike 2.0 Generic" license.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the Button to add an OpenStreetMapLayer to the Map (it will be added via code-behind). The credit information 
            about the dataset will displayed in the Attribution Control.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Example of loading an OpenStreetMapLayer via code-behind." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.OpenStreetMap.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map Control to the application. --&gt;
              &lt;esri:Map x:Name="Map1" WrapAround="True" HorizontalAlignment="Left" VerticalAlignment="Top" 
                    Margin="0,156,0,0" Height="350" Width="550" /&gt;
              
              &lt;!-- Add an Attribution Control. --&gt;
              &lt;esri:Attribution x:Name="Attribution1" Width="550" Height="50" HorizontalAlignment="Left" Margin="0,512,0,38" /&gt;
              
              &lt;!-- Add a Button that will allow the user to add an OpenStreetMapLayer via code-behind. --&gt;
              &lt;Button Name="Button1" Height="23" HorizontalAlignment="Left" Margin="0,128,0,0"  VerticalAlignment="Top" 
                      Width="550" Content="Add an OpenStreetMapLayer (via code-behind)."
                      Click="Button1_Click" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="122" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="572" 
                         TextWrapping="Wrap" Text="Click the Button to add an OpenStreetMapLayer to the Map (it will be added 
                         via code-behind). The credit information about the dataset will displayed in the Attribution Control." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Create a new instance of an OpenStreetMapLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer myOpenStreetMapLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer();
              
              // Set the OpenStreetMapLayer.Style to that of MapStyle.CycleMap
              myOpenStreetMapLayer.Style = ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle.CycleMap;
              
              // Wire up an Initialized Event handler for the OpenStreetMapLayer.
              myOpenStreetMapLayer.Initialized += myOpenStreetMapLayer_Initialized;
              
              // Add the OpenStreetMapLayer to the Map's Layer Collection. This will cause the OpenStreetMapLayer.Initialized Event to fire.
              Map1.Layers.Add(myOpenStreetMapLayer);
            }
            
            private void myOpenStreetMapLayer_Initialized(object sender, EventArgs e)
            {
              // Get the OpenStreetMapLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer myOpenStreetMapLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer)sender;
              
              // Display the OpenStreetMapLayer credit information via the ESRI Attribution Control.
              Attribution1.Layers = Map1.Layers;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Create a new instance of an OpenStreetMapLayer.
              Dim myOpenStreetMapLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer
              
              ' Set the OpenStreetMapLayer.Style to that of MapStyle.CycleMap
              myOpenStreetMapLayer.Style = ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle.CycleMap
              
              ' Wire up an Initialized Event handler for the OpenStreetMapLayer.
              AddHandler myOpenStreetMapLayer.Initialized, AddressOf myOpenStreetMapLayer_Initialized
              
              ' Add the OpenStreetMapLayer to the Map's Layer Collection. This will cause the OpenStreetMapLayer.Initialized Event to fire.
              Map1.Layers.Add(myOpenStreetMapLayer)
              
            End Sub
            
            Private Sub myOpenStreetMapLayer_Initialized(sender As Object, e As EventArgs)
              
              ' Get the OpenStreetMapLayer.
              Dim myOpenStreetMapLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer = sender
              
              ' Display the OpenStreetMapLayer credit information via the ESRI Attribution Control.
              Attribution1.Layers = Map1.Layers
              
            End Sub
            </code>
            </example>	
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer">
            <summary>
            A WebTiledLayer is a tiled layer where the tiles are obtained directly from the provided URL, as opposed to requests made against a service.
            Typically, Web Tiled Layers are used as a basemap.
            <para>
            As a minimum, the property <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.TemplateUrl"/> must be defined.
            If the tileInfo is not specified then the spatial reference and tiling scheme of the layer is assumed to be in the web mercator projection and google/ms/esri web mercator tiling scheme.
            </para>
            </summary>
            <remarks>
            Tile layers are added to a web map as layer type: WebTiledLayer (exposed in the UI as a Tile Layer).
            </remarks>
            <seealso cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer"/>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.CornerCoordinate">
            <summary>Simple constant used for full extent and tile origin specific to this projection.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.Wkid">
            <summary>ESRI Spatial Reference ID for Web Mercator.</summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.#cctor">
            <summary>
            Initializes the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.Initialize">
            <summary>
            Initializes the resource.
            </summary>
            <remarks>
            	<para>Override this method if your resource requires asyncronous requests to initialize,
            and call the base method when initialization is completed.</para>
            	<para>Upon completion of initialization, check the <see cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/> for any possible errors.</para>
            </remarks>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a URL to the specified tile in an WebTiledLayer.
            </summary>
            <param name="level">Layer level</param>
            <param name="row">Tile row</param>
            <param name="col">Tile column</param>
            <returns>URL to the tile image</returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.TemplateUrlProperty">
            <summary>
            Dependency property for <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.TemplateUrl"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.SubDomainsProperty">
            <summary>
            Dependency property for <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.SubDomains"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.CopyrightTextProperty">
            <summary>
            Dependency property for <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.CopyrightText"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.SetFullExtent(ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Sets the full extent of the layer.
            </summary>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.SetTileInfo(ESRI.ArcGIS.Client.TileInfo)">
            <summary>
            Sets the tile scheme of the tile layer.
            If not set then assume standard web mercator tiling scheme.
            </summary>
            <param name="tileInfo">The tile info.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.TemplateUrl">
            <summary>
            Gets or sets the template URL to the Web Tiled Layer.
            The template url contains a parameterized url.
            The template can contain the following templated parameters: {subDomain}, {level}, {row} and {col}.
            <para>
            Example of OpenStreetMap template URL: http://{subDomain}.tile.opencyclemap.org/cycle/{level}/{col}/{row}.png</para>
            </summary>
            <value>
            The template URL.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.SubDomains">
            <summary>
            Gets or sets the sub domains.
            The sub domain values are used to replace the {subDomain} parameter in the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.TemplateUrl"/>.
            </summary>
            <value>
            The sub domains.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.CopyrightText">
            <summary>
            Gets or sets the attribution to the Web Tiled Layer provider.
            </summary>
            <value>
            The copyright.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.LevelValues">
            <summary>
            Gets or sets the level values to use when replacing the {level} parameter in the TemplateUrl.
            This optional property is useful when the TemplateUrl is expecting non numeric level values.
            This is maily used for the WMTS layers that are converted to WebTiledLayers when added to a webmap. The WMTS layers may use non numeric level values.
            </summary>
            <value>
            The level values.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WebTiledLayer.AttributionTemplate">
            <summary>
            Gets the attribution template of the layer.
            </summary>
            <value>The attribution template.</value>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.subDomains">
            <summary>Available subdomains for tiles.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.baseUrl">
            <summary>Base URL used in GetTileUrl.</summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a URL to the specified tile in an OpenStreetMapLayer.
            </summary>
            <param name="level">Layer level</param>
            <param name="row">Tile row</param>
            <param name="col">Tile column</param>
            <returns>URL to the tile image</returns>
            <remarks>
            <para>
            An OpenStreetMapLayer is made up of multiple tiles (or images) that are automatically put together in 
            a mosaic for display in a Map Control. The tiles are pre-generated on a web server and can 
            be accessed individually via a URL. In order to access the URL for a specific tile it is 
            required to know the Level, Row, and Column information. 
            </para>
            <para>
            A programmatic way to determine the various Level, Row, and Column information can be obtained by writing some 
            code-behind logic in the 
            <see cref="E:ESRI.ArcGIS.Client.TiledLayer.TileLoading">OpenStreetMapLayer.TileLoading</see> Event 
            (see the code example in this document).
            </para>  
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            After the OpenStreetMapLayer loads in the Map Control, the ListBox will be populated with all the 
            combinations of 'Level, Row, and Column' tiles that make up the initial extent of the OpenStreetMapLayer 
            image service. Click on any of the combinations in the Listbox and that particular tile will be 
            displayed in an Image Control as well as the Url for that image.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Displaying individual tile images and their Url values for an OpenStreetMapLayer." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.OpenStreetMap.GetTileIUrl.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="78" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="640" 
                TextWrapping="Wrap" Text="After the OpenStreetMapLayer loads in the Map Control, the ListBox will be 
                populated with all the combinations of 'Level, Row, and Column' tiles that make up the initial extent of the 
                OpenStreetMapLayer image service. Click on any of the combinations in the Listbox and that particular 
                tile will be displayed in an Image Control as well as the Url for that image." /&gt;
              
              &lt;!-- The Map Control. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="33,160,0,0" Name="Label_MapControl" 
                   VerticalAlignment="Top" Width="120" Content="Map Control:"/&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="32,180,0,0" Name="Map1" 
                   VerticalAlignment="Top" WrapAround="True" Height="320" Width="600"&gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:LayerCollection&gt;
                  
                    &lt;!-- 
                    Add an OpenStreetMapLayer. The InitializationFailed Event is used to notify the user in case the 
                    OpenStreetMapLayer service is down. The TileLoading Event provides details about individual tiles 
                    in the OpenStreetMapLayer service that is necessary to get the input parameters (Level, Row, Column) 
                    of the OpenStreetMapLayer.GetTileUrl Method. 
                    --&gt;
                    &lt;esri:OpenStreetMapLayer ID="myOpenStreetMapLayer" Style="CycleMap"
                          InitializationFailed="OpenStreetMapLayer_InitializationFailed"
                          TileLoading="OpenStreetMapLayer_TileLoading"/&gt;
                  
                  &lt;/esri:LayerCollection&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- ListBox results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="33,512,0,0" Name="Label_ListBox1" 
                   VerticalAlignment="Top" Width="194" Content="ListBox Control:"/&gt;
              &lt;ListBox Height="93" HorizontalAlignment="Left" Margin="33,526,0,0" Name="ListBox1" 
                       VerticalAlignment="Top" Width="194" SelectionChanged="ListBox1_SelectionChanged"/&gt;
                
              &lt;!-- TiledLayer.TileLoadEventsArgs. Level, Row, and Column. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,510,0,0" Name="Label_TileLoadEventArgs" 
                   VerticalAlignment="Top" Width="120" Content="TileLoadEventArgs:"/&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,542,0,0" Name="Label_Level" 
                   VerticalAlignment="Top" Width="48" Content="Level:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,536,0,0" Name="TextBox_Level" 
                       VerticalAlignment="Top" Width="52" /&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,569,0,0" Name="Label_Row" 
                   VerticalAlignment="Top" Width="48" Content="Row:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,566,0,0" Name="TextBox_Row" 
                       VerticalAlignment="Top" Width="51" /&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,602,0,0" Name="Label_Column" 
                   VerticalAlignment="Top" Width="48" Content="Column:" /&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,596,0,0" Name="TextBox_Column" 
                       VerticalAlignment="Top" Width="52" /&gt;
              
              &lt;!-- OpenStreetMapLayer.GetTileUrl results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="32,631,0,0" Name="Label_GetTileUrl" 
                   VerticalAlignment="Top" Width="344" Content="OpenStreetMapLayer.GetTileUrl:"/&gt;
              &lt;TextBox Height="124" HorizontalAlignment="Left" Margin="32,648,0,0" Name="TextBox_GetTileUrl" 
                       VerticalAlignment="Top" Width="344" TextWrapping="Wrap"/&gt;
              
              &lt;!-- Image Control results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="384,508,0,0" Name="Label_ImageControl1" 
                   VerticalAlignment="Top" Width="198" Content="Image Control:"/&gt;
              &lt;Image Height="250" HorizontalAlignment="Left" Margin="382,522,0,0" Name="Image1" 
                     Stretch="Fill" VerticalAlignment="Top" Width="250" /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void OpenStreetMapLayer_InitializationFailed(object sender, System.EventArgs e)
            {
              // Notify the user if there is a failure with the OpenStreetMapLayer service.
              ESRI.ArcGIS.Client.Layer aLayer = (ESRI.ArcGIS.Client.Layer)sender;
              MessageBox.Show(aLayer.InitializationFailure.Message);
            }
            
            private void OpenStreetMapLayer_TileLoading(object sender, ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs e)
            {
              // This Event will fire for each tile that is loaded in the Map Control. For instance, if it takes 4 tiled images
              // to render the Map Control completely, then this Event will fire 4 times. As you Zoom In or Pan around to other
              // geographic areas in the Map, this Event will continue to fire until all of the tiles have been processed. 
              
              // The e argument of the Event returns a TileLoadEventArgs object.
              ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs myTileLoadEventArgs = e;
              
              // Get the Tile's Level, Row, and Column Properties
              int myLevel = myTileLoadEventArgs.Level;
              int myRow = myTileLoadEventArgs.Row;
              int myColumn = myTileLoadEventArgs.Column;
              
              // Generate a string that is comma delimited with the Level, Row, and Column values and add them to a Listbox.
              string myString = myLevel.ToString() + "," + myRow.ToString() + "," + myColumn.ToString();
              
              // Do not add any duplicates.
              if (!(ListBox1.Items.Contains(myString)))
              {
                ListBox1.Items.Add(myString);
              }
            }
            
            private void ListBox1_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
            {
              // Get the SelectedItem from the Listbox and parse out the Level, Row, and Column arguments necessary to 
              // obtain the Url for a specific tile.
              string theConcatenatedString = (string)ListBox1.SelectedItem;
              string[] theParts = theConcatenatedString.Split(',');
              int theLevel = Convert.ToInt32(theParts[0]);
              int theRow = Convert.ToInt32(theParts[1]);
              int theColumn = Convert.ToInt32(theParts[2]);
              
              // Update the Level, Row, and Column information in the TextBoxes for ease of viewing.
              TextBox_Level.Text = theLevel.ToString();
              TextBox_Row.Text = theRow.ToString();
              TextBox_Column.Text = theColumn.ToString();
              
              // Get the OpenStreetMapLayer. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer theOpenStreetMapLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer)Map1.Layers["myOpenStreetMapLayer"];
              
              // Obtain a specific tile Url from the OpenStreetMapLayer using the three arguments for the GetTileUrl Method.
              string theGetTileUrl = theOpenStreetMapLayer.GetTileUrl(theLevel, theRow, theColumn);
              TextBox_GetTileUrl.Text = theGetTileUrl;
              
              // Only process valid restults. 
              if (theGetTileUrl != null)
              {
                // Set the specific tile's Url as the Image's Source. 
                Uri myUri = new Uri(theGetTileUrl);
                Image1.Source = new System.Windows.Media.Imaging.BitmapImage(myUri);
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub OpenStreetMapLayer_TileLoading(sender As System.Object, e As ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs)
              
              ' This Event will fire for each tile that is loaded in the Map Control. For instance, if it takes 4 tiled images
              ' to render the Map Control completely, then this Event will fire 4 times. As you Zoom In or Pan around to other
              ' geographic areas in the Map, this Event will continue to fire until all of the tiles have been processed. 
              
              ' The e argument of the Event returns a TileLoadEventArgs object.
              Dim myTileLoadEventArgs As ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs = e
              
              ' Get the Tile's Level, Row, and Column Properties
              Dim myLevel As Integer = myTileLoadEventArgs.Level
              Dim myRow As Integer = myTileLoadEventArgs.Row
              Dim myColumn As Integer = myTileLoadEventArgs.Column
              
              ' Generate a string that is comma delimited with the Level, Row, and Column values and add them to a Listbox.
              Dim myString As String = myLevel.ToString + "," + myRow.ToString + "," + myColumn.ToString
              
              ' Do not add any duplicates.
              If Not ListBox1.Items.Contains(myString) Then
                ListBox1.Items.Add(myString)
              End If
              
            End Sub
              
            Private Sub ListBox1_SelectionChanged(ByVal sender As System.Object, ByVal e As System.Windows.Controls.SelectionChangedEventArgs)
              
              ' Get the SelectedItem from the Listbox and parse out the Level, Row, and Column arguments necessary to 
              ' obtain the Url for a specific tile.
              Dim theConcatenatedString As String = ListBox1.SelectedItem
              Dim theParts As String() = Split(theConcatenatedString, ",")
              Dim theLevel As Integer = CInt(theParts(0))
              Dim theRow As Integer = CInt(theParts(1))
              Dim theColumn As Integer = CInt(theParts(2))
              
              ' Update the Level, Row, and Column information in the TextBoxes for ease of viewing.
              TextBox_Level.Text = theLevel.ToString
              TextBox_Row.Text = theRow.ToString
              TextBox_Column.Text = theColumn.ToString
              
              ' Get the OpenStreetMapLayer. 
              Dim theOpenStreetMapLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer = Map1.Layers("myOpenStreetMapLayer")
              
              ' Obtain a specific tile Url from the OpenStreetMapLayer using the three arguments for the GetTileUrl Method.
              Dim theGetTileUrl As String = theOpenStreetMapLayer.GetTileUrl(theLevel, theRow, theColumn)
              TextBox_GetTileUrl.Text = theGetTileUrl
              
              ' Only process valid restults. 
              If theGetTileUrl IsNot Nothing Then
                
                ' Set the specific tile's Url as the Image's Source. 
                Dim myUri As New Uri(theGetTileUrl)
                Image1.Source = New Imaging.BitmapImage(myUri)
                
              End If
              
            End Sub
            </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServersProperty">
            <summary>
            Dependency property for <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServers"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.StyleProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.Style"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServers">
            <summary>
            Gets or Sets the tile servers to use when requesting tiles. If the TileServers Property is set 
            the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.Style"/> Property will be ignored.
            </summary>
            <remarks>
            <para>
            It is only required to create a new instance of an OpenStreetMapLayer and then add it to the 
            <see cref="P:ESRI.ArcGIS.Client.Map.Layers">Map.Layers</see> Property to display a default 
            OpenStreetMapLayer. The reason for this is that the internals of the OpenStreetMapLayer constructor 
            automatically uses an internal Url to a web service provided by the OpenStreetMap organization. So 
            the following is an XAML example of all that is needed to create a default OpenStreetMapLayer:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
              &lt;esri:OpenStreetMapLayer /&gt;
            &lt;/esri:Map&gt;
            </code>
            <para>
            The OpenStreetMap organization hosts several types of maps that can be used as OpenStreetMapLayer's. 
            To change which type of map is used, specify the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.Style">OpenStreetMapLayer.Style</see> 
            Property to any one of several 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle">OpenStreetMapLayer.MapStyle</see> 
            Enumerations. The default OpenStreetMap.MapStyle Property is <b>OpenStreetMapLayer.MapStyle.Mapnik</b> meaning 
            that if an OpenStreetMapLayer.Style is not specified in constructing an OpenStreetMapLayer, the 
            <b>OpenStreetMapLayer.MapStyle.Mapnik</b> style will be used by default. The following is an XAML example of 
            specifying a specific OpenStreetMapLayer.Style when defining a new OpenStreetMapLayer:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
             &lt;esri:OpenStreetMapLayer Style=”CycleMap”/&gt;
            &lt;/esri:Map&gt;
            </code>
            <para>
            If it is not desired to use the map services provided directly by the OpenStreetMap organization or if you 
            discover that additional map services are provided for which Esri has not provided an explicit 
            OpenStreetMapLayer.Style, developers can explicitly provide their own Url's for an OpenStreetMapLayer 
            using the OpenStreetMapLayer.TileServers Property. When using the OpenStreetMapLayer.TileServers Property, 
            the OpenStreetMapLayer.Style Property is ignored. The 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList">OpenStreetMapLayer.TileServerList</see> 
            Class is a List Collection of Strings that are the Url's to various OpenStreetMap map based servers. The 
            following is an XAML example of specifying specific Urls using the OpenStreetMapLayer.TileServers Property 
            when defining a new OpenStreetMapLayer:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
              &lt;esri:OpenStreetMapLayer ID="osmLayer"&gt;
                &lt;esri:OpenStreetMapLayer.TileServers&gt;
                  &lt;sys:String&gt;http://otile1.mqcdn.com/tiles/1.0.0/osm&lt;/sys:String&gt;
                  &lt;sys:String&gt;http://otile2.mqcdn.com/tiles/1.0.0/osm&lt;/sys:String&gt;
                  &lt;sys:String&gt;http://otile3.mqcdn.com/tiles/1.0.0/osm&lt;/sys:String&gt;
                &lt;/esri:OpenStreetMapLayer.TileServers&gt;
              &lt;/esri:OpenStreetMapLayer&gt;
            &lt;/esri:Map&gt;
            </code>
            <para>
            It is important to understand that only one Url is needed in the OpenStreetMapLayer.TileServerList. If multiple 
            Urls are included in the OpenStreetMapLayer.TileServerList, all of the map servers should be serving up the same 
            base data. The reason for having the ability to specify multiple Urls in the OpenStreetMapLayer.TileServerList 
            is to improve performance by load balancing the requests the client application uses across multiple servers. 
            If different OpenStreetMap based map services are specified in the OpenStreetMapLayer.TileServerList, the tiles 
            that are placed together in the Esri Map control will yield unexpected results. For example, assume that three 
            different OpenStreetMap map based services are used for the the OpenStreetMapLayer.TileServers Property in the 
            following XAML example code:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
              &lt;esri:OpenStreetMapLayer ID="osmLayer"&gt;
                &lt;esri:OpenStreetMapLayer.TileServers&gt;
                  &lt;sys:String&gt;http://otile1.mqcdn.com/tiles/1.0.0/osm&lt;/sys:String&gt;
                  &lt;sys:String&gt;http://a.tile.openstreetmap.org&lt;/sys:String&gt;
                  &lt;sys:String&gt;http://a.tile.opencyclemap.org/cycle&lt;/sys:String&gt;
                &lt;/esri:OpenStreetMapLayer.TileServers&gt;
              &lt;/esri:OpenStreetMapLayer&gt;
            &lt;/esri:Map&gt;   
            </code>
            <para>
            The following is a screen shot of the previous XAML code fragment showing the application's undesirable 
            results appearing if different map based services were used in the the OpenStreetMap.TileServers Property:
            </para>
            <para>
            <img border="0" alt="Using different base map services as the OpenStreetMap.TileServer Property yields strange results." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.OpenStreetMap.TileServersStrange.png"/>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the various buttons (on left) to add OpenStreetMapLayers to the Map. Click the 'Clear all layers' 
            button in-between adding the layers to clear out the Map. Notice the effect of adding the various 
            OpenStreetMapLayers - read the comments in the code-behind for more info.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Using the OpenStreetMapLayer.TileServers Property to add different layers." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.OpenStreetMap.TileServers.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map Control to the application. --&gt;
              &lt;esri:Map x:Name="Map1" WrapAround="True" HorizontalAlignment="Left" VerticalAlignment="Top" 
                    Margin="0,250,0,0" Height="350" Width="550" /&gt;
              
              &lt;!-- Button to add multiple OpenStreetMapLayers all from the same base data. --&gt;
              &lt;Button Name="Button_MultipleSameBase" Height="23" HorizontalAlignment="Left" Margin="0,165,0,0"  
                      Width="395" Content="Add multiple OpenStreetMapLayer's all using the same base data."
                      VerticalAlignment="Top" Click="Button_MultipleSameBase_Click" /&gt;
              
              &lt;!-- Button to add multiple OpenStreetMapLayers each using different base data. --&gt;
              &lt;Button Content="Add multiple OpenStreetMapLayers' each using different base data." Height="23"  
                      Margin="0,193,0,0" Name="ButtonMultipleDifferentBase" VerticalAlignment="Top" Width="395" 
                      HorizontalAlignment="Left" Click="ButtonMultipleDifferentBase_Click"/&gt;
                
              &lt;!-- Button to add one OpenStreetMapLayer. --&gt;
              &lt;Button Content="Add one OpenStreetMapLayer." Height="23" HorizontalAlignment="Left" Margin="0,222,0,0" 
                      Name="Button_OneLayer" VerticalAlignment="Top" Width="394" Click="Button_OneLayer_Click"/&gt;
                
              &lt;!-- Clear all of the Layers in the Map. --&gt;
              &lt;Button Content="Clear all layers." Height="80" HorizontalAlignment="Left" Margin="401,165,0,0" 
                      Name="Button_ClearAllLayers" VerticalAlignment="Top" Width="149" Click="Button_ClearAllLayers_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="77" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="572" 
                         TextWrapping="Wrap" Text="Click the various buttons (on left) to add OpenStreetMapLayers to the Map. 
                         Click the 'Clear all layers' button in-between adding the layers to clear out the Map. Notice the 
                         effect of adding the various OpenStreetMapLayers - read the comments in the code-behind for more info." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button_MultipleSameBase_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Create a new instance of an OpenStreetMapLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer myOpenStreetMapLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer();
              
              // Create a new instance of the TileServerList object.
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList myTileServers = new ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList();
              
              // Add Urls (for the same base data) to the TileServerList. This is a great way to have a performance increase on the 
              // client side as you are getting data from multiple servers and not taxing any one server too much.
              myTileServers.Add("http://otile1.mqcdn.com/tiles/1.0.0/osm");
              myTileServers.Add("http://otile2.mqcdn.com/tiles/1.0.0/osm");
              myTileServers.Add("http://otile3.mqcdn.com/tiles/1.0.0/osm");
              
              // Set the OpenStreetMap.TileServer Property.
              myOpenStreetMapLayer.TileServers = myTileServers;
              
              // Add the OpenStreetMapLayer to the Map's Layer Collection. This will refresh the map with the new layers.
              Map1.Layers.Add(myOpenStreetMapLayer);
            }
              
            private void ButtonMultipleDifferentBase_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Create a new instance of an OpenStreetMapLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer myOpenStreetMapLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer();
              
              // Create a new instance of the TileServerList object.
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList myTileServers = new ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList();
              
              // This is not a realistic scenario. If different OpenStreetMap based map services are specified in the 
              // OpenStreetMapLayer.TileServerList, the tiles that are placed together in the Esri Map control will yield 
              // unexpected results.
              myTileServers.Add("http://otile1.mqcdn.com/tiles/1.0.0/osm");
              myTileServers.Add("http://a.tile.openstreetmap.org");
              myTileServers.Add("http://a.tile.opencyclemap.org/cycle");
              
              // Set the OpenStreetMap.TileServer Property.
              myOpenStreetMapLayer.TileServers = myTileServers;
              
              // Add the OpenStreetMapLayer to the Map's Layer Collection. This will refresh the map with the new layers.
              Map1.Layers.Add(myOpenStreetMapLayer);
            }
              
            private void Button_OneLayer_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Create a new instance of an OpenStreetMapLayer.
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer myOpenStreetMapLayer = new ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer();
              
              // Create a new instance of the TileServerList object.
              ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList myTileServers = new ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList();
              
              // If you only have one server to access, then just add one Url to the TileServerList.
              myTileServers.Add("http://a.tile.cloudmade.com/fd093e52f0965d46bb1c6c6281022199/3/256");
              
              // Set the OpenStreetMap.TileServer Property.
              myOpenStreetMapLayer.TileServers = myTileServers;
              
              // Add the OpenStreetMapLayer to the Map's Layer Collection. This will refresh the map with the new layers.
              Map1.Layers.Add(myOpenStreetMapLayer);
            }
              
            private void Button_ClearAllLayers_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Clear all the layers in the Map. 
              // Note: Do this before clicking the other buttons so you can see the newly added OpenStreetMapLayer(s).
              Map1.Layers.Clear();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button_MultipleSameBase_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Create a new instance of an OpenStreetMapLayer.
              Dim myOpenStreetMapLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer
              
              ' Create a new instance of the TileServerList object.
              Dim myTileServers As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList = New ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList
              
              ' Add Urls (for the same base data) to the TileServerList. This is a great way to have a performance increase on the 
              ' client side as you are getting data from multiple servers and not taxing any one server too much.
              myTileServers.Add("http://otile1.mqcdn.com/tiles/1.0.0/osm")
              myTileServers.Add("http://otile2.mqcdn.com/tiles/1.0.0/osm")
              myTileServers.Add("http://otile3.mqcdn.com/tiles/1.0.0/osm")
              
              ' Set the OpenStreetMap.TileServer Property.
              myOpenStreetMapLayer.TileServers = myTileServers
              
              ' Add the OpenStreetMapLayer to the Map's Layer Collection. This will refresh the map with the new layers.
              Map1.Layers.Add(myOpenStreetMapLayer)
              
            End Sub
              
            Private Sub ButtonMultipleDifferentBase_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Create a new instance of an OpenStreetMapLayer.
              Dim myOpenStreetMapLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer
              
              ' Create a new instance of the TileServerList object.
              Dim myTileServers As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList = New ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList
              
              ' This is not a realistic scenario. If different OpenStreetMap based map services are specified in the 
              ' OpenStreetMapLayer.TileServerList, the tiles that are placed together in the Esri Map control will yield 
              ' unexpected results.
              myTileServers.Add("http://otile1.mqcdn.com/tiles/1.0.0/osm")
              myTileServers.Add("http://a.tile.openstreetmap.org")
              myTileServers.Add("http://a.tile.opencyclemap.org/cycle")
              
              ' Set the OpenStreetMap.TileServer Property.
              myOpenStreetMapLayer.TileServers = myTileServers
              
              ' Add the OpenStreetMapLayer to the Map's Layer Collection. This will refresh the map with the new layers.
              Map1.Layers.Add(myOpenStreetMapLayer)
              
            End Sub
              
            Private Sub Button_OneLayer_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Create a new instance of an OpenStreetMapLayer.
              Dim myOpenStreetMapLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer = New ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer
              
              ' Create a new instance of the TileServerList object.
              Dim myTileServers As ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList = New ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList
              
              ' If you only have one server to access, then just add one Url to the TileServerList.
              myTileServers.Add("http://a.tile.cloudmade.com/fd093e52f0965d46bb1c6c6281022199/3/256")
              
              ' Set the OpenStreetMap.TileServer Property.
              myOpenStreetMapLayer.TileServers = myTileServers
              
              ' Add the OpenStreetMapLayer to the Map's Layer Collection. This will refresh the map with the new layers.
              Map1.Layers.Add(myOpenStreetMapLayer)
              
            End Sub
              
            Private Sub Button_ClearAllLayers_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Clear all the layers in the Map. 
              ' Note: Do this before clicking the other buttons so you can see the newly added OpenStreetMapLayer(s).
              Map1.Layers.Clear()
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.Style">
            <summary>
            Gets or sets the map style. This property is ignored if the 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServers"/> Property is set.
            </summary>
            <remarks>
            <para>
            The OpenStreetMap organization hosts several types of maps that can be used as OpenStreetMapLayer's. 
            To change which type of map is used, specify the OpenStreetMapLayer.Style Property to any one of several 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle">OpenStreetMapLayer.MapStyle</see> 
            Enumerations. The default OpenStreetMap.MapStyle Property is <b>OpenStreetMapLayer.MapStyle.Mapnik</b> meaning 
            that if an OpenStreetMapLayer.Style is not specified in constructing an OpenStreetMapLayer, the 
            <b>OpenStreetMapLayer.MapStyle.Mapnik</b> style will be used by default. The following is an XAML example of 
            specifying a specific OpenStreetMapLayer.Style when defining a new OpenStreetMapLayer:
            </para>
            <code language="XAML">
            &lt;esri:Map x:Name="MyMap"&gt;
             &lt;esri:OpenStreetMapLayer Style=”CycleMap”/&gt;
            &lt;/esri:Map&gt;
            </code>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle">
            <summary>
            MapStyle
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle.Mapnik">
            <summary>
            Mapnik
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle.CycleMap">
            <summary>
            Cycle Map
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.MapStyle.NoName">
            <summary>
            No Name
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.TileServerList">
            <summary>
            Holds a list of string urls to tile servers.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.CsvLayer_Parsing_FormatException">
            <summary>
              Looks up a localized string similar to CSV parsing failed..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.CsvLayer_ResourceNotFound">
            <summary>
              Looks up a localized string similar to Resource could not be located..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.FeatureDefinition_ImageTypeNotSupported">
            <summary>
              Looks up a localized string similar to Image type &apos;{0}&apos; is not supported in Silverlight..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.Generic_UrlNotSet">
            <summary>
              Looks up a localized string similar to Url is not set..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.GeoRss_ReadingFeedFailed">
            <summary>
              Looks up a localized string similar to Error in reading the RSS feed..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.GraphicsLayer_GraphicsSourceCannotBeSetOnLayer">
            <summary>
              Looks up a localized string similar to Layer does not support setting the GraphicsSource Property..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.HeatMapLayer_IntensityLessThanOne">
            <summary>
              Looks up a localized string similar to Intensity cannot be less than one..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.KmlLayer_DocumentParsingFailed">
            <summary>
              Looks up a localized string similar to KML layer parsing document failed..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.KmlLayer_GroundOverlaysSublayer">
            <summary>
              Looks up a localized string similar to GroundOverlays.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.KmlLayer_PlacemarksSublayer">
            <summary>
              Looks up a localized string similar to Placemarks.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.KmlLayer_XDocumentReadFailed">
            <summary>
              Looks up a localized string similar to Unable to read KML source..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.MapService_SecurityException">
            <summary>
              Looks up a localized string similar to A security exception occurred while trying to connect to the &apos;{0}&apos; service. Make sure you have a cross domain policy file available at the root for your server that allows for requests from this application. If not, use a proxy page (handler) to broker communication..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Properties.Resources.WebRequest_Canceled">
            <summary>
              Looks up a localized string similar to Request canceled..
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer">
            <summary>
            A layer for OGC Web Map Services.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.ImageFormatProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.ImageFormat"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.SetFullExtent(ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Sets the full extent.
            This method is useful only if <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.SkipGetCapabilities"/> is true otherwise the full extent is set by the metadata.
            </summary>
            <param name="fullExtent">The full extent.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.Initialize">
            <summary>
            Initializes this a WMS layer.  Calls GetCapabilities if SkipGetCapabilities is false. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.CreateLayerInfos(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Creates the list of layer infos from the layers XElement.
            </summary>
            <param name="layers">The layers XElement.</param>
            <param name="ns">The namespace name.</param>
            <param name="inheritedAttribution">The inherited attribution.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.CreateLayerInfo(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Creates the layer info from the layer XElement.
            </summary>
            <param name="layer">The layer XElement.</param>
            <param name="ns">The namespace name.</param>
            <param name="inheritedAttribution">The inherited attribution.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.GetUrl(ESRI.ArcGIS.Client.DynamicLayer.ImageParameters,ESRI.ArcGIS.Client.DynamicMapServiceLayer.OnUrlComplete)">
            <summary>
            Gets the URL. Override from DynamicMapServiceLayer
            </summary>
            <param name="properties">The image export properties.</param>
            <param name="onComplete">OnUrlComplete delegate.</param>
            <remarks>
            The Map has a private method loadLayerInView which calls Layer.Draw.   
            The DynamicMapServiceLayer abstract class overrides the Draw method and calls 
            DynamicMapServiceLayer.GetUrl which must be implemented in a subclass.   
            The last parameter is the OnUrlComplete delegate, which is used to pass the appropriate values 
            (url, width, height, envelope) to the private DynamicMapServiceLayer.getUrlComplete method.
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of a layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            This object represents the legend of the map service layer and contains a collection of LayerLegendInfos (one by sublayer)
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.CreateLegendInfos(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo})">
            <summary>
            Creates the list of legend infos from the layer infos.
            </summary>
            <param name="layerInfos">The layer infos.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.CreateLegendInfo(ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo)">
            <summary>
            Creates the legend info from a layer info.
            </summary>
            <param name="layerInfo">The layer info.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.GetLayerVisibility(System.Int32)">
            <summary>
            Gets the sub-layer visibility.
            </summary>
            <param name="layerID">The sub-layer ID.</param>
            <returns>The sub-layer visibility</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.SetLayerVisibility(System.Int32,System.Boolean)">
            <summary>
            Sets the sublayer visibility.
            </summary>
            <param name="layerID">The sublayer ID.</param>
            <param name="visible">The sublayer visibility.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.SetVisibleLayers">
            <summary>
            Init the visibility of the layers from the visibleLayers array
            When a layer is in the array visibleLayers, it is visible (whatever the visibility of its parent) and all its descendants are visible
            so in the LayerTree we have to set the visibility for all ascendants and all descendants.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.Url">
            <summary>
            Required.  Gets or sets the URL to a WMS service endpoint.  
            For example, 
            http://sampleserver1.arcgisonline.com/ArcGIS/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/WMSServer,
            http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.ImageFormat">
            <summary>
            Gets or sets the image format being used by the service.
            </summary>
            <remarks>
            The image format must be a supported MimeType name, supported by the service and the framework.
            </remarks>
            <example>
            <code>
            myWmsLayer.ImageFormat = "image/png";
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.SupportedImageFormats">
            <summary>
            Gets a collection of image formats supported by the WMS service.
            </summary>
            <remarks>
            This property is only set after layer initialization completes and 
            <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.SkipGetCapabilities"/> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.Layers">
            <summary>
            Required. Gets or sets the unique layer ids in a WMS service.  
            Each id is a string value.  At least one layer id must be defined.   
            </summary>
            <value>A string array of layer ids.</value>
            <remarks>
            
            
            
            
            
            
            
            
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.ProxyUrl">
            <summary>
            Optional. Gets or sets the URL to a proxy service that brokers Web requests between the client application and a 
            WMS service. Use a proxy service when the WMS service is not hosted on a site that provides a cross domain 
            policy file (clientaccesspolicy.xml or crossdomain.xml). 
            
            </summary>
            <value>The proxy URL string.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.Version">
            <summary>
            Optional. Gets or sets the WMS version.  If SkipGetCapabilities property is set to true, this value determines version requested.  
            If SkipGetCapabilities is false, this value determines version to retrieve.  If no value specified, default value returned from 
            the site will be used.
            </summary>
            <value>The version string.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.SkipGetCapabilities">
            <summary>
            Optional. Gets or sets a value indicating whether to skip a request to get capabilities. 
            Default value is false.  Set SkipGetCapabilities if the site hosting the WMS service does not provide a
            cross domain policy file and you do not have a proxy page.  In this case, you must set the WMS service version.
            If true, the initial and full extent of the WMS layer will not be defined.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.MapUrl">
            <summary>
            Optional. Gets or sets the map URL.		
            </summary>
            <value>The map URL.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.Title">
            <summary>
            Gets or sets the title metadata for this service.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.Abstract">
            <summary>
            Gets the abstract metadata for this service.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerList">
            <summary>
            Gets a list of layers available in this service.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.SupportedSpatialReferenceIDs">
            <summary>
            Gets or sets the supported spatial reference IDs.
            </summary>
            <value>The supported spatial reference IDs.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.AttributionTemplate">
            <summary>		
            Gets the attribution template of an WMS GetCapabilities XML scheme.		
            </summary>
            <value>The attribution template.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
            <remarks>
            Actually, for this kind of layer, the legend never changes after initialization.
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.VisibilityChanged">
            <summary>
            Occurs when the visibility of sublayers changed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo">
            <summary>
            WMS LayerInfo
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="title">The title.</param>
            <param name="legendUrl">The legend URL.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.Name">
            <summary>
            Gets the name of the layer.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.Title">
            <summary>
            Gets the title of the layer.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.Abstract">
            <summary>
            Gets the abstract for the layer.
            </summary>
            <value>The abstract.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.Attribution">
            <summary>
            Gets or sets the attribution text for the layer.
            </summary>
            <value>The attribution text.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.Extent">
            <summary>
            Gets the extent of the layer.
            </summary>
            <value>The extent.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.ChildLayers">
            <summary>
            Gets the child layers.
            </summary>
            <value>The child layers.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.LayerInfo.LegendUrl">
            <summary>
            Gets the legend URL.
            </summary>
            <value>
            The legend URL.
            </value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.AttributionInfo">
            <summary>
            Attribution class used to store copyright information.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.AttributionInfo.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer">
            <summary>
            A layer that conforms to the Web Map Tiling Service (WMTS)  
            <a href="http://www.opengeospatial.org" target="_blank">Open GIS Consortium (OGC)</a> standard. WMTS is a 
            cached service that accesses pre-created tiles from a cache on a server’s hard drive instead of 
            dynamically rendering images.
            </summary>
            <remarks>
            <para>
            The full WMTS standard can be found on the 
            <a href="http://www.opengeospatial.org/standards/wmts" target="_blank">OpenGIS Web Map Tile Service Implementation Standard</a> 
            web page. As of ArcGIS Server version 10.1 serving WMTS layers as a native REST service is supported.
            </para>
            <para>
            In order to consume a WmtsLayer successfully the following Properties must be set:
            </para>
            <list type="bullet">
              <item>
              <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Url">Url</see> (The WMTS service endpoint.)
              </item>
              <item>
              <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ServiceMode">ServiceMode</see> (The WMTS 
              service communication protocol.)
              </item>
            </list>
            <para>
            There are however several other optional Properties/Methods/Events that should also be set in order to 
            avoid problems consuming a WmtsLayer, they are:
            </para>
            <list type="bullet">
              <item>
              <see cref="E:ESRI.ArcGIS.Client.Layer.Initialized">Initialized</see> Method (Method raised when 
              WmtsLayer is being created on the client; useful to get or change information about the layer.)
              </item>
              <item>
              <see cref="E:ESRI.ArcGIS.Client.Layer.InitializationFailed">InitializationFailed</see> Event (Method 
              raised if the WmtsLayer has a problem being created.)
              </item>
              <item>
              <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ProxyUrl">ProxyUrl</see> Property (A proxy 
              service to broker web requests between the WMTS service and the web client.)
              </item>
              <item>
              <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Layer">Layer</see> Property (Name of a 
              single layer in a WMTS service; there can be multiple layers per service.)
              </item>
              <item>
              <see cref="P:ESRI.ArcGIS.Client.Layer.ID">ID</see> Property (The unique ID of the layer in the Map control.)
              </item>
            </list>
            <para>
            A single WMTS service can have multiple layers. For each WmtsLayer instance, only one layer is drawn at a 
            time. In order to discover what layers are available in a WMTS service, append the string 
            '?request=GetCapabilities&amp;service=WMTS&amp;version=1.0.0' to what would be supplied for the WmtsLayer.Url Property 
            in the address bar of a web browser and the full details will be provided in an XML document. A few example 
            strings of obtaining the capabilities of a WMTS service are:
            </para>
            <list type="bullet">
              <item>
              http://v2.suite.opengeo.org/geoserver/gwc/service/wmts?request=GetCapabilities&amp;service=WMTS&amp;version=1.0.0
              </item>
              <item>
              http://MyTestServer:6080/arcgis/rest/services/cachedservices/MyTestWMTSService/MapServer/WMTS?request=GetCapabilities&amp;service=WMTS&amp;version=1.0.0
              </item>
            </list>
            <para>
            By default if the WmtsLayer.Layer Property is not specified, the first layer respecting the 
            WmtsLayer.TileMatrixSet will be used. When specifying the WmtsLayer.Layer Property at runtime in the 
            code-behind, the WmtsLayer’s Refresh Method fires which in turn invokes the WmtsLayer’s Initialized Event 
            which will cause a re-draw of the layer in the Map Control.
            </para>
            <para>
            It is important to specify the correct 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsServiceMode">WmtsLayer.WmtsServiceMode</see> 
            Enumeration in the WmtsLayer.ServiceMode Property or the WmtsLayer may not be created properly. The two 
            available WmtsLayer.WmtsServiceMode Enumeration options available are <b>KVP</b> and <b>RESTful</b>. WMTS 
            services provided by ArcGIS Server produce <b>RESTful</b> WmtsLayer.WmtsServiceMode services. The 
            <b>KVP</b> WmtsLayer.WmtsServiceMode means HTTP 'Key/Value Pair' encoding; details on this OGC specification 
            can found by downloading the 
            <a href="http://portal.opengeospatial.org/files/?artifact_id=36263&amp;version=2format=pdf" target="_blank">WCS Extension -- KVP Protocol</a> 
            document.
            </para>
            <para>
            A call to the WmtsLayer is Asynchronous. As a result, this means that you cannot obtain valid Read (VB.NET) 
            or get (C#) Property values until information has been returned from a WMTS server to the Client application. 
            You can safely obtain valid Read/get Property information in the Initialized, PropertyChanged, 
            TileLoaded, and TileLoading Events or from a function/sub/method that occurs after these Events fire. If you 
            try to obtain Read/get Property information before these Events fire you will obtain invalid or null/Nothing 
            information for the particular Property in question. 
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Select a layer name in the ListBox and click the 'Get WMTSLayer information' button to display various 
            WMTSLayer and WMTSLayer.LayerInfo Property information. The Map will automatically zoom to the Extent 
            of the layer. Properties with the words '[Count]' gives the count of the number of items in an 
            IEnumerable; more coding could be done in the code-behind to dig deeper into the collection.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Example of displaying a WmtsLayer and detailed information about the service." src=" C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.WmtsLayer.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" 
                        VerticalAlignment="Top" WrapAround="True" Height="400" Width="775" Margin="12,80,0,0"&gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:LayerCollection&gt;
                      
                    &lt;!-- 
                    Add a sample WmtsLayer. Setting the 'ID' Property is good if you want to access the WmtsLayer in code-behind.
                    It is mandatory that you set the correct 'ServiceMode' Property. Setting the 'InitializationFailed' Event is useful
                    to troubleshoot if the WmtsLayer fails to load. A 'ProxyUrl' is needed to test this particular service; it is not
                    always necessary depending on your configuration (i.e. local web service internal to your network). Use the 
                    'Initialized' Method to gain access to various Properties/Methods of the WmtsLayer.
                    --&gt;
                    &lt;esri:WmtsLayer ID="WMTS1"
                                    Url="http://v2.suite.opengeo.org/geoserver/gwc/service/wmts"
                                    Initialized="WmtsLayer_Initialized"
                                    ProxyUrl="http://servicesbeta3.esri.com/SilverlightDemos/ProxyPage/proxy.ashx"
                                    InitializationFailed="WmtsLayer_InitializationFailed"
                                    ServiceMode="KVP"
                                    /&gt;
                  &lt;/esri:LayerCollection&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- 
              Add a Button to allow the user to change the sub-Layer that is displaying in the Map along with information
              about the WmtsLayer service.
              --&gt;
              &lt;Button Content="Get WMTSLayer information" Height="23" HorizontalAlignment="Left" Margin="518,484,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="269" Click="Button1_Click"/&gt;
              &lt;ListBox Height="103" HorizontalAlignment="Left" Margin="519,513,0,0" Name="ListBox1" 
                       VerticalAlignment="Top" Width="269" /&gt;
              
              &lt;!-- Display various WMTSLayer Property information. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="170,479,0,0" Name="Label_WMTSLayerProperties" 
                         VerticalAlignment="Top" Width="199" Content="WMTSLayer Properties" FontSize="14" FontWeight="Bold"/&gt;
              
              &lt;!-- FullExtent--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,508,0,0" Name="Label_FullExtent" 
                         VerticalAlignment="Top" Width="120" Content="FullExtent:" /&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,508,0,0" 
                       Name="TextBox_FullExtent" VerticalAlignment="Top" Width="400" /&gt;
              
              &lt;!--Description--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,540,0,0" Name="Label_Description" 
                         VerticalAlignment="Top" Width="88" Content="Description:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,536,0,0" Name="TextBox_Description" 
                       VerticalAlignment="Top" Width="400" /&gt;
              
              &lt;!--ImageFormat--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,569,0,0" Name="Label_ImageFormat" 
                         VerticalAlignment="Top" Width="88" Content="ImageFormat:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,565,0,0" Name="TextBox_ImageFormat" 
                       VerticalAlignment="Top" Width="161" /&gt;
              
              &lt;!--Layer--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="268,565,0,0" Name="Label_Layer" 
                         VerticalAlignment="Top" Width="88" Content="Layer:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="309,565,0,0" Name="TextBox_Layer" 
                       VerticalAlignment="Top" Width="192" /&gt;
              
              &lt;!--LayerInfos--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,596,0,0" Name="Label_LayerInfos" 
                         VerticalAlignment="Top" Width="140" Content="LayerInfos [Count]:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="119,593,0,0" Name="TextBox_LayerInfos" 
                       VerticalAlignment="Top" Width="89" /&gt;
              
              &lt;!--ProxyUrl--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,625,0,0" Name="Label_ProxyUrl" 
                         VerticalAlignment="Top" Width="88" Content="ProxyUrl:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,622,0,0" Name="TextBox_ProxyUrl" 
                       VerticalAlignment="Top" Width="400" /&gt;
              
              &lt;!-- ServiceMode--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="225,597,0,0" Name="Label_ServiceMode" 
                         VerticalAlignment="Top" Width="88" Content="ServiceMode:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="309,593,0,0" Name="TextBox_ServiceMode" 
                       VerticalAlignment="Top" Width="192" /&gt;
              
              &lt;!--Style--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,650,0,0" Name="Label_Style" 
                         VerticalAlignment="Top" Width="88" Content="Style:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,650,0,0" Name="TextBox_Style" 
                       VerticalAlignment="Top" Width="161" /&gt;
              
              &lt;!--TileMatrixSet--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="268,654,0,0" Name="Label_TileMatrixSet" 
                         VerticalAlignment="Top" Width="88" Content="TileMatrixSet:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="352,654,0,0" Name="TextBox_TileMatrixSet" 
                       VerticalAlignment="Top" Width="149" /&gt;
              
              &lt;!--Title--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,688,0,0" Name="Label_Title" 
                         VerticalAlignment="Top" Width="120" Content="Title:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,684,0,0" Name="TextBox_Title" 
                       VerticalAlignment="Top" Width="400" /&gt;
              
              &lt;!--Token--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,717,0,0" Name="Label_Token" 
                         VerticalAlignment="Top" Width="120" Content="Token:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,713,0,0" Name="TextBox_Token" 
                       VerticalAlignment="Top" Width="400" /&gt;
              
              &lt;!--Url--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,746,0,0" Name="Label_Url" 
                         VerticalAlignment="Top" Width="120" Content="Url:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,742,0,0" Name="TextBox_Url" 
                       VerticalAlignment="Top" Width="400" /&gt;
              
              &lt;!--Version--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="7,775,0,0" Name="Label_Version" 
                         VerticalAlignment="Top" Width="120" Content="Version:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="101,771,0,0" Name="TextBox_Version" 
                       VerticalAlignment="Top" Width="400" /&gt;
              
              
              &lt;!--Display detailed WMTSLayer.LayerInfo about the specific sub-Layer that is being displayed. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="543,622,0,0" Name="Label_WMTSLayerLayerInfo" 
                         VerticalAlignment="Top" Width="187" Content="WMTSLayer.LayerInfo" FontSize="14" FontWeight="Bold" /&gt;
              
              &lt;!--Abstract--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="511,656,0,0" Name="Label_Abstract" 
                         VerticalAlignment="Top" Width="50" Content="Abstract:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="569,652,0,0" Name="TextBox_Abstract" 
                       VerticalAlignment="Top" Width="67" /&gt;
              
              &lt;!--Formats--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="642,654,0,0" Name="Label_Formats" 
                         VerticalAlignment="Top" Width="97" Content="Formats [Count]:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="743,652,0,0" Name="TextBox_Formats" 
                       VerticalAlignment="Top" Width="44" /&gt;
              
              &lt;!--Identifier--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="508,683,0,0" Name="Label_Identifier" 
                         VerticalAlignment="Top" Width="60" Content="Identifier:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="571,684,0,0" Name="TextBox_Identifier" 
                       VerticalAlignment="Top" Width="216" /&gt;
              
              &lt;!--Styles--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="511,713,0,0" Name="Label_Styles" 
                         VerticalAlignment="Top" Width="86" Content="Styles [Count]:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="603,713,0,0" Name="TextBox_Styles" 
                       VerticalAlignment="Top" Width="184" /&gt;
              
              &lt;!--TileMatrixSets--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="507,742,0,0" Name="Label_TileMatrixSets" 
                         VerticalAlignment="Top" Width="129" Content="TileMatrixSets [Count]:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="642,740,0,0" Name="TextBox_TileMatrixSets" 
                       VerticalAlignment="Top" Width="145" /&gt;
              
              &lt;!--Title--&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="513,768,0,0" Name="Label_Title2" 
                         VerticalAlignment="Top" Width="48" Content="Title:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="554,769,0,0" Name="TextBox_Title2" 
                       VerticalAlignment="Top" Width="236" /&gt;
              
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="74" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="756" 
                     TextWrapping="Wrap" Margin="12,12,0,0" 
                     Text="Select a layer name in the ListBox and click the 'Get WMTSLayer information' button to display
                     various WMTSLayer and WMTSLayer.LayerInfo Property information. The Map will automatically zoom to the
                     Extent of the layer. Properties with the words '[Count]' gives the count of the number of items in 
                     an IEnumerable; more coding could be done in the code-behind to dig deeper into the collection." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function takes the user choice for a specific WmtsLayer.Layer from a ListBox and refreshes 
              // the Map using that layer.
              
              // Get the user choice for the name of the WmtsLayer.Layer.
              string theTitle = ListBox1.SelectedItem.ToString();
              
              // Get the WmtsLayer that was defined in XAML.
              ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer theWMTSLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer)Map1.Layers["WMTS1"];
              
              // Set the specific layer to display in the WmtsLayer. This will internally cause a WmtsLayer.Refresh
              // which in turn causes the WmtsLayer.Initialized Method to execute.
              theWMTSLayer.Layer = theTitle;
            }
            
            private void WmtsLayer_Initialized(object sender, System.EventArgs e)
            {
              // This function loops through all of the sub-Layers in a WmtsLayer service and displays information
              // about the WmtsLayer service in general and details about a particular WmtsLayer.Layer specified
              // by the user choice. This function initiates whenever the WmtsLayer first initializes or as a result 
              // of specifying a different WmtsLayer.Layer. 
              
              // Clear out all of the sub-Layer names of the WmtsLayer service.
              ListBox1.Items.Clear();
              
              // Get the WmtsLayer that was defined in XAML.
              ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer theWMTSLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer)Map1.Layers["WMTS1"];
              
              // Get all of the sub-Layer information from the WmtsLayer.
              IEnumerable&lt;ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo&gt; theLayers = theWMTSLayer.LayerInfos;
              if (theLayers != null)
              {
                foreach (ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo oneWMTSLayerInfo in theLayers)
                {
              	//Display the name of the WmtsLayer sub-Layer's in the ListBox. 
              	ListBox1.Items.Add(oneWMTSLayerInfo.Title);
                }
              }
              
              // Set the Map.Extent to the WmtsLayer sub-Layer and display the numerical extent in a TextBox.
              if (theWMTSLayer.FullExtent != null)
              {
                Map1.Extent = theWMTSLayer.FullExtent;
                TextBox_FullExtent.Text = theWMTSLayer.FullExtent.ToString();
              }
              
              // Display the Description of the WmtsLayer service.
              if (theWMTSLayer.Description != null)
              {
                TextBox_Description.Text = theWMTSLayer.Description;
              }
              
              // Display the ImageFormat of the WmtsLayer service.
              if (theWMTSLayer.ImageFormat != null)
              {
                TextBox_ImageFormat.Text = theWMTSLayer.ImageFormat;
              }
              
              // Display the currently displaying sub-Layer name of the WmtsLayer service.
              if (theWMTSLayer.Layer != null)
              {
                TextBox_Layer.Text = theWMTSLayer.Layer;
              }
              
              // Display the LayerInfos.Count of the WmtsLayer service. More information is available if you
              // care to loop through the IEnumerable&lt;WmtsLayer.WmtsLayerInfo&gt; objects.
              if (theWMTSLayer.LayerInfos != null)
              {
                TextBox_LayerInfos.Text = theWMTSLayer.LayerInfos.Count.ToString();
              }
              
              // Display the ProxyUrl of the WmtsLayer service.
              if (theWMTSLayer.ProxyUrl != null)
              {
                TextBox_ProxyUrl.Text = theWMTSLayer.ProxyUrl;
              }
              
              // Display the ServiceMode Enumeration of the WmtsLayer service.
              TextBox_ServiceMode.Text = theWMTSLayer.ServiceMode.ToString(); //An Enumeration.
              
              // Display the Style of the WmtsLayer service.
              if (theWMTSLayer.Style != null)
              {
                TextBox_Style.Text = theWMTSLayer.Style;
              }
              
              // Display the TileMatrix of the WmtsLayer service.
              if (theWMTSLayer.TileMatrixSet != null)
              {
                TextBox_TileMatrixSet.Text = theWMTSLayer.TileMatrixSet;
              }
              
              // Display the Title of the WmtsLayer service. Select the name of the Title in the ListBox to
              // show which sub-Layer is currently being displayed in the Map.
              if (theWMTSLayer.Title != null)
              {
                TextBox_Title.Text = theWMTSLayer.Title;
                ListBox1.SelectedItem = theWMTSLayer.Title;
              }
              
              // Display the Token of the WmtsLayer service.
              if (theWMTSLayer.Token != null)
              {
                TextBox_Token.Text = theWMTSLayer.Token;
              }
              
              // Display the Url of the WmtsLayer service.
              if (theWMTSLayer.Url != null)
              {
                TextBox_Url.Text = theWMTSLayer.Url;
              }
              
              // Display the Version of the WmtsLayer service.
              if (theWMTSLayer.Version != null)
              {
                TextBox_Version.Text = theWMTSLayer.Version;
              }
              
              // Get the WmtsLayer.Title from the user choice in the ListBox. This will be used to display detailed 
              // information (WmtsLayer.WmtsLayerInfo) about the specific WmtsLayer.Layer currently being shown in the map.
              string theTitle = null;
              if (ListBox1.SelectedItem != null)
              {
                theTitle = ListBox1.SelectedItem.ToString();
              }
              
              // Loop through all of the sub-Layers of the WmtsLayer and display WmtsLayer.WmtsLayerInfo Property
              // information that match the user choice in the ListBox.
              if (theLayers != null)
              {
                foreach (ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo oneWMTSLayerInfo in theLayers)
                {
                  if (oneWMTSLayerInfo.Title == theTitle)
                  {
                    // Display the Abstract of the WmtsLayer.WmtsLayerInfo sub-Layer.
                    if (oneWMTSLayerInfo.Abstract != null)
                    {
                      TextBox_Abstract.Text = oneWMTSLayerInfo.Abstract;
                    }
                    
                    // Display the Formats of the WmtsLayer.WmtsLayerInfo sub-Layer. More information is available if you
                    // care to loop through the IEnumerable&lt;String&gt; objects.
                    if (oneWMTSLayerInfo.Formats != null)
                    {
                      TextBox_Formats.Text = oneWMTSLayerInfo.Formats.Count.ToString();
                    }
                    
                    // Display the Identifier of the WmtsLayer.WmtsLayerInfo sub-Layer.
                    if (oneWMTSLayerInfo.Identifier != null)
                    {
                      TextBox_Identifier.Text = oneWMTSLayerInfo.Identifier;
                    }
                    
                    // Display the Styles of the WmtsLayer.WmtsLayerInfo sub-Layer. More information is available if you
                    // care to loop through the IEnumerable&lt;String&gt; objects.
                    if (oneWMTSLayerInfo.Styles != null)
                    {
                      TextBox_Styles.Text = oneWMTSLayerInfo.Styles.Count.ToString();
                    }
                    
                    // Display the TileMatrixSets of the WmtsLayer.WmtsLayerInfo sub-Layer. More information is available if you
                    // care to loop through the IEnumerable&lt;String&gt; objects.
                    if (oneWMTSLayerInfo.TileMatrixSets != null)
                    {
                      TextBox_TileMatrixSets.Text = oneWMTSLayerInfo.TileMatrixSets.Count.ToString();
                    }
                    
                    // Display the Title of the WmtsLayer.WmtsLayerInfo sub-Layer.
                    if (oneWMTSLayerInfo.Title != null)
                    {
                      TextBox_Title2.Text = oneWMTSLayerInfo.Title;
                    }
                  }
                }
              }
            }
            
            private void WmtsLayer_InitializationFailed(object sender, System.EventArgs e)
            {
              // This function displays any error information of the WmtsLayer fails to load.
              
              ESRI.ArcGIS.Client.Layer aLayer = (ESRI.ArcGIS.Client.Layer)sender;
              MessageBox.Show(aLayer.InitializationFailure.Message);
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' This function takes the user choice for a specific WmtsLayer.Layer from a ListBox and refreshes 
              ' the Map using that layer.
              
              ' Get the user choice for the name of the WmtsLayer.Layer.
              Dim theTitle As String = ListBox1.SelectedItem.ToString
              
              ' Get the WmtsLayer that was defined in XAML.
              Dim theWMTSLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer = Map1.Layers("WMTS1")
              
              ' Set the specific layer to display in the WmtsLayer. This will internally cause a WmtsLayer.Refresh
              ' which in turn causes the WmtsLayer.Initialized Method to execute.
              theWMTSLayer.Layer = theTitle
              
            End Sub
              
            Private Sub WmtsLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
              
              ' This function loops through all of the sub-Layers in a WmtsLayer service and displays information
              ' about the WmtsLayer service in general and details about a particular WmtsLayer.Layer specified
              ' by the user choice. This function initiates whenever the WmtsLayer first initializes or as a result 
              ' of specifying a different WmtsLayer.Layer. 
              
              ' Clear out all of the sub-Layer names of the WmtsLayer service.
              ListBox1.Items.Clear()
              
              ' Get the WmtsLayer that was defined in XAML.
              Dim theWMTSLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer = Map1.Layers("WMTS1")
              
              ' Get all of the sub-Layer information from the WmtsLayer.
              Dim theLayers As IEnumerable(Of ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo) = theWMTSLayer.LayerInfos
              If theLayers IsNot Nothing Then
                For Each oneWMTSLayerInfo As ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo In theLayers
                  'Display the name of the WmtsLayer sub-Layer's in the ListBox. 
                  ListBox1.Items.Add(oneWMTSLayerInfo.Title)
                Next
              End If
              
              ' Set the Map.Extent to the WmtsLayer sub-Layer and display the numerical extent in a TextBox.
              If theWMTSLayer.FullExtent IsNot Nothing Then
                Map1.Extent = theWMTSLayer.FullExtent
                TextBox_FullExtent.Text = theWMTSLayer.FullExtent.ToString
              End If
              
              ' Display the Description of the WmtsLayer service.
              If theWMTSLayer.Description IsNot Nothing Then
                TextBox_Description.Text = theWMTSLayer.Description
              End If
              
              ' Display the ImageFormat of the WmtsLayer service.
              If theWMTSLayer.ImageFormat IsNot Nothing Then
                TextBox_ImageFormat.Text = theWMTSLayer.ImageFormat
              End If
              
              ' Display the currently displaying sub-Layer name of the WmtsLayer service.
              If theWMTSLayer.Layer IsNot Nothing Then
                TextBox_Layer.Text = theWMTSLayer.Layer
              End If
              
              ' Display the LayerInfos.Count of the WmtsLayer service. More information is available if you
              ' care to loop through the IEnumerable(Of WmtsLayer.WmtsLayerInfo) objects.
              If theWMTSLayer.LayerInfos IsNot Nothing Then
                TextBox_LayerInfos.Text = theWMTSLayer.LayerInfos.Count.ToString
              End If
              
              ' Display the ProxyUrl of the WmtsLayer service.
              If theWMTSLayer.ProxyUrl IsNot Nothing Then
                TextBox_ProxyUrl.Text = theWMTSLayer.ProxyUrl
              End If
              
              ' Display the ServiceMode Enumeration of the WmtsLayer service.
              TextBox_ServiceMode.Text = theWMTSLayer.ServiceMode.ToString 'An Enumeration.
              
              ' Display the Style of the WmtsLayer service.
              If theWMTSLayer.Style IsNot Nothing Then
                TextBox_Style.Text = theWMTSLayer.Style
              End If
              
              ' Display the TileMatrix of the WmtsLayer service.
              If theWMTSLayer.TileMatrixSet IsNot Nothing Then
                TextBox_TileMatrixSet.Text = theWMTSLayer.TileMatrixSet
              End If
              
              ' Display the Title of the WmtsLayer service. Select the name of the Title in the ListBox to
              ' show which sub-Layer is currently being displayed in the Map.
              If theWMTSLayer.Title IsNot Nothing Then
                TextBox_Title.Text = theWMTSLayer.Title
                ListBox1.SelectedItem = theWMTSLayer.Title
              End If
              
              ' Display the Token of the WmtsLayer service.
              If theWMTSLayer.Token IsNot Nothing Then
                TextBox_Token.Text = theWMTSLayer.Token
              End If
              
              ' Display the Url of the WmtsLayer service.
              If theWMTSLayer.Url IsNot Nothing Then
                TextBox_Url.Text = theWMTSLayer.Url
              End If
              
              ' Display the Version of the WmtsLayer service.
              If theWMTSLayer.Version IsNot Nothing Then
                TextBox_Version.Text = theWMTSLayer.Version
              End If
              
              ' Get the WmtsLayer.Title from the user choice in the ListBox. This will be used to display detailed 
              ' information (WmtsLayer.WmtsLayerInfo) about the specific WmtsLayer.Layer currently being shown in the map.
              Dim theTitle As String = Nothing
              If ListBox1.SelectedItem IsNot Nothing Then
                theTitle = ListBox1.SelectedItem.ToString
              End If
              
              ' Loop through all of the sub-Layers of the WmtsLayer and display WmtsLayer.WmtsLayerInfo Property
              ' information that match the user choice in the ListBox.
              If theLayers IsNot Nothing Then
                For Each oneWMTSLayerInfo As ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo In theLayers
                  If oneWMTSLayerInfo.Title = theTitle Then
                    
                    ' Display the Abstract of the WmtsLayer.WmtsLayerInfo sub-Layer.
                    If oneWMTSLayerInfo.Abstract IsNot Nothing Then
                      TextBox_Abstract.Text = oneWMTSLayerInfo.Abstract
                    End If
                    
                    ' Display the Formats of the WmtsLayer.WmtsLayerInfo sub-Layer. More information is available if you
                    ' care to loop through the IEnumerable(Of String) objects.
                    If oneWMTSLayerInfo.Formats IsNot Nothing Then
                      TextBox_Formats.Text = oneWMTSLayerInfo.Formats.Count.ToString
                    End If
                    
                    ' Display the Identifier of the WmtsLayer.WmtsLayerInfo sub-Layer.
                    If oneWMTSLayerInfo.Identifier IsNot Nothing Then
                      TextBox_Identifier.Text = oneWMTSLayerInfo.Identifier
                    End If
                    
                    ' Display the Styles of the WmtsLayer.WmtsLayerInfo sub-Layer. More information is available if you
                    ' care to loop through the IEnumerable(Of String) objects.
                    If oneWMTSLayerInfo.Styles IsNot Nothing Then
                      TextBox_Styles.Text = oneWMTSLayerInfo.Styles.Count.ToString
                    End If
                    
                    ' Display the TileMatrixSets of the WmtsLayer.WmtsLayerInfo sub-Layer. More information is available if you
                    ' care to loop through the IEnumerable(Of String) objects.
                    If oneWMTSLayerInfo.TileMatrixSets IsNot Nothing Then
                      TextBox_TileMatrixSets.Text = oneWMTSLayerInfo.TileMatrixSets.Count.ToString
                    End If
                    
                    ' Display the Title of the WmtsLayer.WmtsLayerInfo sub-Layer.
                    If oneWMTSLayerInfo.Title IsNot Nothing Then
                      TextBox_Title2.Text = oneWMTSLayerInfo.Title
                    End If
                    
                  End If
                Next
              End If
              
            End Sub
              
            Private Sub WmtsLayer_InitializationFailed(ByVal sender As System.Object, ByVal e As System.EventArgs)
              
              ' This function displays any error information of the WmtsLayer fails to load.
              
              Dim aLayer As ESRI.ArcGIS.Client.Layer = sender
              MessageBox.Show(aLayer.InitializationFailure.Message)
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.UrlProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Url"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.TokenProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Token"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ClientCertificateProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ClientCertificate"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.CredentialsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Credentials"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ServiceModeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ServiceMode"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Initialize">
            <summary>
            Initializes this WMTS layer.  Calls GetCapabilities if SkipGetCapabilities is false. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a URL to the specific tile in a WmtsLayer.
            </summary>
            <remarks>
            <para>
            A WmtsLayer is made up of multiple tiles (or images) that are automatically put together in 
            a mosaic for display in a Map Control. The tiles are pre-generated on a WMTS server and can 
            be accessed individually via a URL. In order to access the URL for a specific tile it is 
            required to know the Level, Row, and Column information. As of ArcGIS Server version 10.1, 
            serving WMTS layers as a native REST service is supported.
            </para>
            <para>
            It is possible to obtain the complete list of various Level, Row, and Column input parameter 
            values that can be used by the GetTileUrl Method by interrogating the XML information 
            returned from a GetCapabilities request in the address bar of a web browser but this is 
            tedious (see the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer">WmtsLayer</see> 
            documentation for a few examples of using the GetCapabilities request). A programmatic way 
            to determine the various Level, Row, and Column information can be obtained by writing some 
            code-behind logic in the 
            <see cref="E:ESRI.ArcGIS.Client.TiledLayer.TileLoading">WmtsLayer.TileLoading</see> Event 
            (see the code example in this document).
            </para>
            <para>
            If the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ProxyUrl">ProxyUrl</see> 
            Property has been set to create the WmtsLayer, then the output return string of the GetTileUrl 
            Method will have that ProxyUrl value inserted at the beginning.
            </para>
            <para>
            <b>Note:</b> Using Methods are only available in code-behind. You cannot use a Method via XAML.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            After the WmtsLayer loads in the Map Control, the ListBox will be populated with all the 
            combinations of 'Level, Row, and Column' tiles that make up the initial extent of the WmtsLayer 
            image service. Click on any of the combinations in the Listbox and that particular tile will be 
            displayed in an Image Control as well as the Url for that image.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Displaying individual tile images and their URL values for a WmtsLayer." src=" C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.Toolkit.DataSources.WmtsLayer.GetTileUrl.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="78" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="640" 
                   TextWrapping="Wrap" Text="After the WmtsLayer loads in the Map Control, the ListBox will be populated with
                   all the combinations of 'Level, Row, and Column' tiles that make up the initial extent of the WmtsLayer 
                   image service. Click on any of the combinations in the Listbox and that particular tile will be 
                   displayed in an Image Control as well as the Url for that image." /&gt;
              
              &lt;!-- The Map Control. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="33,160,0,0" Name="Label_MapControl" 
                         VerticalAlignment="Top" Width="120" Content="Map Control:"/&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="32,180,0,0" Name="Map1" 
                        VerticalAlignment="Top" WrapAround="True" Height="320" Width="600"&gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:LayerCollection&gt;
                              
                    &lt;!-- 
                    Add a WmtsLayer. The use of a ProxyUrl is needed in addition to the regular Url property because the 
                    WMTS service is not hosted on a site that provides a cross domain policy file (clientaccesspolicy.xml
                    or crossdomain.xml). The InitializationFailed Event is used to notify the user in case the WMTS 
                    service is down. The TileLoading Event provides details about individual tiles in the WMTS service
                    that is necessary to get the input parameters (Level, Row, Column) of the WmtsLayer.GetTileUrl Method. 
                    --&gt;
                    &lt;esri:WmtsLayer ID="WMTS1" ServiceMode="KVP" Layer="usa:states"
                                    Url="http://v2.suite.opengeo.org/geoserver/gwc/service/wmts"
                                    ProxyUrl="http://servicesbeta3.esri.com/SilverlightDemos/ProxyPage/proxy.ashx"
                                    InitializationFailed="WmtsLayer_InitializationFailed"
                                    TileLoading="WmtsLayer_TileLoading"/&gt;
                  &lt;/esri:LayerCollection&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- ListBox results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="33,512,0,0" Name="Label_ListBox1" 
                         VerticalAlignment="Top" Width="194" Content="ListBox Control:"/&gt;
              &lt;ListBox Height="93" HorizontalAlignment="Left" Margin="33,526,0,0" Name="ListBox1" 
                       VerticalAlignment="Top" Width="194" SelectionChanged="ListBox1_SelectionChanged"/&gt;
              
              &lt;!-- TiledLayer.TileLoadEventsArgs. Level, Row, and Column. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,510,0,0" Name="Label_TileLoadEventArgs" 
                         VerticalAlignment="Top" Width="120" Content="TileLoadEventArgs:"/&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,542,0,0" Name="Label_Level" 
                         VerticalAlignment="Top" Width="48" Content="Level:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,536,0,0" Name="TextBox_Level" 
                       VerticalAlignment="Top" Width="52" /&gt;
              &lt;sdk:Label HorizontalAlignment="Left" Margin="239,564,0,208" Name="Label_Row" Width="48" Content="Row:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,566,0,0" Name="TextBox_Row" 
                       VerticalAlignment="Top" Width="51" /&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,602,0,0" Name="Label_Column" 
                         VerticalAlignment="Top" Width="48" Content="Column:" /&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,596,0,0" Name="TextBox_Column" 
                       VerticalAlignment="Top" Width="52" /&gt;
              
              &lt;!-- WmtsLayer.GetTileUrl results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="32,631,0,0" Name="Label_GetTileUrl" 
                         VerticalAlignment="Top" Width="344" Content="WmtsLayer.GetTileUrl:"/&gt;
              &lt;TextBox Height="124" HorizontalAlignment="Left" Margin="32,648,0,0" Name="TextBox_GetTileUrl" 
                       VerticalAlignment="Top" Width="344" TextWrapping="Wrap"/&gt;
              
              &lt;!-- Image Control results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="384,508,0,0" Name="Label_ImageControl1" 
                         VerticalAlignment="Top" Width="198" Content="Image Control:"/&gt;
              &lt;Image Height="250" HorizontalAlignment="Left" Margin="382,522,0,0" Name="Image1" 
                     Stretch="Fill" VerticalAlignment="Top" Width="250" /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void WmtsLayer_InitializationFailed(object sender, System.EventArgs e)
            {
              // Notify the user if there is a failure with the WMTS service.
              ESRI.ArcGIS.Client.Layer aLayer = (ESRI.ArcGIS.Client.Layer)sender;
              MessageBox.Show(aLayer.InitializationFailure.Message);
            }
            
            private void WmtsLayer_TileLoading(object sender, ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs e)
            {
              // This Event will fire for each tile that is loaded in the Map Control. For instance, if it takes 4 tiled images
              // to render the Map Control completely, then this Event will fire 4 times. As you Zoom In or Pan around to other
              // geographic areas in the Map, this Event will continue to fire until all of the tiles have been processed. 
              
              // The e argument of the Event returns a TileLoadEventArgs object.
              ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs myTileLoadEventArgs = e;
              
              // Get the Tile's Level, Row, and Column Properties
              int myLevel = myTileLoadEventArgs.Level;
              int myRow = myTileLoadEventArgs.Row;
              int myColumn = myTileLoadEventArgs.Column;
              
              // Generate a string that is comma delimited with the Level, Row, and Column values and add them to a Listbox.
              string myString = myLevel.ToString() + "," + myRow.ToString() + "," + myColumn.ToString();
              
              // Do not add any duplicates.
              if (! (ListBox1.Items.Contains(myString)))
              {
                ListBox1.Items.Add(myString);
              }
            }
            
            private void ListBox1_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
            {
              // Get the SelectedItem from the Listbox and parse out the Level, Row, and Column arguments necessary to 
              // obtain the Url for a specific tile.
              string theConcatenatedString = ListBox1.SelectedItem;
              string[] theParts = theConcatenatedString.Split(',');
              int theLevel = Convert.ToInt32(theParts[0]);
              int theRow = Convert.ToInt32(theParts[1]);
              int theColumn = Convert.ToInt32(theParts[2]);
              
              // Update the Level, Row, and Column information in the TextBoxes for ease of viewing.
              TextBox_Level.Text = theLevel.ToString();
              TextBox_Row.Text = theRow.ToString();
              TextBox_Column.Text = theColumn.ToString();
              
              // Get the WmtsLayer. 
              ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer theWMTSLayer = (ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer)Map1.Layers["WMTS1"];
              
              // Obtain a specific tile Url from the WmtsLayer using the three arguments for the GetTileUrl Method.
              string theGetTileUrl = theWMTSLayer.GetTileUrl(theLevel, theRow, theColumn);
              TextBox_GetTileUrl.Text = theGetTileUrl;
              
              // Only process valid restults. 
              if (theGetTileUrl != null)
              {
                // Set the specific tile's Url as the Image's Source. 
                Uri myUri = new Uri(theGetTileUrl);
                Image1.Source = new Imaging.BitmapImage(myUri);
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub WmtsLayer_InitializationFailed(ByVal sender As System.Object, ByVal e As System.EventArgs)
              
              ' Notify the user if there is a failure with the WMTS service.
              Dim aLayer As ESRI.ArcGIS.Client.Layer = sender
              MessageBox.Show(aLayer.InitializationFailure.Message)
              
            End Sub
              
            Private Sub WmtsLayer_TileLoading(ByVal sender As System.Object, ByVal e As ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs)
              
              ' This Event will fire for each tile that is loaded in the Map Control. For instance, if it takes 4 tiled images
              ' to render the Map Control completely, then this Event will fire 4 times. As you Zoom In or Pan around to other
              ' geographic areas in the Map, this Event will continue to fire until all of the tiles have been processed. 
              
              ' The e argument of the Event returns a TileLoadEventArgs object.
              Dim myTileLoadEventArgs As ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs = e
              
              ' Get the Tile's Level, Row, and Column Properties
              Dim myLevel As Integer = myTileLoadEventArgs.Level
              Dim myRow As Integer = myTileLoadEventArgs.Row
              Dim myColumn As Integer = myTileLoadEventArgs.Column
              
              ' Generate a string that is comma delimited with the Level, Row, and Column values and add them to a Listbox.
              Dim myString As String = myLevel.ToString + "," + myRow.ToString + "," + myColumn.ToString
              
              ' Do not add any duplicates.
              If Not ListBox1.Items.Contains(myString) Then
                ListBox1.Items.Add(myString)
              End If
              
            End Sub
              
            Private Sub ListBox1_SelectionChanged(ByVal sender As System.Object, ByVal e As System.Windows.Controls.SelectionChangedEventArgs)
              
              ' Get the SelectedItem from the Listbox and parse out the Level, Row, and Column arguments necessary to 
              ' obtain the Url for a specific tile.
              Dim theConcatenatedString As String = ListBox1.SelectedItem
              Dim theParts As String() = Split(theConcatenatedString, ",")
              Dim theLevel As Integer = CInt(theParts(0))
              Dim theRow As Integer = CInt(theParts(1))
              Dim theColumn As Integer = CInt(theParts(2))
              
              ' Update the Level, Row, and Column information in the TextBoxes for ease of viewing.
              TextBox_Level.Text = theLevel.ToString
              TextBox_Row.Text = theRow.ToString
              TextBox_Column.Text = theColumn.ToString
              
              ' Get the WmtsLayer. 
              Dim theWMTSLayer As ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer = Map1.Layers("WMTS1")
              
              ' Obtain a specific tile Url from the WmtsLayer using the three arguments for the GetTileUrl Method.
              Dim theGetTileUrl As String = theWMTSLayer.GetTileUrl(theLevel, theRow, theColumn)
              TextBox_GetTileUrl.Text = theGetTileUrl
              
              ' Only process valid restults. 
              If theGetTileUrl IsNot Nothing Then
                
                ' Set the specific tile's Url as the Image's Source. 
                Dim myUri As New Uri(theGetTileUrl)
                Image1.Source = New Imaging.BitmapImage(myUri)
                  
              End If
              
            End Sub
            </code>
            </example>
            <param name="level">Layer level</param>
            <param name="row">Tile row</param>
            <param name="col">Tile column</param>
            <returns>URL to the tile image</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ReplaceParameter(System.String,System.String,System.String)">
            <summary>
            Replaces the parameter by its value. Make an insensitive replacement since I am not sure about the WMTS specifications.
            </summary>
            <param name="input">The input.</param>
            <param name="parameter">The parameter.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Url">
            <summary>
            Required.  Gets or sets the URL to a WMTS service endpoint.  
            For example,
            http://v2.suite.opengeo.org/geoserver/gwc/service/wmts
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Token">
            <summary>Gets or sets the token for accessing a secure ArcGIS service.</summary>
            <value>The token.</value>
            <remarks>
            ArcGIS Server services may be secured using token authentication. Use 
            <a href="javascript:ApiToConcept('discovering-services', '01n700000004000000', '011v00000007000000')" target="_top">Services Directory</a> 
            to determine if a service requires a
            token to be used. A token is an encrypted string generated by a token service on the
            same ArcGIS Server site and the secured service. The token service can be accessed in a
            browser via the Get Token link in Services Explorer or by navigating to the main token
            service page (e.g. <a href="http://www.example.com/ArcGIS/tokens/gettoken.html">http://www.example.com/ArcGIS/tokens/gettoken.html</a>).
            See the discussion topic on 
            <a href="javascript:ApiToConcept('secure-services', '01n700000022000000', '011v0000000n000000')" target="_top">secure services</a> 
            for more info.
            </remarks>
            <example>
            	<code lang="XAML">
            		<![CDATA[
            <esri:WmtsLayer ID="WmtsLayer"
                Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer/WMTS" 
                Token="T2ILopZdSMylbhKIysHa-8YgBVNPjRHsK-Kw3VoQS2RUQ0UpUAj30vGfT92YlEue" />]]>
            	</code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ProxyUrl">
            <summary>
            Optional. Gets or sets the URL to a proxy service that brokers Web requests between the client application 
            and a WMTS service. Use a proxy service when the WMTS service is not hosted on a site that provides
            a cross domain policy file (clientaccesspolicy.xml or crossdomain.xml). 
            
            </summary>
            <value>The proxy URL string.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ClientCertificate">
            <summary>
            Gets or sets the client certificate that is sent to the host and used to authenticate the request.
            </summary>
            <value>The client certificate used for authentication.</value>
            <remarks>
            <para>
            A client certificate is an electronic document which uses a digital signature to bind a public key with an identity. 
            A client certificate is used to verify that a public key belongs to an individual or an organization. When a client 
            certificate is valid, access to secured content over the https:// is enabled. Client certificates fall under the 
            technology umbrella known as a Public-Key Infrastructure (PKI). PKI is a large complex body of standards, policies, 
            protocols, and practices that are beyond the scope this documentation. The following Microsoft document should give 
            the developer a starting point to understand PKI: 
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb427432(v=vs.85).aspx" target="_blank">Public Key Infrastructure</a>.
            </para>
            <para>
            ArcGIS Server version 10.1 and higher has the ability to leverage PKI solutions in 'Commercial Off the Shelf' (COTS) Web servers 
            such as: Microsoft Internet Information Server (IIS), Oracle WebLogic, IBM WebSphere, etc. through the use of the 
            ArcGIS Web Adaptor. The requirements for using PKI in ArcGIS Server include:
            </para>
            <list type="number">
              <item>The ArcGIS Web Adaptor must be setup as the gateway to ArcGIS Server.</item>
              <item>The Web Server hosting the ArcGIS Web Adaptor must be configured to require client certificates for user authentication.</item>
              <item>ArcGIS Server Site must be configured to: (a)	Delegate user authentication to the Web Tier and (b) Use an identity store (LDAP, Windows Active Directory, etc.) supported by the Web Server.</item>
            </list>
            <para>
            When a request is made for a resource on ArcGIS Server, the Web Server will authenticate the user by validating the 
            client certificate provided. The request (along with the user name) is then forwarded to ArcGIS Server via the Web 
            Adaptor. ArcGIS Server will verify that the specified user has access to the requested resource before sending back 
            the appropriate response. For more information on using PKI techniques to set up and use client certificates, see 
            the ArcGIS Server documentation.
            </para>
            <para>
            The ArcGIS Runtime for WPF requires supplying a valid 
            <a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;l=EN-US&amp;k=k(System.Security.Cryptography.X509Certificates.X509Certificate)&amp;rd=true" target="_blank">Microsoft System.Security.Cryptography.X509Certificates.X509Certificate</a> 
            object as the .ClientCertificate Property in order to gain access to a secured (https://) ArcGIS Server web service 
            based upon PKI. The Microsoft 
            <a href="http://msdn.microsoft.com/en-us/library/ztkw6e67" target="_blank">System.Security.Cryptography.X509Certificates Namespace</a> 
            API documentation provides a starting point for developers to learn how to programmatically access X509Certificate objects. 
            If no client certificates have been set up on a client machine and a user tries to access using an X509Certificate from 
            your custom ArcGIS WPF application, a Windows Security dialog stating "No certificate available. No certificates meet the 
            application. Click OK to continue" will appear:
            </para>
            <para>
            <img border="0" alt="Try to access an X509Certificate when none are installed on the client computer." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.NoPKI_CertificateAvailable.png"/>
            </para>
            <para>
            Whenever an ArcGIS Runtime for WPF based application uses PKI to secure web services, it is important that error checking 
            be added to the application to ensure that the correct X509Certificate is used to access those secured web services. If 
            a user of your ArcGIS WPF client application provides/uses an X509Certificate that is not accepted by the PKI security 
            set up on the ArcGIS Server machine, then an error will be thrown. The following are a couple of different error messages 
            that could occur:
            </para>
            <para>
            "Error initializing layer: The remote server returned an error: (403) Forbidden.":
            </para>
            <para>
            <img border="0" alt="Using an incorrect X509Certificate for the .ClientProperty return 403 Forbidden error." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.403ForbiddenAccessDenied.png"/>
            </para>
            <para>
            "Error initializing layer: The remote server returned an error: (401) Unauthorized.":
            </para>
            <para>
            <img border="0" alt="Using an incorrect X509Certificate for the .ClientProperty return 401 Unauthorized error." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.401Unauthorized.png"/>
            </para>
            <para>
            Depending on the particular ArcGIS Runtime for WPF object that is used, the developer will need to write code in the 
            appropriate error handling event. For example: an ArcGISDynmaicMapServiceLayer should have error trapping code in 
            the InitializationFailed Event; a QueryTask should have error trapping code in the Failed Event, a PrintTask should 
            have error trapping code in the ExecuteCompleted Event (via the PrintEventArgs), etc.
            </para>
            <para>
            The .ClientCertificate Property has been added to numerous ArcGIS Runtime for WPF objects. Accessing and using an 
            X509Certificate is basically the same for each of the ArcGIS Runtime for WPF objects with  a .ClientCertificate 
            Property. There are code examples of using the X509Certificate in the 
            <see cref="P:ESRI.ArcGIS.Client.DynamicMapServiceLayer.ClientCertificate">DynamicMapServiceLayer.ClientCertificate</see> 
            Property, 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.ClientCertificate">ArcGISTiledMapServiceLayer.ClientCertificate</see> 
            Property, 
            <see cref="M:ESRI.ArcGIS.Client.Printing.PrintTask.ClientCertificate">Printing.PrintTask.ClientCertificate</see> 
            Property (code-behind only options) and 
            <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.ClientCertificate">FeatureLayer.ClientCertificate</see> Property 
            (Model-View-View-Model (MVVM) pattern using XAML and code-behind). Remember the key to accessing a PKI based 
            secured ArcGIS Server web service is to first provide the appropriate .ClientCertificate Property credentials 
            during construction of the object and prior to using (i.e Set/Write) any of the other properties/methods of 
            the ArcGIS Runtime for WPF object, otherwise an error accessing that object will result.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Credentials">
            <summary>
            Gets or sets the network credentials that are sent to the host and used to authenticate the request.
            </summary>
            <value>The credentials used for authentication.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ServiceMode">
            <summary>
            Gets or sets the service mode i.e. "KVP" or "RESTful". By default, it's "RESTful".
            </summary>
            <remarks>
            If the mode doesn't match the service, it won't create the WMTS layer successfully. </remarks>
            <value>The service mode.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Version">
            <summary>
            Optional. Gets or sets the WMTS version.
            The default value is 1.0.0
            </summary>
            <remarks>At this time, the only possible value is 1.0.0 </remarks>
            <value>The version string.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Layer">
            <summary>
            Gets or sets the layer identifier displayed by the WMTS service.
            </summary>
            <remarks>
            If the layer is not set explicitly, the first layer respecting the TileMatrixSet will be used.</remarks>
            <value>The layer.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.TileMatrixSet">
            <summary>
            Gets or sets the tile matrix set.
            It defines the tileMatrixSet the layer will use. 
            </summary>
            <remarks>
            If the tile matrix set is not set explicitly, the first tile matrix set supported by the WMTS will be used.</remarks>
            <value>The tile matrix set.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Style">
            <summary>
            Gets or sets the style to apply to the WMTS layer.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.ImageFormat">
            <summary>
            Gets or sets the image format used by the WMTS layer.
            </summary>
            <value>The image format.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.SkipGetCapabilities">
            <summary>
            Optional. Gets or sets a value indicating whether to skip a request to get capabilities. 
            Default value is false.  Set SkipGetCapabilities if the site hosting the WMTS service does not provide a
            cross domain policy file and you do not have a proxy page.  In this case, you must set the WMTS service version.
            If true, the initial and full extent of the WMTS Silverlight layer will not be defined.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Title">
            <summary>
            The title of the currently active layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.Description">
            <summary>
            Gets or sets the description of the currently active layer.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.LayerInfos">
            <summary>
            An enumeration of WmtsLayerInfo describing the layers available for this WMTS service.
            </summary>
            <remarks>
            This enumeration is only available if SkipGetCapabilities is false and after the layer is initialized.
            </remarks>
            <value>The layer infos.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.DimensionValues">
            <summary>
             Gets or sets the dimensional value(s) used by the WMTS layer to request the tiles.
            </summary>
            <para>Examples of dimensions are Time, Elevation and Band but the service can define any other dimension property that exists in the multidimensional layer collection being served.</para>
            <para>If the DimensionValues collection doesn't specify the value for a dimension supported by the service, the following value will be used by order of priority:
            <list type="bullet">
            <item>the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.Default"/> value if not null.</item>
            <item>the 'current' value if the dimension <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.SupportsCurrent">supports a current value</see>.</item>
            <item>the first value in <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.Values"/>.</item>
            </list>
            </para>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.TileInfo">
            <summary>
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsServiceMode">
            <summary>
            Indicates which architecture style is using the server : procedure oriented (KVP) or resource oriented (RESTFul)
            </summary>
            <remarks>The procedure oriented architecture style with SOAP encodings is not supported.</remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsServiceMode.KVP">
            <summary>
            The WMTS server operates in a procedure oriented architecture style.
            HTTP GET Transfer of operation requests is using KVP (Key-Value-Pair) encodings.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsServiceMode.RESTful">
            <summary>
            The WMTS server operates in a resource oriented architecture style (REST).
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo">
            <summary>
            Information about a WMTS layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.Identifier">
            <summary>
            Gets the identifier of the layer.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.Title">
            <summary>
            Gets the title of the layer.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.Abstract">
            <summary>
            Gets the abstract for the layer.
            </summary>
            <value>The abstract.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.Formats">
            <summary>
            Gets the enumeration of image formats supported by the layer.
            </summary>
            <value>The formats.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.Styles">
            <summary>
            Gets the enumeration of styles supported by the layer.
            </summary>
            <value>The styles.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.TileMatrixSets">
            <summary>
            Gets the enumeration of tile matrix sets supported by the layer.
            </summary>
            <value>The tile matrix sets.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.DimensionInfos">
            <summary>
            Gets the extra dimensions for a tile request.
            </summary>
            <value>
            The extra dimensions supported by the layer.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.Extent">
            <summary>
            Gets the extent of the layer.
            </summary>
            <value>The extent.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo">
            <summary>
            WMTS Metadata about a particular dimension that the tiles of a layer are available.
            </summary>
            <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsLayerInfo.DimensionInfos"/>&gt;
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.Identifier">
            <summary>
            Gets the name of dimensional axis.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.Title">
            <summary>
            Gets the title of this dimension.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.Abstract">
            <summary>
            Gets the brief narrative description of this dimension.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.Default">
            <summary>
            Gets the Default value that will be used if a tile request does not specify a value or uses the keyword 'default'.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.SupportsCurrent">
            <summary>
            Gets a flag indicating whether that temporal data are normally kept current and that the request value of this dimension accepts the keyword 'current'.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.WmtsDimensionInfo.Values">
            <summary>
            Gets the available value for this dimension..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.StyleInfo.Identifier">
            <summary>
            Gets the identifier of the style.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue">
            <summary>
            Represents one dimensional value used by the WMTS layer for requesting the tiles.
            </summary>
            <para>Examples of dimensions are Time, Elevation and Band but the service can define any other dimension property that exists in the multidimensional layer collection being served.</para>
            <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.DimensionValues"/>
            <seealso cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValueCollection"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue"/> class.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue.Identifier">
            <summary>
            Gets or sets the dimension identifier.
            </summary>
            <value>
            The dimension identifier.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue.Value">
            <summary>
            Gets or sets the value for the dimension.
            </summary>
            <value>
            The dimension value.
            </value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValueCollection">
            <summary>
            Holds a collection of <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue"/>.
            </summary>
            <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsLayer.DimensionValues"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValueCollection"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValueCollection.#ctor(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValue})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmtsDimensionValueCollection"/> class.
            </summary>
            <param name="dimensions">The dimension values.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.XmlExtension">
            <summary>
            Helper XML extensions
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.XmlExtension.XPathSelectElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XNamespace)">
            <summary>
            Very simplified version of querying an element by XPath.
            Note : System.Xml.Xpath extensions doesn't exist for WP7
            </summary>
            <param name="element">The element.</param>
            <param name="path">The path.</param>
            <param name="ns">The ns.</param>
            <returns></returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the
            same polynomial used by Zip. This type is used internally by DotNetZip; it is generally not used directly
            by applications wishing to create, read, or manipulate zip archive files.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
            Get the CRC32 for the given (word,byte) combo. 
            This is a computation defined by PKzip.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CRC32.TotalBytesRead">
            <summary>
            indicates the total number of bytes read on the CRC stream.
            This is used when writing the ZipDirEntry when compressing files.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read, 
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when reading from a stream, 
             or to calculate a CRC when writing to a stream.  The stream should be used to either 
             read, or write, but not both.  If you intermix reads and writes, the results are
             not defined. 
             </para>
             <para>This class is intended primarily for use internally by the DotNetZip library.</para>
             </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The constructor.
            </summary>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            The constructor.
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream. 
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented.
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
             Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
             This is either the total number of bytes read, or the total number
             of bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.Crc32">
            <summary>
            Provides the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.CanSeek">
            <summary>
            Indicates whether the stream supports seeking. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.Length">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CrcCalculatorStream.Position">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.  
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadCrcException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtilities">
            <summary>
            Collects general purpose utility methods.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtilities.#ctor">
            private null constructor
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtilities.RoundToEvenSecond(System.DateTime)">
             <summary>
             Round the given DateTime value to an even second value.  
             </summary>
            
             <remarks>
             <para>
             Round up in the case of an odd second value.  The rounding does not consider fractional seconds.
             </para>
             <para>
             This is useful because the Zip spec allows storage of time only to the nearest even second.
             So if you want to compare the time of an entry in the archive with it's actual time in the filesystem, you 
             need to round the actual filesystem time, or use a 2-second threshold for the  comparison. 
             </para>
             <para>
             This is most nautrally an extension method for the DateTime class but this library is 
             built for .NET 2.0, not for .NET 3.5;  This means extension methods are a no-no.  
             </para>
             </remarks>
             <param name="source">The DateTime value to round</param>
             <returns>The ruonded DateTime value</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtilities.TrimVolumeAndSwapSlashes(System.String)">
            <summary>
            Utility routine for transforming path names. 
            </summary>
            <param name="pathName">source path.</param>
            <returns>transformed path</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
            <summary>
            Finds a signature in the zip stream. This is useful for finding 
            the end of a zip entry, for example. 
            </summary>
            <param name="stream"></param>
            <param name="SignatureToFind"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtilities.StringToMemoryStream(System.String)">
            <summary>
            Creates a <c>MemoryStream</c> for the given string. This is used internally by Library, specifically by 
            the ZipFile.AddStringAsFile() method.   But it may be useful in other scenarios. 
            </summary>
            <param name="s">The string to use as input for the MemoryStream</param>
            <returns>the MemoryStream. Reading the stream will give you the content of the String.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtilities.GetTempFilename">
            <summary>
            Return a random filename, suitable for use as a temporary file.
            </summary>
            <remarks>
            The System.IO.Path.GetRandomFileName() method is not available on the Compact
            Framework, so this library provides its own substitute. 
            </remarks>
            <returns>a filename of the form DotNetZip-xxxxxxxx.tmp, where xxxxxxxx is replaced 
            by randomly chosen characters.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CountingStream">
            <summary> 
            A Stream wrapper, used for bookkeeping on input or output
            streams.  In some cases, it is not possible to get the Position
            of a stream, let's say, on a write-only output stream like
            ASP.NET's Response.Output, or on a different write-only stream
            provided as the destination for the zip by the application.
            In this case, we can use this counting stream to count the bytes
            read or written.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            The  constructor.
            </summary>
            <param name="s">The underlying stream</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry">
            <summary>
            This class models an entry in the directory contained within the zip file.
            The class is generally not used from within application code, though it is
            used by the ZipFile class.
            </summary>
            <summary>
            Represents a single entry in a ZipFile. Typically, applications
            get a ZipEntry by enumerating the entries within a ZipFile,
            or by adding an entry to a ZipFile.  
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.ReadDirEntry(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads one entry from the zip directory structure in the zip file. 
            </summary>
            <param name="s">the stream from which to read.</param>
            <param name="expectedEncoding">
            The text encoding to use if the entry is not marked UTF-8.
            </param>
            <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.IsNotValidZipDirEntrySig(System.Int32)">
            <summary>
            Returns true if the passed-in value is a valid signature for a ZipDirEntry. 
            </summary>
            <param name="signature">the candidate 4-byte signature value.</param>
            <returns>true, if the signature is valid according to the PKWare spec.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.Read(ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile,System.Boolean)">
            <summary>
            Reads one ZipEntry from the given stream.  If the entry is encrypted, we don't
            decrypt at this point.  We also do not decompress.  Mostly we read metadata.
            </summary>
            <param name="zf">the zipfile this entry belongs to.</param>
            <param name="first">true of this is the first entry being read from the stream.</param>
            <returns>the ZipEntry read from the stream.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.Extract(System.IO.Stream)">
            <summary>
            Extracts the entry to the specified stream. 
            </summary>
            
            <remarks>
            
            <para>
            For example, the caller could specify Console.Out, or a MemoryStream.
            </para>
            
            </remarks>
            
            <param name="stream">the stream to which the entry should be extracted.  </param>
            
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.AttributesIndicateDirectory">
            <summary>
            True if the referenced entry is a directory.  
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.LastModified">
             <summary>
             The time and date at which the file indicated by the ZipEntry was last modified. 
             </summary>
             
             <remarks>
             <para>
             The DotNetZip library sets the LastModified value for an entry, equal to the 
             Last Modified time of the file in the filesystem.  If an entry is added from a stream, 
             in which case no Last Modified attribute is available, the library uses 
             <c>System.DateTime.Now</c> for this value, for the given entry. 
             </para>
            
             <para>
             It is also possible to set the LastModified value on an entry, to an arbitrary
             value.  Be aware that because of the way the PKZip specification describes how
             times are stored in the zip file, the full precision of the
             <c>System.DateTime</c> datatype is not stored in LastModified when saving zip
             files.  For more information on how times are formatted, see the PKZip
             specification.
             </para>
            
             <para>
             The last modified time of the file created upon a call to <c>ZipEntry.Extract()</c> 
             may be adjusted during extraction to compensate
             for differences in how the .NET Base Class Library deals
             with daylight saving time (DST) versus how the Windows
             filesystem deals with daylight saving time. 
             See http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx for more context.
             </para>
             <para>
             In a nutshell: Daylight savings time rules change regularly.  In
             2007, for example, the inception week of DST changed.  In 1977,
             DST was in place all year round. In 1945, likewise.  And so on.
             Win32 does not attempt to guess which time zone rules were in
             effect at the time in question.  It will render a time as
             "standard time" and allow the app to change to DST as necessary.
              .NET makes a different choice.
             </para>
             <para>
             Compare the output of FileInfo.LastWriteTime.ToString("f") with
             what you see in the Windows Explorer property sheet for a file that was last
             written to on the other side of the DST transition. For example,
             suppose the file was last modified on October 17, 2003, during DST but
             DST is not currently in effect. Explorer's file properties
             reports Thursday, October 17, 2003, 8:45:38 AM, but .NETs
             FileInfo reports Thursday, October 17, 2003, 9:45 AM.
             </para>
             <para>
             Win32 says, "Thursday, October 17, 2002 8:45:38 AM PST". Note:
             Pacific STANDARD Time. Even though October 17 of that year
             occurred during Pacific Daylight Time, Win32 displays the time as
             standard time because that's what time it is NOW.
             </para>
             <para>
             .NET BCL assumes that the current DST rules were in place at the
             time in question.  So, .NET says, "Well, if the rules in effect
             now were also in effect on October 17, 2003, then that would be
             daylight time" so it displays "Thursday, October 17, 2003, 9:45
             AM PDT" - daylight time.
             </para>
             <para>
             So .NET gives a value which is more intuitively correct, but is
             also potentially incorrect, and which is not invertible. Win32
             gives a value which is intuitively incorrect, but is strictly
             correct.
             </para>
             <para>
             Because of this funkiness, this library adds one hour to the LastModified time
             on the extracted file, if necessary.  That is to say, if the time in question
             had occurred in what the .NET Base Class Library assumed to be DST (an
             assumption that may be wrong given the constantly changing DST rules).
             </para>
             </remarks>
            
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.LocalFileName">
            <summary>
            The name of the filesystem file, referred to by the ZipEntry. 
            </summary>
            
            <remarks>
            <para>
            This may be different than the path used in the archive itself. What I mean is, 
            if you call <c>Zip.AddFile("fooo.txt", AlternativeDirectory)</c>, then the 
            path used for the ZipEntry within the zip archive will be different than this path.  
            This path is used to locate the thing-to-be-zipped on disk. 
            </para>
            <para>
            If the entry is being added from a stream, then this is null (Nothing in VB).
            </para>
            
            </remarks>
            <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.FileName"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.FileName">
             <summary>
             The name of the file contained in the ZipEntry. 
             </summary>
             
             <remarks>
             <para>
             When writing a zip, this path has backslashes replaced with 
             forward slashes, according to the zip spec, for compatibility
             with Unix(tm) and ... get this.... Amiga!
             </para>
            
             <para>
             This is the name of the entry in the ZipFile itself.  This name may be different
             than the name of the filesystem file used to create the entry (LocalFileName). In fact, there
             may be no filesystem file at all, if the entry is created from a stream or a string.
             </para>
            
             <para>
             When setting this property, the value is made permanent only after a call to one of the ZipFile.Save() methods 
             on the ZipFile that contains the ZipEntry. By reading in a ZipFile, then explicitly setting the FileName on an
             entry contained within the ZipFile, and then calling Save(), you will effectively rename the entry within 
             the zip archive.
             </para>
             </remarks>
             <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.LocalFileName"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.VersionNeeded">
            <summary>
            The version of the zip engine needed to read the ZipEntry.  
            </summary>
            <remarks>
            This is usually 0x14. 
            (Decimal 20). If ZIP64 is in use, the version will be decimal 45.  
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.Comment">
             <summary>
             The comment attached to the ZipEntry. 
             </summary>
            
             <remarks>
             By default, the Comment is encoded in IBM437 code page. You can specify 
             an alternative with <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.ProvisionalAlternateEncoding"/>
             </remarks>
             <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</seealso>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.BitField">
             <summary>
             The bitfield as defined in the zip spec. You probably never need to look at this.
             </summary>
            
             <remarks>
             <code>
             bit  0 - set if encryption is used.
             b. 1-2 - set to determine whether normal, max, fast deflation.  
                      This library always leaves these bits unset when writing (indicating 
                      "normal" deflation").
            
             bit  3 - indicates crc32, compressed and uncompressed sizes are zero in
                      local header.  We always leave this as zero on writing, but can read
                      a zip with it nonzero. 
            
             bit  4 - reserved for "enhanced deflating". This library doesn't do enhanced deflating.
             bit  5 - set to indicate the zip is compressed patched data.  This library doesn't do that.
             bit  6 - set if strong encryption is used (must also set bit 1 if bit 6 is set)
             bit  7 - unused
             bit  8 - unused
             bit  9 - unused
             bit 10 - unused
             Bit 11 - Language encoding flag (EFS).  If this bit is set,
                      the filename and comment fields for this file
                      must be encoded using UTF-8. This library currently does not support UTF-8.
             Bit 12 - Reserved by PKWARE for enhanced compression.
             Bit 13 - Used when encrypting the Central Directory to indicate 
                      selected data values in the Local Header are masked to
                      hide their actual values.  See the section describing 
                      the Strong Encryption Specification for details.
             Bit 14 - Reserved by PKWARE.
             Bit 15 - Reserved by PKWARE.
             </code>
             </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.CompressionMethod">
            <summary>
            The compression method employed for this ZipEntry. 
            </summary>
            
            <remarks>
            <para>
            The ZIP specification allows a variety of compression methods.  This library 
            supports just two:  0x08 = Deflate.  0x00 = Store (no compression).  
            </para>
            
            <para>
            When reading an entry from an existing zipfile, the value you retrieve here
            indicates the compression method used on the entry by the original creator of the zip.  
            When writing a zipfile, you can specify either 0x08 (Deflate) or 0x00 (None).  If you 
            try setting something else, you will get an exception.  
            </para>
            
            <para>
            You may wish to set CompressionMethod to 0 (None) when zipping previously compressed
            data like a jpg, png, or mp3 file.  This can save time and cpu cycles.
            Setting CompressionMethod to 0 is equivalent to setting ForceNoCompression to true. 
            </para>
            
            <para>
            When updating a ZipFile, you may not modify the CompressionMethod on an entry that has been encrypted. 
            In other words, if you read an existing ZipFile with one of the ZipFile.Read() methods, and then 
            change the CompressionMethod on an entry that has Encryption not equal to None, you will receive an exception. 
            There is no way to modify the compression on an encrypted entry, without extracting it and re-adding it 
            into the ZipFile.  
            </para>
            </remarks>
            
            <example>
            In this example, the first entry added to the zip archive uses 
            the default behavior - compression is used where it makes sense.  
            The second entry, the MP3 file, is added to the archive without being compressed.
            <code>
            using (ZipFile zip = new ZipFile(ZipFileToCreate))
            {
              ZipEntry e1= zip.AddFile(@"c:\temp\Readme.txt");
              ZipEntry e2= zip.AddFile(@"c:\temp\StopThisTrain.mp3");
              e2.CompressionMethod = 0;
              zip.Save();
            }
            </code>
            
            <code lang="VB">
            Using zip as new ZipFile(ZipFileToCreate)
              zip.AddFile("c:\temp\Readme.txt")
              Dim e2 as ZipEntry = zip.AddFile("c:\temp\StopThisTrain.mp3")
              e2.CompressionMethod = 0
              zip.Save
            End Using
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.CompressedSize">
            <summary>
            The compressed size of the file, in bytes, within the zip archive. 
            </summary>
            <remarks>
            The compressed size is computed during compression. This means that it is only
            valid to read this AFTER reading in an existing zip file, or AFTER saving a
            zipfile you are creating.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.UncompressedSize">
            <summary>
            The size of the file, in bytes, before compression, or after extraction. 
            </summary>
            <remarks>
            This property is valid AFTER reading in an existing zip file, or AFTER saving the 
            ZipFile that contains the ZipEntry.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.CompressionRatio">
             <summary>
             The ratio of compressed size to uncompressed size of the ZipEntry.
             </summary>
             
             <remarks>
             <para>
             This is a ratio of the compressed size to the uncompressed size of the entry,
             expressed as a double in the range of 0 to 100+. A value of 100 indicates no
             compression at all.  It could be higher than 100 when the compression algorithm
             actually inflates the data.
             </para>
            
             <para>
             You could format it for presentation to a user via a format string of "{3,5:F0}%"
             to see it as a percentage. 
             </para>
            
             <para>
             If the size of the original uncompressed file is 0, (indicating a denominator of 0)
             the return value will be zero. 
             </para>
            
             <para>
             This property is valid AFTER reading in an existing zip file, or AFTER saving the 
             ZipFile that contains the ZipEntry.
             </para>
            
             </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.Crc32">
            <summary>
            The CRC (Cyclic Redundancy Check) on the contents of the ZipEntry. 
            </summary>
            
            <remarks>
            You probably don't need to concern yourself with this. The CRC is generated according
            to the algorithm described in the Pkzip specification. It is a read-only property;
            when creating a Zip archive, the CRC for each entry is set only after a call to
            Save() on the containing ZipFile.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.IsDirectory">
            <summary>
            True if the entry is a directory (not a file). 
            This is a readonly property on the entry.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.UsesEncryption">
            <summary>
            A derived property that is <c>true</c> if the entry uses encryption.  
            </summary>
            <remarks>
            This is a readonly property on the entry.
            Upon reading an entry, this bool is determined by
            the data read.  When writing an entry, this bool is
            determined by whether the Encryption property is set to something other than
            EncryptionAlgorithm.None. 
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.Encryption">
             <summary>
             Set this to specify which encryption algorithm to use for the entry.
             </summary>
             
             <remarks>
             <para>
             When setting this property, you must also set a Password on the entry.  The set of
             algorithms supported is determined by the authors of this library.  The PKZIP
             specification from PKWare defines a set of encryption algorithms, and the data formats
             for the zip archive that support them. Other vendors of tools and libraries, such as
             WinZip or Xceed, also specify and support different encryption algorithms and data
             formats.
             </para>
            
             <para>
             There is no common, ubiquitous multi-vendor standard for strong encryption. There is
             broad support for "traditional" Zip encryption, sometimes called Zip 2.0 encryption,
             as specified by PKWare, but this encryption is considered weak. This library currently
             supports AES 128 and 256 in addition to the Zip 2.0 "weak" encryption.
             </para>
            
             <para>
             The WinZip AES encryption algorithms are not supported on the .NET Compact Framework. 
             </para>
             </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.UseUnicodeAsNecessary">
            <summary>
            Set to indicate whether to use UTF-8 encoding on filenames and 
            comments, according to the PKWare specification.  
            </summary>
            <remarks>
            If this flag is set, the entry will be marked as encoded with UTF-8, 
            according to the PWare spec, if necessary.  Necessary means, if the filename or 
            entry comment (if any) cannot be reflexively encoded with the default (IBM437) code page. 
            </remarks>
            <remarks>
            Setting this flag to true is equivalent to setting <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.ProvisionalAlternateEncoding"/> to <c>System.Text.Encoding.UTF8</c>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.ProvisionalAlternateEncoding">
             <summary>
             The text encoding to use for this ZipEntry, when the default
             encoding is insufficient.
             </summary>
            
             <remarks>
             <para>
             According to the zip specification from PKWare, filenames and comments for a
             ZipEntry are encoded either with IBM437 or with UTF8.  But, some archivers do not
             follow the specification, and instead encode characters using the system default
             code page, or an arbitrary code page.  For example, WinRAR when run on a machine in
             Shanghai may encode filenames with the Chinese (Big-5) code page.  This behavior is
             contrary to the Zip specification, but it occurs anyway.  This property exists to
             support that non-compliant behavior when reading or writing zip files.
             </para>
             <para>
             When writing zip archives that will be read by one of these other archivers, use this property to 
             specify the code page to use when encoding filenames and comments into the zip
             file, when the IBM437 code page will not suffice.
             </para>
             <para>
             Be aware that a zip file created after you've explicitly specified the code page will not 
             be compliant to the PKWare specification, and may not be readable by compliant archivers. 
             On the other hand, many archivers are non-compliant and can read zip files created in 
             arbitrary code pages. 
             </para>
             <para>
             When using an arbitrary, non-UTF8 code page for encoding, there is no standard way for the 
             creator (DotNetZip) to specify in the zip file which code page has been used. DotNetZip is not
             able to inspect the zip file and determine the codepage used for the entries within it. Therefore, 
             you, the application author, must determine that.  If you use a codepage which results in filenames
             that are not legal in Windows, you will get exceptions upon extract. Caveat Emptor.
             </para>
             </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.ActualEncoding">
            <summary>
            The text encoding actually used for this ZipEntry.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.EncryptionAlgorithm">
            <summary>
            An enum that provides the various encryption algorithms supported by this library.
            </summary>
            <remarks>
            <para>
            PkzipWeak implies the use of Zip 2.0 encryption, which is known to be weak and subvertible. 
            </para>
            <para>
            A note on interoperability: Values of PkzipWeak and None are specified in the PKWare AppNote.txt document, are 
            considered to be "standard".  Zip archives produced using these options will be interoperable with many other
            zip tools and libraries, including Windows Explorer.
            </para>
            <para>
            Values of WinZipAes128 and WinZipAes256 are not part of the Zip specification, but rather imply the use of a 
            vendor-specific extension from WinZip. If you want to produce interoperable Zip archives, do not use these values. 
            For example, if you
            produce a zip archive using WinZipAes256, you will be able to open it in Windows Explorer on Windows XP and Vista, 
            but you will not be able to extract entries; trying this will lead to an "unspecified error". For this reason, 
            some people have said that a zip archive that uses WinZip's AES encryption is not actually a zip archive at all.
            A zip archive produced this way will be readable with the WinZip tool
            (Version 11 and beyond).
            </para>
            <para>
            There are other third-party tools and libraries, both commercial and otherwise, that support WinZip's 
            AES encryption. These will be able to read AES-encrypted zip archives produced by DotNetZip, and conversely applications 
            that use DotNetZip to read zip archives will be able to read AES-encrypted archives produced by those tools
            or libraries.  Consult the documentation for those other tools and libraries to find out if WinZip's AES 
            encryption is supported. 
            </para>
            <para>
            In case you care: According to the WinZip specification, the actual key used is derived from the 
            ZipEntry.Password via an algorithm that complies with RFC 2898, using an iteration count of 1000.
            I am no security expert, but I think you should use a long-ish password if you employ 256-bit AES
            encryption.  Make it 16 characters or more.  
            </para>
            <para>
            The WinZip AES algorithms are not supported with the version of DotNetZip that runs on the .NET Compact Framework. 
            This is because .NET CF lacks the HMACSHA1 class that is required for producing the archive.
            </para>
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.EncryptionAlgorithm.PkzipWeak">
            <summary>
            Traditional or Classic pkzip encryption.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.EntrySource">
            <summary>
            An enum that specifies the source of the ZipEntry. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.EntrySource.None">
            <summary>
            Default value.  Invalid on a bonafide ZipEntry.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.EntrySource.Filesystem">
            <summary>
            Entry was instantiated by Adding an entry from the filesystem.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.EntrySource.Zipfile">
            <summary>
            Entry was instantiated by reading a zipfile.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.EntrySource.Stream">
            <summary>
            Entry was instantiated via a stream or string.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile">
            <summary>
            The ZipFile type represents a zip archive file.  This is the main type in the 
            DotNetZip class library.  This class reads and writes zip files, as defined in the format
            for zip described by PKWare.  The compression for this implementation was, at one time, based on the
            System.IO.Compression.DeflateStream base class in the .NET Framework
            base class library, available in v2.0 and later of the .NET Framework. As of v1.7 of DotNetZip,
            the compression is provided by a managed-code version of Zlib, included with DotNetZip. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also known as IBM437. 
            </summary>
            <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</seealso>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.#ctor">
             <summary>
             Create a zip file, without specifying a target filename or stream to save to. 
             </summary>
             
             <remarks>
             <para>
             See the documentation on the ZipFile(String) ZipFile constructor
             that accepts a single string argument for basic information on all the ZipFile constructors.
             </para>
            
             <para>
             After instantiating with this constructor and adding entries to the archive,
             your application should call ZipFile.Save(String) or ZipFile.Save(System.IO.Stream) to save to a file or a stream, respectively. 
             If you call the no-argument Save() method, the Save() will throw, as there is no 
             known place to save the file. 
             </para>
            
             <para>
             Instances of the ZipFile class are not multi-thread safe.  You may not party on a single
             instance with multiple threads.  You may have multiple threads that each use a distinct ZipFile 
             instance, or you can synchronize multi-thread access to a single instance.
             </para>
             
             </remarks>
             
             <example>
             This example creates a Zip archive called Backup.zip, containing all the files
             in the directory DirectoryToZip. Files within subdirectories are not zipped up.
             <code>
             using (ZipFile zip = new ZipFile())
             { 
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               foreach (String filename in filenames)
               {
                 Console.WriteLine("Adding {0}...", filename);
                 zip.AddFile(filename);
               }  
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 Dim filename As String
                 For Each filename In filenames
                     Console.WriteLine("Adding {0}...", filename)
                     zip.AddFile(filename)
                 Next
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Read(System.IO.Stream)">
             <summary>
             Reads a zip archive from a stream.
             </summary>
            
             <remarks>
             <para>
             This is useful when when the zip archive content is available from 
             an already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed. 
             </para>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the <c>IBM437</c> codepage.  
             </para>
             </remarks>
            
             <example>
             This example shows how to Read zip content from a stream, and extract
             one entry into a different stream. In this example, the filename
             "NameOfEntryInArchive.doc", refers only to the name of the entry
             within the zip archive.  A file by that name is not created in the
             filesystem.  The I/O is done strictly with the given streams.
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
               zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
               zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Read(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding, the 
             specified TextWriter for status messages, 
             and the specified ReadProgress event handler.
             </summary>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8 encoding
             bit set.  Be careful specifying the encoding.  If the value you use here is not the
             same as the Encoding used when the zip archive was created (possibly by a different
             archiver) you will get unexpected results and possibly exceptions.  See the
             ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding ProvisionalAlternateEncoding
             property for more information.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Read(System.Byte[])">
            <summary>
            Reads a zip archive from a byte array.
            </summary>
            
            <remarks>
            This is useful when the data for the zipfile is contained in a byte array, 
            for example, downloaded from an FTP server without being saved to a
            filesystem. 
            </remarks>
            
            <param name="buffer">
            The byte array containing the zip data.  
            (I don't know why, but sometimes the compiled helpfuile (.chm) indicates a 2d 
            array when it is just one-dimensional.  This is a one-dimensional array.)
            </param>
            
            <returns>an instance of ZipFile. The name on the ZipFile will be null (nothing in VB)). </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Read(System.Byte[],System.Text.Encoding)">
             <summary>
             Reads a zip archive from a byte array, using the given StatusMessageWriter and text Encoding.
             </summary>
             
             <remarks>
             <para>
             This method is useful when the data for the zipfile is contained in a byte array, for
             example when retrieving the data from a database or other non-filesystem store.  
             </para>
             
             </remarks>
             
             <param name="buffer">the byte array containing the zip data.</param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8 encoding
             bit set.  Be careful specifying the encoding.  If the value you use here is not the
             same as the Encoding used when the zip archive was created (possibly by a different
             archiver) you will get unexpected results and possibly exceptions.  See the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
             
             <returns>an instance of ZipFile. The name is set to null.</returns>
             
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.GetEnumerator">
             <summary>
             Generic IEnumerator support, for use of a ZipFile in a foreach construct.  
             </summary>
            
             <remarks>
             You probably do not want to call <c>GetEnumerator</c> explicitly. Instead 
             it is implicitly called when you use a <c>foreach</c> loop in C#, or a 
             <c>For Each</c> loop in VB.
             </remarks>
            
             <example>
             This example reads a zipfile of a given name, then enumerates the 
             entries in that zip file, and displays the information about each 
             entry on the Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               bool header = true;
               foreach (ZipEntry e in zip)
               {
                 if (header)
                 {
                    System.Console.WriteLine("Zipfile: {0}", zip.Name);
                    System.Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded);
                    System.Console.WriteLine("BitField: 0x{0:X2}", e.BitField);
                    System.Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod);
                    System.Console.WriteLine("\n{1,-22} {2,-6} {3,4}   {4,-8}  {0}",
                                 "Filename", "Modified", "Size", "Ratio", "Packed");
                    System.Console.WriteLine(new System.String('-', 72));
                    header = false;
                 }
            
                 System.Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}",
                             e.FileName,
                             e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                             e.UncompressedSize,
                             e.CompressionRatio,
                             e.CompressedSize);
            
                 e.Extract();
               }
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToExtract As String = "c:\foo.zip"
               Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                   Dim header As Boolean = True
                   Dim e As ZipEntry
                   For Each e In zip
                       If header Then
                           Console.WriteLine("Zipfile: {0}", zip.Name)
                           Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded)
                           Console.WriteLine("BitField: 0x{0:X2}", e.BitField)
                           Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod)
                           Console.WriteLine(ChrW(10) &amp; "{1,-22} {2,-6} {3,4}   {4,-8}  {0}", _
                             "Filename", "Modified", "Size", "Ratio", "Packed" )
                           Console.WriteLine(New String("-"c, 72))
                           header = False
                       End If
                       Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}", _
                         e.FileName, _
                         e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"), _
                         e.UncompressedSize, _
                         e.CompressionRatio, _
                         e.CompressedSize )
                       e.Extract
                   Next
               End Using
             </code>
             </example>
             
             <returns>A generic enumerator suitable for use  within a foreach loop.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerator support, for use of a ZipFile in a foreach construct.  
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Extract(System.String,System.IO.Stream)">
             <summary>
             Extract a single specified file from the archive, to the given stream.   
             </summary>
             
             <remarks>
             <para>
             Calling this method, the entry is extracted using the Password that is 
             specified on the ZipFile instance. If you have not set the Password property, then
             the password is null, and the entry is extracted with no password.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has been set. 
             </para>
             </remarks>
             
             <exception cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipException">
             Thrown if the outputStream is not writable, or if the filename is 
             null or empty. The inner exception is an ArgumentException in each case.
             </exception>
            
             <param name="fileName">
             the file to extract. It should include pathnames used in the archive, if any.
             The filename match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior.The
             application can specify pathnames using forward-slashes or backward slashes.
             </param>
            
             <param name="outputStream">
             the stream to which the extacted, decompressed file data is written. 
             The stream must be writable.
             </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Finalize">
            <summary>
            This is the class Destructor, which gets called implicitly when the instance is destroyed.  
            Because the ZipFile type implements IDisposable, this method calls Dispose(false).  
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Dispose">
            <summary>
            Handles closing of the read and write streams associated
            to the ZipFile, if necessary.  The Dispose() method is generally 
            employed implicitly, via a using() {} statement. 
            </summary>
            <example>
            <code>
            using (ZipFile zip = ZipFile.Read(zipfile))
            {
              foreach (ZipEntry e in zip)
              {
                if (WantThisEntry(e.FileName)) 
                  zip.Extract(e.FileName, Console.OpenStandardOutput());
              }
            } // Dispose() is called implicitly here.
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            The Dispose() method.  It disposes any managed resources, 
            if the flag is set, then marks the instance disposed.
            This method is typically not called from application code.
            </summary>
            <param name="disposeManagedResources">indicates whether the method should dispose streams or not.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Comment">
             <summary>
             A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
             This property is read/write for the zipfile. It allows the application to
             specify a comment for the zipfile, or read the comment for the zipfile. 
             After setting this property, changes are only made permanent when you call a
             <c>Save()</c> method.
             </para>
            
             <para>
             According to the zip specification, the comment is not encrypted, even if there is a password
             set on the zip archive. 
             </para>
            
             <para>
             The zip spec does not describe how to encode the comment string in a code page other than IBM437. 
             Therefore, for "compliant" zip tools and libraries, comments will use IBM437.  However, there are
             situations where you want an encoded Comment, for example using code page 950 "Big-5 Chinese".
             DotNetZip will encode the comment in the code page specified by <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding"/>,
             at the time of the call to ZipFile.Save().
             </para>
            
             <para>
             When creating a zip archive using this library, it is possible to change the value of 
             <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding"/> between each entry you add, and between adding entries and the 
             call to Save(). Don't do this.  It will likely result in a zipfile that is not readable by 
             any tool or application. 
             For best interoperability, leave <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding"/> alone, or 
             specify it only once, before adding any entries to the ZipFile instance.
             </para>
            
             </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.CaseSensitiveRetrieval">
            <summary>
            Indicates whether to perform case-sensitive matching on the filename when retrieving
            entries in the zipfile via the string-based indexer.  
            </summary>
            <remarks>
            The default value is <c>false</c>,
            which means DON'T do case-sensitive matching. In other words, retrieving
            zip["ReadMe.Txt"] is the same as zip["readme.txt"].
            It really makes sense to set this to <c>true</c> only if you are not running on
            Windows, which has case-insensitive filenames. But since this library is not built for
            non-Windows platforms, in most cases you should just leave this property alone. 
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.UseUnicodeAsNecessary">
            <summary>
            Indicates whether to encode entry filenames and entry comments using Unicode 
            (UTF-8) according to the PKWare specification, for those filenames and comments
            that cannot be encoded in the IBM437 character set.
            </summary>
            <remarks>
            <para>
            The PKWare specification provides for encoding in either the IBM437 code page, or in UTF-8. 
            This flag selects the encoding according to that specification. 
            By default, this flag is false, and filenames and comments are encoded 
            into the zip file in the IBM437 codepage. 
            Setting this flag to true will specify that
            filenames and comments are encoded with UTF-8. 
            </para>
            <para>
            Zip files created with strict adherence to the PKWare specification
            with respect to UTF-8 encoding can contain entries with filenames containing
            any combination of Unicode characters, including the full 
            range of characters from Chinese, Latin, Hebrew, Greek, Cyrillic, and many 
            other alphabets. 
            However, because the UTF-8 portion of the PKWare specification is not broadly
            supported by other zip libraries and utilities, such zip files may not
            be readable by your favorite zip tool or archiver. In other words, interoperability
            will decrease if you set this flag to true. 
            </para>
            <para>
            In particular, Zip files created with strict adherence to the PKWare 
            specification with respect to UTF-8 encoding will not work well with 
            Explorer in Windows XP or Windows Vista, because Vista compressed folders 
            do not support UTF-8 in zip files.  Vista can read the zip files, but shows
            the filenames incorrectly.  Unpacking from Windows Vista Explorer will result in filenames
            that have rubbish characters in place of the high-order UTF-8 bytes.
            </para>
            <para>
            Also, zip files that use UTF-8 encoding will not work well 
            with Java applications that use the java.util.zip classes, as of 
            v5.0 of the Java runtime. The Java runtime does not correctly 
            implement the PKWare specification in this regard.
            </para>
            <para>
            As a result, we have the unfortunate situation that "correct" 
            behavior by the DotNetZip library with regard to Unicode during zip creation will result 
            in zip files that are readable by strictly compliant and current tools (for example the most 
            recent release of the commercial WinZip tool); but these zip files will
            not  be readable by various other tools or libraries, including Windows Explorer.
            </para>
            <para>
            The DotNetZip library can read and write zip files 
            with UTF8-encoded entries, according to the PKware spec.  If you use DotNetZip for both 
            creating and reading the zip file, and you use UTF-8, there will be no loss of information 
            in the filenames. For example, using a self-extractor created by this
            library will allow you to unpack files correctly with no loss of 
            information in the filenames. 
            </para>
            <para>
            Encoding filenames and comments using the IBM437 codepage, the default
            behavior, will cause loss of information on some filenames,
            but the resulting zipfile will
            be more interoperable with other utilities. As an example of the 
            loss of information, the o-tilde character will be down-coded to plain o. 
            Likewise, the O with a stroke through it, used in Danish and Norwegian,
            will be down-coded to plain o. Chinese characters cannot be represented
            in codepage IBM437; when using the default encoding, Chinese characters in 
            filenames will be represented as ?.  
            </para>
            <para>
            The loss of information associated to the use of the IBM437 encoding can lead to
            runtime errors. For example, using IBM437, any sequence of 4 Chinese characters will
            be encoded as ????.  If your application creates a ZipFile, then adds two files, each
            with names of four Chinese characters each, this will result in a duplicate filename
            exception.  In the case where you add a single file with a name containing four
            Chinese characters, calling Extract() on the entry that has question marks in the
            filename will result in an exception, because the question mark is not legal for use
            within filenames on Windows.  These are just a few examples of the problems associated
            to loss of information.
            </para>
            <para>
            This flag is independent of the encoding of the content within the 
            entries in the zip file.  
            </para>
            <para>
            Rather than specify the encoding in a binary fashion using this flag, an application
            can specify an arbitrary encoding via the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding"/> property.  Setting 
            the encoding explicitly when creating zip archives will result in non-compliant 
            zip files that, curiously, are fairly interoperable.  The challenge is, the PKWare specification
            does not provide for a way to specify that an entry in a zip archive uses a code page that is
            neither IBM437 nor UTF-8.   Therefore 
            if you set the encoding explicitly when creating a zip archive, you must take care upon 
            reading the zip archive to use the same code page.  If you get it wrong, the behavior is 
            undefined and may result in incorrect filenames, exceptions, stomach upset, hair loss, and acne.  
            </para>
            </remarks>
            <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</seealso>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding">
             <summary>
             The text encoding to use when writing new entries to the ZipFile, for those
             entries that cannot be encoded with the default (IBM437) encoding; or, the
             text encoding that was used when reading the entries from the ZipFile.
             </summary>
             
             <remarks>
             <para>
             In its AppNote.txt document, PKWare describes how to specify in the zip entry
             header that a filename or comment containing non-ANSI characters is encoded with
             UTF-8.  But, some archivers do not follow the specification, and instead encode
             super-ANSI characters using the system default code page.  For example, WinRAR
             when run on a machine in Shanghai may encode filenames with the Big-5 Chinese
             (950) code page.  This behavior is contrary to the Zip specification, but it
             occurs anyway.
             </para>
            
             <para>
             When using DotNetZip to write zip archives that will be read by one of these other
             archivers, set this property to specify the code page to use when encoding the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.FileName"/> and <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.Comment"/> for each ZipEntry in the zip file,
             for values that cannot be encoded with the default codepage for zip files, IBM437.
             This is why this property is "provisional".  In all cases, IBM437 is used where
             possible, in other words, where no loss of data would result. It is possible, therefore, to have a given 
             entry with a Comment encoded in IBM437 and a FileName encoded with the specified "provisional" codepage. 
             </para>
            
             <para>
             Be aware that a zip file created after you've explicitly set the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding"/> property to a value other than IBM437 may not be
             compliant to the PKWare specification, and may not be readable by compliant archivers.
             On the other hand, many (most?) archivers are non-compliant and can read zip files
             created in arbitrary code pages.  The trick is to use or specify the proper codepage
             when reading the zip.
             </para>
            
             <para>
             When creating a zip archive using this library, it is possible to change the value of
             <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding"/> between each entry you add, and between
             adding entries and the call to Save(). Don't do this. It will likely result in a
             zipfile that is not readable.  For best interoperability, either leave <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.ProvisionalAlternateEncoding"/> alone, or specify it only once, before adding
             any entries to the ZipFile instance.  There is one exception to this recommendation,
             described later.
             </para>
            
             <para>
             When using an arbitrary, non-UTF8 code page for encoding, there is no standard way for
             the creator application - whether DotNetZip, WinZip, WinRar, or something else - to
             formally specify in the zip file which codepage has been used for the entries. As a
             result, readers of zip files are not able to inspect the zip file and determine the
             codepage that was used for the entries contained within it.  It is left to the
             application or user to determine the necessary codepage when reading zipfiles encoded
             this way.  If you use an incorrect codepage when reading a zipfile, you will get
             entries with filenames that are incorrect, and the incorrect filenames may even contain
             characters that are not legal for use within filenames in Windows. Extracting entries
             with illegal characters in the filenames will lead to exceptions. It's too bad, but
             this is just the way things are with code pages in zip files. Caveat Emptor.
             </para>
            
             <para>
             When using DotNetZip to read a zip archive, and the zip archive uses an arbitrary code
             page, you must specify the encoding to use before or when the zipfile is READ.  This
             means you must use a ZipFile.Read() method that allows you to specify a
             System.Text.Encoding parameter.  Setting the ProvisionalAlternateEncoding property
             after your application has read in the zip archive will not affect the entry names of
             entries that have already been read in, and is probably not what you want.
             </para>
            	
             <para>
             And now, the exception to the rule described above.  One strategy for specifying the
             code page for a given zip file is to describe the code page in a human-readable form in
             the Zip comment. For example, the comment may read "Entries in this archive are encoded
             in the Big5 code page".  For maximum interoperability, the Zip comment in this case
             should be encoded in the default, IBM437 code page.  In this case, the zip comment is
             encoded using a different page than the filenames.  To do this, specify
             ProvisionalAlternateEncoding to your desired region-specific code page, once before
             adding any entries, and then reset ProvisionalAlternateEncoding to IBM437 before
             setting the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Comment"/> property and calling Save().
             </para>
             </remarks>
             
             <seealso cref="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.DefaultEncoding">DefaultEncoding</seealso>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Item(System.Int32)">
             <summary>
             This is an integer indexer into the Zip archive.
             </summary>
             
             <remarks>
             <para>
             This property is read-write. But don't get too excited: When setting the value, the
             only legal value is null. If you assign a non-null value
             (non Nothing in VB), the setter will throw an exception.
             </para>
            
             <para>
             Setting the value to null is equivalent to calling ZipFile.RemoveEntry(String)
             with the filename for the given entry.
             </para>
             </remarks>
             
             <exception cref="T:System.ArgumentException">
             Thrown if the caller attempts to assign a non-null value to the indexer, 
             or if the caller uses an out-of-range index value.
             </exception>
            
             <param name="ix">
             The index value.
             </param>
             
             <returns>
             The ZipEntry within the Zip archive at the specified index. If the 
             entry does not exist in the archive, this indexer throws.
             </returns>
             
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Item(System.String)">
             <summary>
             This is a name-based indexer into the Zip archive.  
             </summary>
             
             <remarks>
             <para>
             Retrieval by the string-based indexer is done on a case-insensitive basis, 
             by default.  Set the <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.CaseSensitiveRetrieval"/> property to use case-sensitive 
             comparisons. 
             </para>
             <para>
             This property is read-write. When setting the value, the
             only legal value is null. Setting the value to null is
             equivalent to calling ZipFile.RemoveEntry(String) with the filename.
             </para>
             <para>
             If you assign a non-null value
             (non Nothing in VB), the setter will throw an exception.
             </para>
             <para>
             It is not always the case that <c>this[value].FileName == value</c>.  In
             the case of directory entries in the archive, you may retrieve them with
             the name of the directory with no trailing slash, even though in the
             entry itself, the actual <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipEntry.FileName"/> property may
             include a trailing slash.  In other words, for a directory entry named
             "dir1", you may find <c>this["dir1"].FileName == "dir1/"</c>.
             </para>
             </remarks>
             
             <example>
             This example extracts only the entries in a zip file that are .txt files.
             <code>
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                   zip[s1].Extract("textfiles");
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the caller attempts to assign a non-null value to the indexer.
             </exception>
            
             <param name="fileName">
             The name of the file, including any directory path, to retrieve from the zip. 
             The filename match is not case-sensitive by default; you can use the
             <see cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.CaseSensitiveRetrieval"/> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
             
             <returns>
             The ZipEntry within the Zip archive, given by the specified filename. If the named
             entry does not exist in the archive, this indexer returns null.
             </returns>
             
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.EntryFileNames">
             <summary>
             The list of filenames for the entries contained within the zip archive.  The 
             filenames use forward slashes in pathnames. 
             </summary>
            
             <seealso cref="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Item(System.String)"/>
            
             <example>
             This example shows one way to test if a filename is already contained within 
             a zip archive.
             <code>
             String ZipFileToRead= "PackedDocuments.zip";
             string Candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               if (zip.EntryFilenames.Contains(Candidate))
                 Console.WriteLine("The file '{0}' exists in the zip archive '{1}'",
                                   Candidate,
                                   ZipFileName);
               else
                 Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'",
                                   Candidate,
                                   ZipFileName);
               Console.WriteLine();
             }
             </code>
             <code lang="VB">
               Dim ZipFileToRead As String = "PackedDocuments.zip"
               Dim Candidate As String = "DatedMaterial.xps"
               Using zip As New ZipFile(ZipFileToRead)
                   If zip.EntryFilenames.Contains(Candidate) Then
                       Console.WriteLine("The file '{0}' exists in the zip archive '{1}'", _
                                   Candidate, _
                                   ZipFileName)
                   Else
                     Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'", _
                                   Candidate, _
                                   ZipFileName)
                   End If
                   Console.WriteLine
               End Using
             </code>
             </example>
            
             <returns>
             The list of strings for the filenames contained within the Zip archive.
             </returns>
             
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Entries">
            <summary>
            Returns the readonly collection of entries in the Zip archive.
            </summary>
            <remarks>
            If there are no entries in the current ZipFile, the value returned is a non-null zero-element collection.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZipFile.Count">
            <summary>
            Returns the number of entries in the Zip archive.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.Zip64Option">
            <summary>
            Options for using ZIP64 extensions when saving zip archives. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.Zip64Option.Default">
            <summary>
            The default behavior, which is "Never".
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.Zip64Option.Never">
            <summary>
            Do not use ZIP64 extensions when writing zip archives.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.Zip64Option.AsNecessary">
            <summary>
            Use ZIP64 extensions when writing zip archives, as necessary. 
            For example, when a single entry exceeds 0xFFFFFFFF in size, or when the archive as a whole 
            exceeds 0xFFFFFFFF in size, or when there are more than 65535 entries in an archive.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.Zip64Option.Always">
            <summary>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.NONE">
            <summary>
            NONE means that the data will be simply stored, with no change at all.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL0_NONE">
            <summary>
            Same as NONE.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.BEST_SPEED">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL1_BEST_SPEED">
            <summary>
            A synonym for BEST_SPEED.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL5">
            <summary>
            A little slower, but better, than level 4.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.DEFAULT">
            <summary>
            The default compression level.  Do these levels even matter?  Do people even care?  
            I have never measured the speed difference.  
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL6_DEFAULT">
            <summary>
            A synonym for DEFAULT.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL8">
            <summary>
             Still better compression!
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.BEST_COMPRESSION">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream. 
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel.LEVEL9_BEST_COMPRESSION">
            <summary>
            A synonym for BEST_COMPRESSION.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionStrategy">
            <summary>
            I honestly don't know what this means, but it is possible to set it in the SetDeflateParameters() call.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionStrategy.DEFAULT">
            <summary>
            It's probably safest to just leave this alone, or select the default. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionStrategy.FILTERED">
            <summary>
            I don't know what this does. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionStrategy.HUFFMAN_ONLY">
            <summary>
            I don't know what this setting does either.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtils.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtils.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtils.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtils.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.Adler">
            <summary>
            Computes an Adler-32 checksum. 
            </summary>
            <remarks>
            The Adler checksum is similar to a CRC checksum, but faster to compute, though less reliable.  
            It is used in producing RFC1950 compressed streams.  The Adler checksum is a required part of the "ZLIB" standard.
            Applications will almost never need to use this class directly. 
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec">
            <summary>
            Encoder and Decoder for ZLIB (IETF RFC1950 and RFC1951).
            </summary>
            <remarks>
            This class compresses and decompresses data according to the Deflate algorithm documented in RFC1950 and RFC1951. 
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.InitializeInflate(System.Boolean)">
            <summary>
            Initialize the inflation state with an explicit flag to govern the handling of RFC1950 header bytes. 
            </summary>
            <remarks>
            By default, the RFC1950 header is expected.  If you want to read a zlib stream 
            you should specify true for expectRfc1950Header.  If you have a deflate stream, you will
            want to specify false. It is only necessary to invoke this initializer explicitly if you want 
            to specify false.
            </remarks>
            <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading the stream of data to be inflated.</param>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
            <summary>
            Initialize the inflation state with an explicit flag to govern the handling of RFC1950 header bytes. 
            </summary>
            <remarks>
            If you want to read a zlib stream 
            you should specify true for expectRfc1950Header.  If you have a deflate stream, you will
            want to specify false. 
            </remarks>
            <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
            the stream of data to be inflated.</param>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.Inflate(System.Int32)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(ZlibConstants.Z_NO_FLUSH);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(ZlibConstants.Z_FINISH);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="f">I think you want to set this to Z_NO_FLUSH.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_NO_FLUSH">
            <summary>
            No flush at all.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_PARTIAL_FLUSH">
            <summary>
            A little bit of flush?
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_SYNC_FLUSH">
            <summary>
            Sync flush?
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_FULL_FLUSH">
            <summary>
            Full flush?
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_FINISH">
            <summary>
            Finish?
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.WINDOW_BITS_MAX">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.WINDOW_BITS_DEFAULT">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream">
            <summary>
            A class for compressing and decompressing streams using the Deflate algorithm.
            </summary>
            <remarks>
            <para>
            Data can be compressed or decompressed, and either of those can be through reading or writing. 
            For more information on the Deflate algorithm, see IETF RFC 1951, "DEFLATE Compressed Data 
            Format Specification version 1.3." 
            </para>
            <para>
            This class is similar to ZlibStream, except that <c>ZlibStream</c> adds the RFC1950 
            header bytes to a compressed stream when compressing, or expects the RFC1950 header bytes when 
            decompressing. The <c>DeflateStream</c> does not.
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.#ctor(System.IO.Stream,ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionMode,System.Boolean)">
            <summary>
            Create a DeflateStream using the specified CompressionMode, and explicitly specify whether
            the stream should be left open after Deflation or Inflation.
            </summary>
            <remarks>
            <para>
            This constructor allows the application to request that the captive stream remain open after
            the deflation or inflation occurs.  By default, after Close() is called on the stream, the 
            captive stream is also closed. In some cases this is not desired, for example if the stream 
            is a memory stream that will be re-read after compression.  Specify true for the 
            leaveOpen parameter to leave the stream open. 
            </para>
            <para>
            The DeflateStream will use the default compression level.
            </para>
            <para>
            See the other overloads of this constructor for example code.
            </para>
            </remarks>
            <param name="stream">The stream which will be read or written. This is called the 
            "captive" stream in other places in this documentation.</param>
            <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
            <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.#ctor(System.IO.Stream,ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionMode,ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.CompressionLevel,System.Boolean)">
            <summary>
            Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel, 
            and explicitly specify whether
            the stream should be left open after Deflation or Inflation.
            </summary>
            <remarks>
            <para>
            This constructor allows the application to request that the captive stream remain open after
            the deflation or inflation occurs.  By default, after Close() is called on the stream, the 
            captive stream is also closed. In some cases this is not desired, for example if the stream 
            is a memory stream that will be re-read after compression.  Specify true for the 
            leaveOpen parameter to leave the stream open. 
            </para>
            </remarks>
            <example>
            This example shows how to use a DeflateStream to compress data.
            <code>
            using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
            {
                using (var raw = System.IO.File.Create(outputFile))
                {
                    using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress, true))
                    {
                        byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                        int n= -1;
                        while (n != 0)
                        {
                            if (n &gt; 0) 
                                compressor.Write(buffer, 0, n);
                            n= input.Read(buffer, 0, buffer.Length);
                        }
                    }
                }
            }
            </code>
            <code lang="VB">
            Dim outputFile As String = (fileToCompress &amp; ".compressed")
            Using input As Stream = File.OpenRead(fileToCompress)
                Using raw As FileStream = File.Create(outputFile)
            	Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, True)
            	    Dim buffer As Byte() = New Byte(4096) {}
            	    Dim n As Integer = -1
            	    Do While (n &lt;&gt; 0)
            		If (n &gt; 0) Then
            		    compressor.Write(buffer, 0, n)
            		End If
            		n = input.Read(buffer, 0, buffer.Length)
            	    Loop
            	End Using
                End Using
            End Using
            </code>
            </example>
            <param name="stream">The stream which will be read or written.</param>
            <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
            <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.Close">
            <summary>
            Close the stream.  
            </summary>
            <remarks>
            This may or may not close the captive stream. 
            See the ctor's with leaveOpen parameters for more information.
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from the stream. 
            </summary>
            <remarks>
            <para>
            If you wish to use the DeflateStream to compress data while reading, you can create a DeflateStream with 
            CompressionMode.Compress, providing an uncompressed data stream.  Then call Read() on that DeflateStream, 
            and the data read will be compressed. 
            If you wish to use the DeflateStream to decompress data while reading, you can create a DeflateStream with 
            CompressionMode.Decompress, providing a readable compressed data stream.  Then call Read() on that DeflateStream, 
            and the data read will be decompressed. 
            </para>
            <para>
            A DeflateStream can be used for Read() or Write(), but not both. 
            </para>
            </remarks>
            <param name="buffer">The buffer into which the read data should be placed.</param>
            <param name="offset">the offset within that data array to put the first byte read.</param>
            <param name="count">the number of bytes to read.</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a NotImplementedException.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the stream. 
            </summary>
            <remarks>
            <para>
            If you wish to use the DeflateStream to compress data while writing, you can create a DeflateStream with 
            CompressionMode.Compress, and a writable output stream.  Then call Write() on that DeflateStream, 
            providing uncompressed data as input.  The data sent to the output stream will be the compressed form of the data written.
            If you wish to use the DeflateStream to decompress data while writing, you can create a DeflateStream with 
            CompressionMode.Decompress, and a writable output stream.  Then call Write() on that stream, providing previously 
            compressed data. The data sent to the output stream will be the decompressed form of the data written.   
            </para>
            <para>
            A DeflateStream can be used for Read() or Write(), but not both. 
            </para>
            </remarks>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.  
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.BufferSize">
            <summary>
            Callers can set the buffer size of the working buffer with this property.  
            </summary>
            <remarks>
            The working buffer is used for all stream operations.
            The default size is 1024 bytes.  The minimum size is 128 bytes. You may get better 
            performance with a larger buffer.  Then again, you might not.  I don't know, I haven't tested it.  
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.Length">
            <summary>
            Reading this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Toolkit.DataSources.Kml.Zip.DeflateStream.Position">
            <summary>
            Reading or Writing this property always throws a NotImplementedException.
            </summary>
        </member>
    </members>
</doc>
